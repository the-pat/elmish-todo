{"version":3,"sources":["webpack:///./src/.fable/fable-library.3.1.5/Util.js","webpack:///./src/.fable/fable-library.3.1.5/Types.js","webpack:///./src/.fable/fable-library.3.1.5/Reflection.js","webpack:///./src/.fable/fable-library.3.1.5/Option.js","webpack:///./src/.fable/fable-library.3.1.5/Choice.js","webpack:///./src/.fable/Fable.Parsimmon.4.0.0/Parsimmon.js","webpack:///./src/.fable/fable-library.3.1.5/Int32.js","webpack:///./src/.fable/fable-library.3.1.5/Numeric.js","webpack:///./src/.fable/fable-library.3.1.5/lib/long.js","webpack:///./src/.fable/fable-library.3.1.5/Long.js","webpack:///./src/.fable/fable-library.3.1.5/Date.js","webpack:///./src/.fable/fable-library.3.1.5/RegExp.js","webpack:///./src/.fable/fable-library.3.1.5/String.js","webpack:///./src/.fable/fable-library.3.1.5/lib/big.js","webpack:///./src/.fable/fable-library.3.1.5/Decimal.js","webpack:///./src/.fable/fable-library.3.1.5/Seq.js","webpack:///./src/.fable/fable-library.3.1.5/MapUtil.js","webpack:///./src/.fable/fable-library.3.1.5/MutableMap.js","webpack:///./src/.fable/fable-library.3.1.5/MutableSet.js","webpack:///./src/.fable/fable-library.3.1.5/Array.js","webpack:///./src/.fable/fable-library.3.1.5/List.js","webpack:///./src/.fable/Fable.Parsimmon.4.0.0/Parsimmon.fs.js","webpack:///./src/.fable/fable-library.3.1.5/Double.js","webpack:///./src/.fable/Fable.SimpleJson.3.18.1/Json.fs.js","webpack:///./src/.fable/fable-library.3.1.5/FSharp.Core.js","webpack:///./src/.fable/fable-library.3.1.5/FSharp.Collections.js","webpack:///./src/.fable/fable-library.3.1.5/Map.js","webpack:///./src/.fable/Fable.SimpleJson.3.18.1/Parser.fs.js","webpack:///./src/.fable/fable-library.3.1.5/BigInt/n.js","webpack:///./src/.fable/fable-library.3.1.5/BigInt/z.js","webpack:///./src/.fable/fable-library.3.1.5/BigInt.js","webpack:///./src/.fable/Fable.SimpleJson.3.18.1/SimpleJson.fs.js","webpack:///./src/.fable/Fable.SimpleJson.3.18.1/TypeCheck.fs.js","webpack:///./src/.fable/fable-library.3.1.5/DateOffset.js","webpack:///./src/.fable/fable-library.3.1.5/Guid.js","webpack:///./src/.fable/fable-library.3.1.5/BitConverter.js","webpack:///./src/.fable/fable-library.3.1.5/Set.js","webpack:///./src/.fable/Fable.SimpleJson.3.18.1/TypeInfo.fs.js","webpack:///./src/.fable/Fable.SimpleJson.3.18.1/TypeInfo.Converter.fs.js","webpack:///./src/.fable/Fable.SimpleJson.3.18.1/Json.Converter.fs.js","webpack:///./src/.fable/Fable.SimpleJson.3.18.1/quote.js","webpack:///./src/.fable/fable-library.3.1.5/AsyncBuilder.js","webpack:///./src/.fable/fable-library.3.1.5/Async.js","webpack:///./src/.fable/Fable.Elmish.3.1.0/cmd.fs.js","webpack:///./src/.fable/Feliz.1.37.0/Interop.fs.js","webpack:///./src/.fable/Feliz.Bulma.2.11.0/ElementBuilders.fs.js","webpack:///./src/.fable/Feliz.1.37.0/Key.fs.js","webpack:///./src/.fable/Feliz.Bulma.2.11.0/Operators.fs.js","webpack:///./src/.fable/Feliz.1.37.0/React.fs.js","webpack:///./src/.fable/Feliz.1.37.0/ReactInterop.js","webpack:///./src/.fable/Fable.Promise.2.0.0/Promise.fs.js","webpack:///./src/.fable/Fable.Promise.2.0.0/PromiseImpl.fs.js","webpack:///./src/.fable/Feliz.UseElmish.1.5.1/UseElmish.fs.js","webpack:///./src/Todo.fs.js","webpack:///./src/.fable/Feliz.1.37.0/Properties.fs.js","webpack:///./src/Main.fs.js","webpack:///webpack/bootstrap","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/jsonp chunk loading","webpack:///webpack/startup"],"names":["isArrayLike","x","Array","isArray","ArrayBuffer","isView","isHashable","GetHashCode","sameConstructor","y","Object","getPrototypeOf","constructor","Lazy","factory","this","isValueCreated","createdValue","padWithZeros","i","length","str","toString","dateOffset","date","date1","offset","kind","getTimezoneOffset","int32ToString","radix","ObjectRef","o","idMap","has","set","count","get","stringHash","s","h","len","charCodeAt","numberHash","combineHashCodes","hashes","reduce","h1","h2","structuralHash","arrayHash","Date","getTime","dateHash","values","map","v","id","safeHash","equalArraysWith","eq","equalArrays","equals","Equals","isEquatable","compareDates","xKeys","keys","yKeys","sort","equalObjects","xtime","ytime","comparePrimitives","compareArrays","comp","j","compareArraysWith","compare","CompareTo","isComparable","key","compareObjects","max","comparer","createObj","fields","obj","kv","seqToString","self","callStack","Symbol","iterator","cons","entries","join","name","String","compareList","other","tail","res","head","WeakMap","List","cur","next","value","done","from","Union","concat","withParens","field","indexOf","splice","tag","cases","Record","recordToJSON","recordToString","recordGetHashCode","thisNames","recordEquals","result","recordCompareTo","FSharpRef","contentsOrGetter","setter","getter","CaseInfo","declaringType","TypeInfo","fullname","generics","construct","parent","enumCases","fullName","getHashCode","getGenerics","t","fullnameHash","genHashes","t1","t2","getRecordElements","k1","v1","k2","v2","class_type","record_type","undefined","option_type","generic","string_type","info","lastIndexOf","substr","gen","endsWith","getUnionCases","Error","isTuple","startsWith","isFunction","makeUnion","uci","expectedLength","makeRecord","Some","some","toArray","opt","defaultArg","defaultValue","FSharpResult$2","Parsimmon","action","_","prototype","f","seed","arr","n","times","forEach","elem","acc","a","isParser","call","isBuffer","Buffer","makeSuccess","index","status","furthest","expected","makeFailure","mergeReplies","last","xs","ys","k","hasOwnProperty","push","union","makeLineColumnIndex","input","line","column","lines","slice","split","assertParser","p","charAt","assertNumber","assertRegexp","RegExp","flags","c","assertFunction","assertString","repeat","string","amount","leftPad","pad","char","add","rangeFromIndexAndOffsets","before","after","to","formatGot","error","lineWithErrorIndex","lineRange","lastLineNumberLabelLength","verticalMarkerLength","byteLineWithErrorIndex","columnByteIndex","byteRange","bytesPerLine","bytesAfter","byteLines","byteRow","byteValue","chunkSize","chunks","chunkIndex","toChunks","toJSON","data","Math","floor","byteRangeToRange","byteLine","inputLines","lineWithErrorCurrentIndex","lineSource","lineNumberLabel","isLineWithError","prefix","re","anchoredRegexp","source","seq","parsers","arguments","numParsers","accum","seqMap","args","mapper","pop","apply","results","alt","fail","sepBy1","parser","separator","then","many","r","rs","regexp","group","anchored","match","exec","fullMatch","groupMatch","succeed","lookahead","test","predicate","parse","skip","eof","tryParse","msg","err","type","or","alternative","trim","wrap","leftParser","rightParser","left","middle","thru","wrapper","tieWith","assertArray","tie","min","prevResult","atMost","atLeast","init","rest","fn","contramap","promap","g","mark","start","end","node","sepBy","notFollowedBy","text","desc","reply","fallback","ap","chain","empty","of","NumberStyles","digit","optWhitespace","cr","lf","newline","getRange","unsigned","bitsize","isValid","style","replace","digits","getInvalidDigits","AllowHexSpecifier","getRadix","regexMatch","sign","validResponse","Number","parseInt","isNaN","umin","umax","defValue","contents","_a","symbol","isNumeric","multiply","toFixed","dp","toPrecision","sd","toExponential","toHex","wasm","WebAssembly","Instance","Module","Uint8Array","exports","e","Long","low","high","isLong","bytes","le","fromBytesLE","fromBytesBE","fromBytes","$this","hi","lo","toBytesLE","toBytesBE","__isLong__","defineProperty","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","negate","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","pow","fromString","RangeError","substring","radixToPower","size","fromValue","val","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","toInt","toNumber","isZero","isNegative","radixLong","div","divide","rem1","subtract","rem","remDiv","isOdd","lessThan","greaterThan","greaterThanOrEqual","thisNeg","otherNeg","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtrahend","multiplier","mul","get_high","b00","divisor","approx","div_u","div_s","toUnsigned","numBits","shiftRightUnsigned","shiftLeft","shiftRight","log2","ceil","log","LN2","delta","approxRes","approxRem","op_Addition","LongLib","op_Multiply","op_Division","op_UnaryNegation","op_BitwiseAnd","fromInteger","xh","_bitsize","maxValue","getMaxValue","toUpperCase","padStart","offsetRegex","dateOffsetToString","isMinus","minutes","abs","dateToHalfUTCString","half","toISOString","dateToStringWithCustomFormat","format","utc","rep","NaN","getUTCFullYear","getFullYear","getUTCMonth","getMonth","getUTCDate","getDate","getUTCHours","getHours","getUTCMinutes","getMinutes","getUTCSeconds","getSeconds","getUTCMilliseconds","getMilliseconds","_provider","_b","_c","dateWithOffset","d","dateToStringWithOffset","toUTCString","toLocaleString","toLocaleDateString","toLocaleTimeString","printOffset","dateToISOString","dateToStringWithKind","DateTime","parseRaw","m","baseDate","timeInSeconds","timeParts","parseFloat","offsetParts","offsetInMinutes","detectUTC","utcNow","now","ts","newDate","oldTzOffset","newTzOffset","addHours","addMonths","newMonth","month","newMonth_","yearOffset","newYear","year","_daysInMonth","isLeapYear","daysInMonth","day","ms","dateValue","UTC","setFullYear","create","hour","minute","second","millisecond","escape","fsFormatRegExp","formatRegExp","isLessThan","numericCompare","printf","cont","createPrinter","continuePrint","arg","toText","toFail","formatOnce","str2","padRef","padLength","precision","toLowerCase","dateToString","zeroFlag","minusFlag","ch","padLeft","formatReplacement","strCopy","shift","idx","pattern","intPart","decimalPart","search","isNullOrEmpty","delimiter","fromBase64String","b64Encoded","binary","atob","notSupported","isRight","P","_this","cmp","MAX_DP","NAME","INVALID","INVALID_DP","INVALID_RM","DIV_BY_ZERO","UNDEFINED","NUMERIC","nl","round","Big","DP","RM","rm","more","xc","findIndex","xci","unshift","stringify","z","NE","PE","isneg","yc","l","b","bl","bt","ri","bz","ai","al","rl","q","qc","qi","gt","gte","lt","lte","minus","sub","xlty","plus","xe","ye","reverse","mod","ygtx","one","sqrt","valueOf","_Big_","normalize","version","Decimal","Enumerator","iter","current","getEnumerator","GetEnumerator","toIterator","en","hasNext","Seq","makeSeq","append","delay","firstDone","iters","unfold","output","innerIter","hasFinished","collect","singleton","fold","isArrayOrBufferView","iterate","iterateIndexed","sumBy","adder","Add","GetZero","tryFind","fst","tryGetValue","addToDict","dict","getItemFromDict","Dictionary","pairs","this$","hashMap","Map","enumerator","pair","Dictionary__Add_5BDDA1","Dispose","item","Dictionary__Clear","matchValue","Dictionary__TryFind_2B595","array","arrayIndex","Dictionary__get_Count","Dictionary__Remove_2B595","Dictionary__get_Item_2B595","Dictionary__TryFindIndex_2B595","Dictionary__ContainsKey_2B595","Dictionary__set_Item_5BDDA1","thisArg","toStringTag","outArg","clear","HashSet","items","HashSet__Add_2B595","HashSet__Clear","HashSet__Contains_2B595","HashSet__get_Count","HashSet__Remove_2B595","HashSet__TryFindIndex_2B595","v_1","Helpers_allocateArrayFromCons","mapIndexed","target","arrays","arrays_1","totalIdx","totalLength","idx_1","arr_2","initialize","initializer","find","zip","array1","array2","differentLengths","f_mut","state_mut","xs_mut","state","List_1","ofSeq","fold_1","_arg1","unitVar0","ofArray","tail_1","col","ofArrayWithTail","i_mut","_arg1_mut","tryPickIndexedAux","tryPickIndexed","filter","choose","value_1","Parsimmon_many","Parsimmon_ofLazy","Parsimmon_digit","Parsimmon_seperateBy","content","others","Parsimmon_between","right","skipped","Parsimmon_map","Parsimmon_choose","ps","Parsimmon_satisfy","Parsimmon_str","Parsimmon_optionalWhitespace","Parsimmon_atLeastOneOrMany","Parsimmon_atLeast","Parsimmon_stringReturn","Parsimmon_seq2","Parsimmon_concat","strings","Parsimmon_seq3","Json","LanguagePrimitives_FastGenericComparer","e1","e2","Compare","x_1","MapTreeLeaf$2","MapTreeLeaf$2_$ctor_5BDDA1","MapTreeLeaf$2__get_Key","MapTreeLeaf$2__get_Value","MapTreeNode$2","MapTreeNode$2_$ctor_499A11FD","MapTreeNode$2__get_Left","MapTreeNode$2__get_Right","MapTreeNode$2__get_Height","MapTreeModule_sizeAux","acc_mut","m_mut","m2","MapTreeModule_size","MapTreeModule_mk","hl","hr","m_2","MapTreeModule_rebalance","m2_2","m_3","m2_3","t1h","t2h","value_2","matchValue_1","matchValue_2","matchValue_3","MapTreeModule_add","MapTreeModule_empty","MapTreeModule_tryFind","comparer_mut","k_mut","MapTreeModule_iterOpt","MapTreeModule_iter","MapTreeModule_toList","loop","m_1_mut","MapTreeModule_ofSeq","forLoopVar","MapTreeModule_ofArray","tupledArg","MapTreeModule_ofList","ie","e_mut","patternInput","MapTreeModule_mkFromEnumerator","MapTreeModule_MapIterator$2","stack","started","MapTreeModule_collapseLHS","stack_mut","MapTreeModule_mkIterator","MapTreeModule_current","MapTreeModule_alreadyFinished","MapTreeModule_notStarted","MapTreeModule_mkIEnumerator","MapTreeModule_moveNext","FSharpMap","tree","combineHash","activePatternResult4293","FSharpMap__ComputeHashCode","that","m1","e1c","e2c","map_2","cur1","cur2","iter1","iter2","compareWith","kvp1","kvp2","FSharpMap__ContainsKey","FSharpMap__get_Item","MapTreeModule_copyToArray","FSharpMap__get_Count","iterate_1","FSharpMap_$ctor","MapTreeModule_find","MapTreeModule_mem","isEmpty","table","FSharpMap__TryFind","containsKey","ofList","elements","toList","otherParser","anyCharSnippet","jint","negJint","jfloat","digitsLeft","negativeJFloat","jnumber","arg0","jbool","jnull","stringLiteral","Parsimmon_oneOf","tuple","c_1","withWhitespace","jvalue","comma","json$004099$002D1","Value","arg_2","jsonParser","BigNat","bound","BigNatModule_FFT_pow32","x_mut","n_mut","BigNatModule_bound","BigNatModule_coeff","BigNatModule_coeff64","BigNatModule_setCoeff","BigNatModule_pow64","BigNatModule_pow32","BigNatModule_FFT_maxTwoPower","Int32Array","BigNatModule_baseBits","BigNatModule_baseN","BigNatModule_baseNi64","BigNatModule_baseMaski64","BigNatModule_divbase","BigNatModule_modbase","BigNatModule_createN","BigNatModule_normN","na_mut","na","findLeastBound","BigNatModule_embed","r_1","BigNatModule_boundInt","BigNatModule_eval32","BigNatModule_one","BigNatModule_zero","BigNatModule_degree","BigNatModule_add","rbound","c_mut","p_mut","q_mut","r_mut","i_1","z_1","i_2","BigNatModule_addP","BigNatModule_isZero","BigNatModule_lt","pa_mut","qa_mut","pa","qa","check","BigNatModule_compare","BigNatModule_mulSchoolBookCarry","rak","BigNatModule_mulSchoolBookOneSmall","bp","q_1","BigNatModule_encoding","bigL","twoToBigL","bigK","bigN","splits","BigNatModule_mkEncoding","BigNatModule_table","BigNatModule_mul","pSmall","qSmall","BigNatModule_mulSchoolBookBothSmall","ra","pai","qaj","BigNatModule_mulSchoolBookNeitherSmall","BigNatModule_mulSchoolBook","BigNatModule_scaleSubInPlace","patternInput_1","ad","a_1","f_1","zLo","zHi","BigNatModule_scaleAddInPlace","BigNatModule_removeFactor","degx","dega","pn","xa","aa","qai","BigNatModule_divmod","BigNatModule_copyN","finished","BigNatModule_toFloat","evalFloat","BigNatModule_ofInt32","BigNatModule_ofInt64","BigNatModule_boundInt64","rem_u","rem_s","BigNatModule_embed64","BigNatModule_toString","degn","digits_4","isLeading_mut","digits_mut","n_1_mut","isLeading","n_1","n_2","prior_1","nL","nH","prior_mut","ten2k_mut","prior","ten2k","route","BigNatModule_ofString","ten","build","BigNatModule_getSmall","BigInteger","signInt","BigInteger__get_SignInt","BigInteger__get_V","BigInteger_op_Equality_56F059C0","BigNatModule_hash","nn","BigInteger_op_LessThan_56F059C0","BigInteger_$ctor_Z2BE94A1","BigInteger_nat_Z67CCE57D","BigNatModule_isSmall","smallLim","smallPosTab","BigInteger_posn_Z67CCE57D","BigInteger_$ctor_Z524259A4","BigInteger_get_One","BigInteger_get_Zero","zero","arg00","text_1","BigInteger_Parse_Z721C83C5","toDecimal","BigInteger__get_ToDouble","BigInteger__get_ToDecimal","InteropUtil_isBigInt","InteropUtil_isObjectLiteral","SimpleJson_tryParse","Parsimmon_parse","SimpleJson_parse","SimpleJson_toString","arg10_1","map_1","_arg1_1","arg10_3","arg20","SimpleJson_toPlainObject","value_3","jsObject","enumerator_1","SimpleJson_stringify","JSON","jsonValue","toString_1","InteropUtil_isDateOffset","SimpleJson_parseNative$0027","activePatternResult3430","$007CNativeString$007C_$007C","activePatternResult3429","$007CNativeNumber$007C_$007C","activePatternResult3428","$007CNativeBool$007C_$007C","$007CNull$007C_$007C","activePatternResult3426","$007CNativeArray$007C_$007C","activePatternResult3425","$007CNativeObject$007C_$007C","object","value_5","map_3","SimpleJson_parseNative","DateTimeOffset","offsetMatch","two","guidRegex","guidRegexNoHyphen","guidRegexHex","hyphenateGuid","wsTrimAndLowered","chars","newGuid","random","littleEndian","getBytesInt32","DataView","buffer","byteOffset","byteLength","setInt32","SetTreeLeaf$1","SetTreeLeaf$1_$ctor_2B595","SetTreeLeaf$1__get_Key","SetTreeNode$1","SetTreeNode$1_$ctor_Z6E7BE5F7","SetTreeNode$1__get_Left","SetTreeNode$1__get_Right","SetTreeNode$1__get_Height","SetTreeModule_countAux","t_mut","SetTreeModule_count","SetTreeModule_mk","SetTreeModule_rebalance","t_2","t2_3","t_3","t2_4","SetTreeModule_add","SetTreeModule_empty","SetTreeModule_mem","SetTreeModule_iter","SetTreeModule_SetIterator$1","SetTreeModule_collapseLHS","x2","SetTreeModule_mkIterator","SetTreeModule_current","SetTreeModule_alreadyFinished","SetTreeModule_notStarted","SetTreeModule_mkIEnumerator","SetTreeModule_moveNext","SetTreeModule_compare","l1_mut","l2_mut","SetTreeModule_compareStacks","l1","l2","x1_3","x2_3","pattern_matching_result","t1_6","x1_4","t2_6","x2_4","matchValue_4","pattern_matching_result_1","t1_7","x1_5","t2_7","x2_5","c_3","c_2","matchValue_5","pattern_matching_result_2","t1_8","x1_6","t2_8","x2_6","pattern_matching_result_3","t1_2","x1","t2_2","x2_1","pattern_matching_result_4","t1_4","x1_2","x2_2","SetTreeModule_copyToArray","SetTreeModule_ofSeq","SetTreeModule_mkFromEnumerator","FSharpSet","FSharpSet__ComputeHashCode","FSharpSet__get_Comparer","FSharpSet__get_Tree","FSharpSet__get_Count","FSharpSet__Contains","FSharpSet_$ctor","set$","RecordField","FieldName","FieldType","PropertyInfo","UnionCase","CaseName","CaseTypes","Info","flattenFuncTypes","typeDef","getFunctionElements","lazyToDelayed","_createTypeInfo","resolvedType","l_3","l_4","l_5","l_6","l_7","l_8","l_9","l_10","l_11","l_12","l_13","l_14","l_15","l_16","l_17","activePatternResult3345","primType","$007CPrimitiveType$007C_$007C","activePatternResult3344","types","resolvedType_1","createTypeInfo","activePatternResult3343","isRecord","$007CRecordType$007C_$007C","l_1","activePatternResult3342","isUnion","prop","$007CUnionType$007C_$007C","l_2","resolvedType_2","activePatternResult3341","isEnum","getEnumUnderlyingType","$007CEnumType$007C_$007C","elemType","activePatternResult3340","$007CListType$007C_$007C","elemType_1","activePatternResult3339","$007CResizeArrayType$007C_$007C","elemType_2","activePatternResult3338","$007CHashSetType$007C_$007C","elemType_3","activePatternResult3337","getElementType","$007CArrayType$007C_$007C","elemType_4","activePatternResult3336","getTupleElements","$007CTupleType$007C_$007C","types_1","resolvedType_3","activePatternResult3335","$007COptionType$007C_$007C","elemType_5","activePatternResult3334","$007CNullable$007C_$007C","elemType_6","activePatternResult3333","$007CSetType$007C_$007C","elemType_7","activePatternResult3332","genArgs","$007CMapType$007C_$007C","keyType","valueType","activePatternResult3331","$007CDictionaryType$007C_$007C","keyType_1","valueType_1","activePatternResult3330","$007CSeqType$007C_$007C","elemType_8","activePatternResult3329","$007CAsyncType$007C_$007C","elemType_9","activePatternResult3328","$007CPromiseType$007C_$007C","elemType_10","typeInfoCache","ti_1","isPrimitive","enumUnion","every","case$","Convert_insideBrowser","Function","Convert_isDefined","Convert_InternalMap","Convert_flattenMap","singleton_1","Convert_$007CNonArray$007C_$007C","Convert_$007CMapKey$007C_$007C","Convert_generateMap","json","Convert_$007CMapEmpty$007C_$007C","activePatternResult3508","activePatternResult3503","Convert_$007CMapOne$007C_$007C","activePatternResult3507","activePatternResult3505","Convert_$007CMapNode$007C_$007C","leftMap","rightMap","key_1","Convert_flatteFable3Map","empty_1","Convert_flattenFable3Lists","linkedList","Convert_arrayLike","Convert_unionOfRecords","Convert_isRecord","exists","Convert_optional","Convert_isQuoted","Convert_betweenQuotes","Convert_removeQuotes","startIndex","Convert_fromJsonAs","input_mut","typeInfo_mut","foundCase","foundCase_2","testExpr","values_8","typeInfo","toLocaleLowerCase","value_4","view","value_43","input_1","value_7","value_8","value_9","value_10","value_11","value_12","value_13","value_14","value_15","value_16","value_17","value_18","value_19","value_20","value_21","value_22","value_23","getlElemType","value_24","getElemType","value_25","getElemType_1","value_26","genericJson","value_27","value_28","value_29","value_30","value_31","value_32","value_33","value_34","getTypes","jsonValue_5","optionalTypeDelayed_5","parse_1","parse_2","underlyingType","originalType","name_2","outArg_1","tryParse_1","arg20_1","arg20_2","WorkerGlobalScope","parse_3","parse_4","parse_5","DateOffset","caseName","values_1","caseName_1","patternInput_2","unionType","activePatternResult3537","foundCase_3","tryFind_1","expectedCases","case$_1","arg20_4","foundCase_1","foundCase_4","arg30_1","arg20_5","pattern_matching_result_5","caseInfo","caseType","_arg2","case$_2","typeInfo_1","expectedCases_1","case$_3","arg20_7","foundDiscriminatorKey","tryFind_2","keyword","discriminatorValueJson","discriminatorValue","foundUnionCase","tryFind_3","case$_4","case$_5","arg10_12","arg10_13","arg10_11","unexpectedJson","expectedType","pattern_matching_result_6","caseIndex","fieldValues","foundCase_5","value_40","arg20_8","arg10_10","pattern_matching_result_7","value_41","value_42","caseName_4","getTypes_2","parse_6","pattern_matching_result_8","get$","_arg3","getInt32","patternInput_3","caseTypes","_arg4","case$_6","expectedCases_2","case$_7","arg20_11","pattern_matching_result_9","caseName_5","getTypes_3","serializedRecord","caseValue","getTypes_4","elementTypeDelayed","values_4","elementTypeDelayed_1","values_5","elementTypeDelayed_2","elementTypeDelayed_3","values_6","elementTypeDelayed_4","values_7","array_9","tupleTypesDelayed","dict_1","getTypes_5","getTypes_6","tuples","getTypes_7","tuples_1","dict_2","getTypes_8","getType","getTypes_9","getType_1","patternInput_4","caseTypes_1","_arg5","case$_8","expectedCases_3","case$_9","arg20_12","pattern_matching_result_10","caseName_6","caseName_8","values_3","otherwise_6","patternInput_5","cases_1","_arg6","case$_10","expectedCases_4","case$_11","arg20_13","_arg7","case$_12","foundCaseName","caseInfo_4","tupledArg_1","expectedCases_5","unexpectedJson_1","expectedType_1","elementType","value_47","elementType_1","value_49","elementType_2","value_51","elementType_3","value_53","x_2","y_1","elementType_4","value_55","tupledArg_2","patternInput_6","recordType","_arg3_1","fieldType","fieldName","_arg8","tupledArg_3","dictKeys","recordFields","arg10_27","arg10_30","_arg2_1","name_1","arg30_6","patternInput_7","keyValuePair","patternInput_8","pairs_1","keyValuePair_1","x_3","y_2","x_4","y_3","x_5","y_4","patternInput_9","keyType_2","pairs_2","tupledArg_4","output_1","x_6","y_5","x_7","y_6","x_8","y_7","forLoopVar_1","hashset","x_9","y_8","x_10","y_9","x_11","y_10","enumerator_2","pattern_matching_result_11","tree_1","patternInput_10","valueType_5","keyType_3","matchValue_6","inputJson","pairs_3","tupledArg_5","key_6","pattern_matching_result_12","tree_3","pairs_4","tupledArg_6","key_7","arg20_17","arg10_33","arg20_18","arg10_34","Convert_fromJson","Convert_quoteText","inputText","escapable","meta","lastIndex","Convert_serialize","value_mut","copyOfStruct","copyOfStruct_1","copyOfStruct_2","toString_2","toString_3","getRecordField","map_4","element","element_1","element_2","element_3","element_4","elementType_5","element_5","value_83","case_","getUnionFields","usedCase","serializedFields_1","serializedValues","serializedKey","serializedValue","MapTreeModule_toArray","serializedValues_1","serializedKey_1","serializedValue_1","tupleTypes","index_1","element_6","CancellationToken","cancelled","_id","_cancelled","_listeners","listener","$","addListener","removeListener","OperationCanceledError","setPrototypeOf","protectedCont","ctx","cancelToken","isCancelled","onCancel","trampoline","incrementAndCheck","hijack","onError","isCancellationRequested","token","Cmd_none","computation","binder","onSuccess","ex","protectedBind","computation1","computation2","Bind","generator","sequence","body","While","Delay","protectedReturn","compensation","catchHandler","ex2","resource","TryFinally","guard","Return","Interop_reactApi","react","Helpers_combineClasses","cn","arity","uncurriedFn","a1","a2","a3","a4","a5","a6","a7","a8","uncurry","classes","props","Helpers_extractClasses","key_create","key_enter","op_PlusPlus","prop1","prop2","ReactInterop_useEffectWithDeps","getDisposable","deps","useEffectReact","disposable","React_createDisposable_3A5B6456","dispose","useReact_useEffect_Z5234A374","effect","dependencies","useReact_useRef_1505","initialValue","useReact_useCallbackRef_7C4B0DD6","callback","callbackFunction","lastRenderCallbackRef","callbackRef","useLayoutEffectReact","PromiseBuilder__While_2044D34","Promise","resolve","PromiseBuilder__Delay_62FBFDE1","f1","f2","er","reject","er_1","catch","er_2","er_3","promise","RingState$1","RingBuffer$1","fill","targetIndex","RingBuffer$1__Pop","wix","rix","rix$0027","useFeliz_React__React_useElmish_Static_17DC4F1D","update","initial","token_1","ring","cts","createCancellationToken","cancel","setChildState_1","setTimeout","dispatch_1","dispatch","nextMsg","success","useReact_useEffect_Z101E1A95","sub_1","Filter","TodoBeingEdited","Id","Description","Todo","CompletedOn","CreatedOn","State","TodoList","NewTodo","State$reflection","caseNames","Msg","storedState","arg00_1","localStorage","getItem","message","todo","elms_3","elms_1","elms","elms_2","props_4","props_8","appTitle","createElement","className","children","inputField","props_2","value_6","props_7","props_5","props_9","ev","ev_1","handler","pressedKey","ctrlKey","shiftKey","PropHelpers_createOnKey","todoList","projection","xs_1","sortedTodoList","todo_1","todo_2","todoBeingEdited_1","uneditedTodoDescription","todoBeingEdited","props_11","append_1","renderEditForm","props_15","props_13","props_10","renderTodo","renderFilterTabs","props_1","App","createFunction","useReact_useMemo_CF4EA67","useFeliz_React__React_useElmish_Static_645B1FB7","newState","setItem","newState_1","newState_2","todo_3","newState_3","todo_4","todo_5","newState_4","state_1","children_2","render","document","getElementById","__webpack_module_cache__","__webpack_require__","moduleId","module","__webpack_modules__","installedChunks","143","deferredModules","checkDeferredModules","webpackJsonpCallback","parentChunkLoadingFunction","chunkId","chunkIds","moreModules","runtime","executeModules","resolves","chunkLoadingGlobal","checkDeferredModulesImpl","deferredModule","fulfilled","depId","bind","startup"],"mappings":"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AK,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GA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","file":"app.509794d1506bff3064b2.js","sourcesContent":["// tslint:disable:ban-types\nexport function isIterable(x) {\n    return x != null && typeof x === \"object\" && Symbol.iterator in x;\n}\nexport function isArrayLike(x) {\n    return Array.isArray(x) || ArrayBuffer.isView(x);\n}\nfunction isComparer(x) {\n    return typeof x.Compare === \"function\";\n}\nfunction isComparable(x) {\n    return typeof x.CompareTo === \"function\";\n}\nfunction isEquatable(x) {\n    return typeof x.Equals === \"function\";\n}\nfunction isHashable(x) {\n    return typeof x.GetHashCode === \"function\";\n}\nexport function isDisposable(x) {\n    return x != null && typeof x.Dispose === \"function\";\n}\nexport function sameConstructor(x, y) {\n    return Object.getPrototypeOf(x).constructor === Object.getPrototypeOf(y).constructor;\n}\nexport class Comparer {\n    constructor(f) {\n        this.Compare = f || compare;\n    }\n}\nexport function comparerFromEqualityComparer(comparer) {\n    // Sometimes IEqualityComparer also implements IComparer\n    if (isComparer(comparer)) {\n        return new Comparer(comparer.Compare);\n    }\n    else {\n        return new Comparer((x, y) => {\n            const xhash = comparer.GetHashCode(x);\n            const yhash = comparer.GetHashCode(y);\n            if (xhash === yhash) {\n                return comparer.Equals(x, y) ? 0 : -1;\n            }\n            else {\n                return xhash < yhash ? -1 : 1;\n            }\n        });\n    }\n}\nexport function assertEqual(actual, expected, msg) {\n    if (!equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport function assertNotEqual(actual, expected, msg) {\n    if (equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport class Lazy {\n    constructor(factory) {\n        this.factory = factory;\n        this.isValueCreated = false;\n    }\n    get Value() {\n        if (!this.isValueCreated) {\n            this.createdValue = this.factory();\n            this.isValueCreated = true;\n        }\n        return this.createdValue;\n    }\n    get IsValueCreated() {\n        return this.isValueCreated;\n    }\n}\nexport function lazyFromValue(v) {\n    return new Lazy(() => v);\n}\nexport function padWithZeros(i, length) {\n    let str = i.toString(10);\n    while (str.length < length) {\n        str = \"0\" + str;\n    }\n    return str;\n}\nexport function padLeftAndRightWithZeros(i, lengthLeft, lengthRight) {\n    let str = i.toString(10);\n    while (str.length < lengthLeft) {\n        str = \"0\" + str;\n    }\n    while (str.length < lengthRight) {\n        str = str + \"0\";\n    }\n    return str;\n}\nexport function dateOffset(date) {\n    const date1 = date;\n    return typeof date1.offset === \"number\"\n        ? date1.offset\n        : (date.kind === 1 /* UTC */\n            ? 0 : date.getTimezoneOffset() * -60000);\n}\nexport function int16ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport function int32ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFFFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport class ObjectRef {\n    static id(o) {\n        if (!ObjectRef.idMap.has(o)) {\n            ObjectRef.idMap.set(o, ++ObjectRef.count);\n        }\n        return ObjectRef.idMap.get(o);\n    }\n}\nObjectRef.idMap = new WeakMap();\nObjectRef.count = 0;\nexport function stringHash(s) {\n    let i = 0;\n    let h = 5381;\n    const len = s.length;\n    while (i < len) {\n        h = (h * 33) ^ s.charCodeAt(i++);\n    }\n    return h;\n}\nexport function numberHash(x) {\n    return x * 2654435761 | 0;\n}\n// From https://stackoverflow.com/a/37449594\nexport function combineHashCodes(hashes) {\n    if (hashes.length === 0) {\n        return 0;\n    }\n    return hashes.reduce((h1, h2) => {\n        return ((h1 << 5) + h1) ^ h2;\n    });\n}\nexport function physicalHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"string\":\n            return stringHash(x);\n        default:\n            return numberHash(ObjectRef.id(x));\n    }\n}\nexport function identityHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    else if (isHashable(x)) {\n        return x.GetHashCode();\n    }\n    else {\n        return physicalHash(x);\n    }\n}\nexport function dateHash(x) {\n    return x.getTime();\n}\nexport function arrayHash(x) {\n    const len = x.length;\n    const hashes = new Array(len);\n    for (let i = 0; i < len; i++) {\n        hashes[i] = structuralHash(x[i]);\n    }\n    return combineHashCodes(hashes);\n}\nexport function structuralHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"string\":\n            return stringHash(x);\n        default: {\n            if (isHashable(x)) {\n                return x.GetHashCode();\n            }\n            else if (isArrayLike(x)) {\n                return arrayHash(x);\n            }\n            else if (x instanceof Date) {\n                return dateHash(x);\n            }\n            else if (Object.getPrototypeOf(x).constructor === Object) {\n                // TODO: check call-stack to prevent cyclic objects?\n                const hashes = Object.values(x).map((v) => structuralHash(v));\n                return combineHashCodes(hashes);\n            }\n            else {\n                // Classes don't implement GetHashCode by default, but must use identity hashing\n                return numberHash(ObjectRef.id(x));\n                // return stringHash(String(x));\n            }\n        }\n    }\n}\n// Intended for custom numeric types, like long or decimal\nexport function fastStructuralHash(x) {\n    return stringHash(String(x));\n}\n// Intended for declared types that may or may not implement GetHashCode\nexport function safeHash(x) {\n    return x == null ? 0 : isHashable(x) ? x.GetHashCode() : numberHash(ObjectRef.id(x));\n}\nexport function equalArraysWith(x, y, eq) {\n    if (x == null) {\n        return y == null;\n    }\n    if (y == null) {\n        return false;\n    }\n    if (x.length !== y.length) {\n        return false;\n    }\n    for (let i = 0; i < x.length; i++) {\n        if (!eq(x[i], y[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equalArrays(x, y) {\n    return equalArraysWith(x, y, equals);\n}\nfunction equalObjects(x, y) {\n    const xKeys = Object.keys(x);\n    const yKeys = Object.keys(y);\n    if (xKeys.length !== yKeys.length) {\n        return false;\n    }\n    xKeys.sort();\n    yKeys.sort();\n    for (let i = 0; i < xKeys.length; i++) {\n        if (xKeys[i] !== yKeys[i] || !equals(x[xKeys[i]], y[yKeys[i]])) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equals(x, y) {\n    if (x === y) {\n        return true;\n    }\n    else if (x == null) {\n        return y == null;\n    }\n    else if (y == null) {\n        return false;\n    }\n    else if (typeof x !== \"object\") {\n        return false;\n    }\n    else if (isEquatable(x)) {\n        return x.Equals(y);\n    }\n    else if (isArrayLike(x)) {\n        return isArrayLike(y) && equalArrays(x, y);\n    }\n    else if (x instanceof Date) {\n        return (y instanceof Date) && compareDates(x, y) === 0;\n    }\n    else {\n        return Object.getPrototypeOf(x).constructor === Object && equalObjects(x, y);\n    }\n}\nexport function compareDates(x, y) {\n    let xtime;\n    let ytime;\n    // DateTimeOffset and DateTime deals with equality differently.\n    if (\"offset\" in x && \"offset\" in y) {\n        xtime = x.getTime();\n        ytime = y.getTime();\n    }\n    else {\n        xtime = x.getTime() + dateOffset(x);\n        ytime = y.getTime() + dateOffset(y);\n    }\n    return xtime === ytime ? 0 : (xtime < ytime ? -1 : 1);\n}\nexport function comparePrimitives(x, y) {\n    return x === y ? 0 : (x < y ? -1 : 1);\n}\nexport function compareArraysWith(x, y, comp) {\n    if (x == null) {\n        return y == null ? 0 : 1;\n    }\n    if (y == null) {\n        return -1;\n    }\n    if (x.length !== y.length) {\n        return x.length < y.length ? -1 : 1;\n    }\n    for (let i = 0, j = 0; i < x.length; i++) {\n        j = comp(x[i], y[i]);\n        if (j !== 0) {\n            return j;\n        }\n    }\n    return 0;\n}\nexport function compareArrays(x, y) {\n    return compareArraysWith(x, y, compare);\n}\nfunction compareObjects(x, y) {\n    const xKeys = Object.keys(x);\n    const yKeys = Object.keys(y);\n    if (xKeys.length !== yKeys.length) {\n        return xKeys.length < yKeys.length ? -1 : 1;\n    }\n    xKeys.sort();\n    yKeys.sort();\n    for (let i = 0, j = 0; i < xKeys.length; i++) {\n        const key = xKeys[i];\n        if (key !== yKeys[i]) {\n            return key < yKeys[i] ? -1 : 1;\n        }\n        else {\n            j = compare(x[key], y[key]);\n            if (j !== 0) {\n                return j;\n            }\n        }\n    }\n    return 0;\n}\nexport function compare(x, y) {\n    if (x === y) {\n        return 0;\n    }\n    else if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    else if (y == null) {\n        return 1;\n    }\n    else if (typeof x !== \"object\") {\n        return x < y ? -1 : 1;\n    }\n    else if (isComparable(x)) {\n        return x.CompareTo(y);\n    }\n    else if (isArrayLike(x)) {\n        return isArrayLike(y) ? compareArrays(x, y) : -1;\n    }\n    else if (x instanceof Date) {\n        return y instanceof Date ? compareDates(x, y) : -1;\n    }\n    else {\n        return Object.getPrototypeOf(x).constructor === Object ? compareObjects(x, y) : -1;\n    }\n}\nexport function min(comparer, x, y) {\n    return comparer(x, y) < 0 ? x : y;\n}\nexport function max(comparer, x, y) {\n    return comparer(x, y) > 0 ? x : y;\n}\nexport function clamp(comparer, value, min, max) {\n    return (comparer(value, min) < 0) ? min : (comparer(value, max) > 0) ? max : value;\n}\nexport function createAtom(value) {\n    let atom = value;\n    return (value, isSetter) => {\n        if (!isSetter) {\n            return atom;\n        }\n        else {\n            atom = value;\n            return void 0;\n        }\n    };\n}\nexport function createObj(fields) {\n    const obj = {};\n    for (const kv of fields) {\n        obj[kv[0]] = kv[1];\n    }\n    return obj;\n}\nexport function jsOptions(mutator) {\n    const opts = {};\n    mutator(opts);\n    return opts;\n}\nexport function round(value, digits = 0) {\n    const m = Math.pow(10, digits);\n    const n = +(digits ? value * m : value).toFixed(8);\n    const i = Math.floor(n);\n    const f = n - i;\n    const e = 1e-8;\n    const r = (f > 0.5 - e && f < 0.5 + e) ? ((i % 2 === 0) ? i : i + 1) : Math.round(n);\n    return digits ? r / m : r;\n}\nexport function sign(x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n}\nexport function randomNext(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\nexport function randomBytes(buffer) {\n    if (buffer == null) {\n        throw new Error(\"Buffer cannot be null\");\n    }\n    for (let i = 0; i < buffer.length; i += 6) {\n        // Pick random 48-bit number. Fill buffer in 2 24-bit chunks to avoid bitwise truncation.\n        let r = Math.floor(Math.random() * 281474976710656); // Low 24 bits = chunk 1.\n        const rhi = Math.floor(r / 16777216); // High 24 bits shifted via division = chunk 2.\n        for (let j = 0; j < 6 && i + j < buffer.length; j++) {\n            if (j === 3) {\n                r = rhi;\n            }\n            buffer[i + j] = r & 255;\n            r >>>= 8;\n        }\n    }\n}\nexport function unescapeDataString(s) {\n    // https://stackoverflow.com/a/4458580/524236\n    return decodeURIComponent((s).replace(/\\+/g, \"%20\"));\n}\nexport function escapeDataString(s) {\n    return encodeURIComponent(s).replace(/!/g, \"%21\")\n        .replace(/'/g, \"%27\")\n        .replace(/\\(/g, \"%28\")\n        .replace(/\\)/g, \"%29\")\n        .replace(/\\*/g, \"%2A\");\n}\nexport function escapeUriString(s) {\n    return encodeURI(s);\n}\n// ICollection.Clear and Count members can be called on Arrays\n// or Dictionaries so we need a runtime check (see #1120)\nexport function count(col) {\n    if (isArrayLike(col)) {\n        return col.length;\n    }\n    else {\n        let count = 0;\n        for (const _ of col) {\n            count++;\n        }\n        return count;\n    }\n}\nexport function clear(col) {\n    if (isArrayLike(col)) {\n        col.splice(0);\n    }\n    else {\n        col.clear();\n    }\n}\nconst CURRIED_KEY = \"__CURRIED__\";\nexport function uncurry(arity, f) {\n    // f may be a function option with None value\n    if (f == null || f.length > 1) {\n        return f;\n    }\n    let uncurriedFn;\n    switch (arity) {\n        case 2:\n            uncurriedFn = (a1, a2) => f(a1)(a2);\n            break;\n        case 3:\n            uncurriedFn = (a1, a2, a3) => f(a1)(a2)(a3);\n            break;\n        case 4:\n            uncurriedFn = (a1, a2, a3, a4) => f(a1)(a2)(a3)(a4);\n            break;\n        case 5:\n            uncurriedFn = (a1, a2, a3, a4, a5) => f(a1)(a2)(a3)(a4)(a5);\n            break;\n        case 6:\n            uncurriedFn = (a1, a2, a3, a4, a5, a6) => f(a1)(a2)(a3)(a4)(a5)(a6);\n            break;\n        case 7:\n            uncurriedFn = (a1, a2, a3, a4, a5, a6, a7) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7);\n            break;\n        case 8:\n            uncurriedFn = (a1, a2, a3, a4, a5, a6, a7, a8) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7)(a8);\n            break;\n        default:\n            throw new Error(\"Uncurrying to more than 8-arity is not supported: \" + arity);\n    }\n    uncurriedFn[CURRIED_KEY] = f;\n    return uncurriedFn;\n}\nexport function curry(arity, f) {\n    if (f == null || f.length === 1) {\n        return f;\n    }\n    if (CURRIED_KEY in f) {\n        return f[CURRIED_KEY];\n    }\n    switch (arity) {\n        case 2:\n            return (a1) => (a2) => f(a1, a2);\n        case 3:\n            return (a1) => (a2) => (a3) => f(a1, a2, a3);\n        case 4:\n            return (a1) => (a2) => (a3) => (a4) => f(a1, a2, a3, a4);\n        case 5:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => f(a1, a2, a3, a4, a5);\n        case 6:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => f(a1, a2, a3, a4, a5, a6);\n        case 7:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => f(a1, a2, a3, a4, a5, a6, a7);\n        case 8:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => f(a1, a2, a3, a4, a5, a6, a7, a8);\n        default:\n            throw new Error(\"Currying to more than 8-arity is not supported: \" + arity);\n    }\n}\nexport function checkArity(arity, f) {\n    return f.length > arity\n        ? (...args1) => (...args2) => f.apply(undefined, args1.concat(args2))\n        : f;\n}\nexport function partialApply(arity, f, args) {\n    if (f == null) {\n        return undefined;\n    }\n    else if (CURRIED_KEY in f) {\n        f = f[CURRIED_KEY];\n        for (let i = 0; i < args.length; i++) {\n            f = f(args[i]);\n        }\n        return f;\n    }\n    else {\n        switch (arity) {\n            case 1:\n                // Wrap arguments to make sure .concat doesn't destruct arrays. Example\n                // [1,2].concat([3,4],5)   --> [1,2,3,4,5]    // fails\n                // [1,2].concat([[3,4],5]) --> [1,2,[3,4],5]  // ok\n                return (a1) => f.apply(undefined, args.concat([a1]));\n            case 2:\n                return (a1) => (a2) => f.apply(undefined, args.concat([a1, a2]));\n            case 3:\n                return (a1) => (a2) => (a3) => f.apply(undefined, args.concat([a1, a2, a3]));\n            case 4:\n                return (a1) => (a2) => (a3) => (a4) => f.apply(undefined, args.concat([a1, a2, a3, a4]));\n            case 5:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => f.apply(undefined, args.concat([a1, a2, a3, a4, a5]));\n            case 6:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => f.apply(undefined, args.concat([a1, a2, a3, a4, a5, a6]));\n            case 7:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => f.apply(undefined, args.concat([a1, a2, a3, a4, a5, a6, a7]));\n            case 8:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => f.apply(undefined, args.concat([a1, a2, a3, a4, a5, a6, a7, a8]));\n            default:\n                throw new Error(\"Partially applying to more than 8-arity is not supported: \" + arity);\n        }\n    }\n}\nexport function mapCurriedArgs(fn, mappings) {\n    function mapArg(fn, arg, mappings, idx) {\n        const mapping = mappings[idx];\n        if (mapping !== 0) {\n            const expectedArity = mapping[0];\n            const actualArity = mapping[1];\n            if (expectedArity > 1) {\n                arg = curry(expectedArity, arg);\n            }\n            if (actualArity > 1) {\n                arg = uncurry(actualArity, arg);\n            }\n        }\n        const res = fn(arg);\n        if (idx + 1 === mappings.length) {\n            return res;\n        }\n        else {\n            return (arg) => mapArg(res, arg, mappings, idx + 1);\n        }\n    }\n    return (arg) => mapArg(fn, arg, mappings, 0);\n}\n","import { combineHashCodes, compare, compareArrays, equalArrays, equals, sameConstructor, numberHash, structuralHash } from \"./Util.js\";\nexport function seqToString(self) {\n    let count = 0;\n    let str = \"[\";\n    for (const x of self) {\n        if (count === 0) {\n            str += toString(x);\n        }\n        else if (count === 100) {\n            str += \"; ...\";\n            break;\n        }\n        else {\n            str += \"; \" + toString(x);\n        }\n        count++;\n    }\n    return str + \"]\";\n}\nexport function toString(x, callStack = 0) {\n    if (x != null && typeof x === \"object\") {\n        if (typeof x.toString === \"function\") {\n            return x.toString();\n        }\n        else if (Symbol.iterator in x) {\n            return seqToString(x);\n        }\n        else { // TODO: Date?\n            const cons = Object.getPrototypeOf(x).constructor;\n            return cons === Object && callStack < 10\n                // Same format as recordToString\n                ? \"{ \" + Object.entries(x).map(([k, v]) => k + \" = \" + toString(v, callStack + 1)).join(\"\\n  \") + \" }\"\n                : cons.name;\n        }\n    }\n    return String(x);\n}\nfunction compareList(self, other) {\n    if (self === other) {\n        return 0;\n    }\n    else {\n        if (other == null) {\n            return -1;\n        }\n        while (self.tail != null) {\n            if (other.tail == null) {\n                return 1;\n            }\n            const res = compare(self.head, other.head);\n            if (res !== 0) {\n                return res;\n            }\n            self = self.tail;\n            other = other.tail;\n        }\n        return other.tail == null ? 0 : -1;\n    }\n}\nexport class List {\n    constructor(head, tail) {\n        this.head = head;\n        this.tail = tail;\n    }\n    [Symbol.iterator]() {\n        let cur = this;\n        return {\n            next: () => {\n                const value = cur === null || cur === void 0 ? void 0 : cur.head;\n                const done = (cur === null || cur === void 0 ? void 0 : cur.tail) == null;\n                cur = cur === null || cur === void 0 ? void 0 : cur.tail;\n                return { done, value };\n            },\n        };\n    }\n    toJSON() { return Array.from(this); }\n    toString() { return seqToString(this); }\n    GetHashCode() { return combineHashCodes(Array.from(this).map(structuralHash)); }\n    Equals(other) { return compareList(this, other) === 0; }\n    CompareTo(other) { return compareList(this, other); }\n}\nexport class Union {\n    get name() {\n        return this.cases()[this.tag];\n    }\n    toJSON() {\n        return this.fields.length === 0 ? this.name : [this.name].concat(this.fields);\n    }\n    toString() {\n        if (this.fields.length === 0) {\n            return this.name;\n        }\n        else {\n            let fields = \"\";\n            let withParens = true;\n            if (this.fields.length === 1) {\n                const field = toString(this.fields[0]);\n                withParens = field.indexOf(\" \") >= 0;\n                fields = field;\n            }\n            else {\n                fields = this.fields.map((x) => toString(x)).join(\", \");\n            }\n            return this.name + (withParens ? \" (\" : \" \") + fields + (withParens ? \")\" : \"\");\n        }\n    }\n    GetHashCode() {\n        const hashes = this.fields.map((x) => structuralHash(x));\n        hashes.splice(0, 0, numberHash(this.tag));\n        return combineHashCodes(hashes);\n    }\n    Equals(other) {\n        if (this === other) {\n            return true;\n        }\n        else if (!sameConstructor(this, other)) {\n            return false;\n        }\n        else if (this.tag === other.tag) {\n            return equalArrays(this.fields, other.fields);\n        }\n        else {\n            return false;\n        }\n    }\n    CompareTo(other) {\n        if (this === other) {\n            return 0;\n        }\n        else if (!sameConstructor(this, other)) {\n            return -1;\n        }\n        else if (this.tag === other.tag) {\n            return compareArrays(this.fields, other.fields);\n        }\n        else {\n            return this.tag < other.tag ? -1 : 1;\n        }\n    }\n}\nfunction recordToJSON(self) {\n    const o = {};\n    const keys = Object.keys(self);\n    for (let i = 0; i < keys.length; i++) {\n        o[keys[i]] = self[keys[i]];\n    }\n    return o;\n}\nfunction recordToString(self) {\n    return \"{ \" + Object.entries(self).map(([k, v]) => k + \" = \" + toString(v)).join(\"\\n  \") + \" }\";\n}\nfunction recordGetHashCode(self) {\n    const hashes = Object.values(self).map((v) => structuralHash(v));\n    return combineHashCodes(hashes);\n}\nfunction recordEquals(self, other) {\n    if (self === other) {\n        return true;\n    }\n    else if (!sameConstructor(self, other)) {\n        return false;\n    }\n    else {\n        const thisNames = Object.keys(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            if (!equals(self[thisNames[i]], other[thisNames[i]])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nfunction recordCompareTo(self, other) {\n    if (self === other) {\n        return 0;\n    }\n    else if (!sameConstructor(self, other)) {\n        return -1;\n    }\n    else {\n        const thisNames = Object.keys(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            const result = compare(self[thisNames[i]], other[thisNames[i]]);\n            if (result !== 0) {\n                return result;\n            }\n        }\n        return 0;\n    }\n}\nexport class Record {\n    toJSON() { return recordToJSON(this); }\n    toString() { return recordToString(this); }\n    GetHashCode() { return recordGetHashCode(this); }\n    Equals(other) { return recordEquals(this, other); }\n    CompareTo(other) { return recordCompareTo(this, other); }\n}\nexport class FSharpRef {\n    constructor(contentsOrGetter, setter) {\n        if (typeof setter === \"function\") {\n            this.getter = contentsOrGetter;\n            this.setter = setter;\n        }\n        else {\n            this.getter = () => contentsOrGetter;\n            this.setter = (v) => { contentsOrGetter = v; };\n        }\n    }\n    get contents() {\n        return this.getter();\n    }\n    set contents(v) {\n        this.setter(v);\n    }\n}\n// EXCEPTIONS\n// Exception is intentionally not derived from Error, for performance reasons (see #2160)\nexport class Exception {\n    constructor(message) {\n        this.message = message;\n    }\n}\nexport function isException(x) {\n    return x instanceof Exception || x instanceof Error;\n}\nexport class FSharpException extends Exception {\n    toJSON() { return recordToJSON(this); }\n    toString() { return recordToString(this); }\n    GetHashCode() { return recordGetHashCode(this); }\n    Equals(other) { return recordEquals(this, other); }\n    CompareTo(other) { return recordCompareTo(this, other); }\n}\nexport class MatchFailureException extends FSharpException {\n    constructor(arg1, arg2, arg3) {\n        super();\n        this.arg1 = arg1;\n        this.arg2 = arg2 | 0;\n        this.arg3 = arg3 | 0;\n        this.message = \"The match cases were incomplete\";\n    }\n}\nexport class Attribute {\n}\n","import { Record, Union } from \"./Types.js\";\nimport { combineHashCodes, equalArraysWith, stringHash } from \"./Util.js\";\nexport class CaseInfo {\n    constructor(declaringType, tag, name, fields) {\n        this.declaringType = declaringType;\n        this.tag = tag;\n        this.name = name;\n        this.fields = fields;\n    }\n}\nexport class TypeInfo {\n    constructor(fullname, generics, construct, parent, fields, cases, enumCases) {\n        this.fullname = fullname;\n        this.generics = generics;\n        this.construct = construct;\n        this.parent = parent;\n        this.fields = fields;\n        this.cases = cases;\n        this.enumCases = enumCases;\n    }\n    toString() {\n        return fullName(this);\n    }\n    GetHashCode() {\n        return getHashCode(this);\n    }\n    Equals(other) {\n        return equals(this, other);\n    }\n}\nexport function getGenerics(t) {\n    return t.generics != null ? t.generics : [];\n}\nexport function getHashCode(t) {\n    const fullnameHash = stringHash(t.fullname);\n    const genHashes = getGenerics(t).map(getHashCode);\n    return combineHashCodes([fullnameHash, ...genHashes]);\n}\nexport function equals(t1, t2) {\n    if (t1.fullname === \"\") { // Anonymous records\n        return t2.fullname === \"\"\n            && equalArraysWith(getRecordElements(t1), getRecordElements(t2), ([k1, v1], [k2, v2]) => k1 === k2 && equals(v1, v2));\n    }\n    else {\n        return t1.fullname === t2.fullname\n            && equalArraysWith(getGenerics(t1), getGenerics(t2), equals);\n    }\n}\nexport function class_type(fullname, generics, construct, parent) {\n    return new TypeInfo(fullname, generics, construct, parent);\n}\nexport function record_type(fullname, generics, construct, fields) {\n    return new TypeInfo(fullname, generics, construct, undefined, fields);\n}\nexport function anonRecord_type(...fields) {\n    return new TypeInfo(\"\", undefined, undefined, undefined, () => fields);\n}\nexport function union_type(fullname, generics, construct, cases) {\n    const t = new TypeInfo(fullname, generics, construct, undefined, undefined, () => {\n        const caseNames = construct.prototype.cases();\n        return cases().map((fields, i) => new CaseInfo(t, i, caseNames[i], fields));\n    });\n    return t;\n}\nexport function tuple_type(...generics) {\n    return new TypeInfo(\"System.Tuple`\" + generics.length, generics);\n}\nexport function delegate_type(...generics) {\n    return new TypeInfo(\"System.Func`\" + generics.length, generics);\n}\nexport function lambda_type(argType, returnType) {\n    return new TypeInfo(\"Microsoft.FSharp.Core.FSharpFunc`2\", [argType, returnType]);\n}\nexport function option_type(generic) {\n    return new TypeInfo(\"Microsoft.FSharp.Core.FSharpOption`1\", [generic]);\n}\nexport function list_type(generic) {\n    return new TypeInfo(\"Microsoft.FSharp.Collections.FSharpList`1\", [generic]);\n}\nexport function array_type(generic) {\n    return new TypeInfo(generic.fullname + \"[]\", [generic]);\n}\nexport function enum_type(fullname, underlyingType, enumCases) {\n    return new TypeInfo(fullname, [underlyingType], undefined, undefined, undefined, undefined, enumCases);\n}\nexport const obj_type = new TypeInfo(\"System.Object\");\nexport const unit_type = new TypeInfo(\"Microsoft.FSharp.Core.Unit\");\nexport const char_type = new TypeInfo(\"System.Char\");\nexport const string_type = new TypeInfo(\"System.String\");\nexport const bool_type = new TypeInfo(\"System.Boolean\");\nexport const int8_type = new TypeInfo(\"System.SByte\");\nexport const uint8_type = new TypeInfo(\"System.Byte\");\nexport const int16_type = new TypeInfo(\"System.Int16\");\nexport const uint16_type = new TypeInfo(\"System.UInt16\");\nexport const int32_type = new TypeInfo(\"System.Int32\");\nexport const uint32_type = new TypeInfo(\"System.UInt32\");\nexport const float32_type = new TypeInfo(\"System.Single\");\nexport const float64_type = new TypeInfo(\"System.Double\");\nexport const decimal_type = new TypeInfo(\"System.Decimal\");\nexport function name(info) {\n    if (Array.isArray(info)) {\n        return info[0];\n    }\n    else if (info instanceof CaseInfo) {\n        return info.name;\n    }\n    else {\n        const i = info.fullname.lastIndexOf(\".\");\n        return i === -1 ? info.fullname : info.fullname.substr(i + 1);\n    }\n}\nexport function fullName(t) {\n    const gen = t.generics != null && !isArray(t) ? t.generics : [];\n    if (gen.length > 0) {\n        return t.fullname + \"[\" + gen.map((x) => fullName(x)).join(\",\") + \"]\";\n    }\n    else {\n        return t.fullname;\n    }\n}\nexport function namespace(t) {\n    const i = t.fullname.lastIndexOf(\".\");\n    return i === -1 ? \"\" : t.fullname.substr(0, i);\n}\nexport function isArray(t) {\n    return t.fullname.endsWith(\"[]\");\n}\nexport function getElementType(t) {\n    var _a;\n    return isArray(t) ? (_a = t.generics) === null || _a === void 0 ? void 0 : _a[0] : undefined;\n}\nexport function isGenericType(t) {\n    return t.generics != null && t.generics.length > 0;\n}\nexport function isEnum(t) {\n    return t.enumCases != null && t.enumCases.length > 0;\n}\nexport function isSubclassOf(t1, t2) {\n    var _a, _b;\n    return (_b = (_a = t1.parent) === null || _a === void 0 ? void 0 : _a.Equals(t2)) !== null && _b !== void 0 ? _b : false;\n}\n/**\n * This doesn't replace types for fields (records) or cases (unions)\n * but it should be enough for type comparison purposes\n */\nexport function getGenericTypeDefinition(t) {\n    return t.generics == null ? t : new TypeInfo(t.fullname, t.generics.map(() => obj_type));\n}\nexport function getEnumUnderlyingType(t) {\n    var _a;\n    return (_a = t.generics) === null || _a === void 0 ? void 0 : _a[0];\n}\nexport function getEnumValues(t) {\n    if (isEnum(t) && t.enumCases != null) {\n        return t.enumCases.map((kv) => kv[1]);\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nexport function getEnumNames(t) {\n    if (isEnum(t) && t.enumCases != null) {\n        return t.enumCases.map((kv) => kv[0]);\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nfunction getEnumCase(t, v) {\n    if (t.enumCases != null) {\n        if (typeof v === \"string\") {\n            for (const kv of t.enumCases) {\n                if (kv[0] === v) {\n                    return kv;\n                }\n            }\n            throw new Error(`'${v}' was not found in ${t.fullname}`);\n        }\n        else {\n            for (const kv of t.enumCases) {\n                if (kv[1] === v) {\n                    return kv;\n                }\n            }\n            // .NET returns the number even if it doesn't match any of the cases\n            return [\"\", v];\n        }\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nexport function parseEnum(t, str) {\n    // TODO: better int parsing here, parseInt ceils floats: \"4.8\" -> 4\n    const value = parseInt(str, 10);\n    return getEnumCase(t, isNaN(value) ? str : value)[1];\n}\nexport function tryParseEnum(t, str, defValue) {\n    try {\n        defValue.contents = parseEnum(t, str);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function getEnumName(t, v) {\n    return getEnumCase(t, v)[0];\n}\nexport function isEnumDefined(t, v) {\n    try {\n        const kv = getEnumCase(t, v);\n        return kv[0] != null && kv[0] !== \"\";\n    }\n    catch (_a) {\n        // supress error\n    }\n    return false;\n}\n// FSharpType\nexport function getUnionCases(t) {\n    if (t.cases != null) {\n        return t.cases();\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# union type`);\n    }\n}\nexport function getRecordElements(t) {\n    if (t.fields != null) {\n        return t.fields();\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# record type`);\n    }\n}\nexport function getTupleElements(t) {\n    if (isTuple(t) && t.generics != null) {\n        return t.generics;\n    }\n    else {\n        throw new Error(`${t.fullname} is not a tuple type`);\n    }\n}\nexport function getFunctionElements(t) {\n    if (isFunction(t) && t.generics != null) {\n        const gen = t.generics;\n        return [gen[0], gen[1]];\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# function type`);\n    }\n}\nexport function isUnion(t) {\n    return t instanceof TypeInfo ? t.cases != null : t instanceof Union;\n}\nexport function isRecord(t) {\n    return t instanceof TypeInfo ? t.fields != null : t instanceof Record;\n}\nexport function isTuple(t) {\n    return t.fullname.startsWith(\"System.Tuple\") && !isArray(t);\n}\n// In .NET this is false for delegates\nexport function isFunction(t) {\n    return t.fullname === \"Microsoft.FSharp.Core.FSharpFunc`2\";\n}\n// FSharpValue\nexport function getUnionFields(v, t) {\n    const cases = getUnionCases(t);\n    const case_ = cases[v.tag];\n    if (case_ == null) {\n        throw new Error(`Cannot find case ${v.name} in union type`);\n    }\n    return [case_, v.fields];\n}\nexport function getUnionCaseFields(uci) {\n    return uci.fields == null ? [] : uci.fields;\n}\n// This is used as replacement of `FSharpValue.GetRecordFields`\n// For `FSharpTypes.GetRecordFields` see `getRecordElements`\n// Object.keys returns keys in the order they were added to the object\nexport function getRecordFields(v) {\n    return Object.keys(v).map((k) => v[k]);\n}\nexport function getRecordField(v, field) {\n    return v[field[0]];\n}\nexport function getTupleFields(v) {\n    return v;\n}\nexport function getTupleField(v, i) {\n    return v[i];\n}\nexport function makeUnion(uci, values) {\n    const expectedLength = (uci.fields || []).length;\n    if (values.length !== expectedLength) {\n        throw new Error(`Expected an array of length ${expectedLength} but got ${values.length}`);\n    }\n    return uci.declaringType.construct != null\n        ? new uci.declaringType.construct(uci.tag, ...values)\n        : {};\n}\nexport function makeRecord(t, values) {\n    const fields = getRecordElements(t);\n    if (fields.length !== values.length) {\n        throw new Error(`Expected an array of length ${fields.length} but got ${values.length}`);\n    }\n    return t.construct != null\n        ? new t.construct(...values)\n        : fields.reduce((obj, [key, _t], i) => {\n            obj[key] = values[i];\n            return obj;\n        }, {});\n}\nexport function makeTuple(values, _t) {\n    return values;\n}\nexport function makeGenericType(t, generics) {\n    return new TypeInfo(t.fullname, generics, t.construct, t.parent, t.fields, t.cases);\n}\nexport function createInstance(t, consArgs) {\n    // TODO: Check if consArgs length is same as t.construct?\n    // (Arg types can still be different)\n    if (typeof t.construct === \"function\") {\n        return new t.construct(...(consArgs !== null && consArgs !== void 0 ? consArgs : []));\n    }\n    else {\n        throw new Error(`Cannot access constructor of ${t.fullname}`);\n    }\n}\nexport function getValue(propertyInfo, v) {\n    return v[propertyInfo[0]];\n}\n// Fable.Core.Reflection\nfunction assertUnion(x) {\n    if (!(x instanceof Union)) {\n        throw new Error(`Value is not an F# union type`);\n    }\n}\nexport function getCaseTag(x) {\n    assertUnion(x);\n    return x.tag;\n}\nexport function getCaseName(x) {\n    assertUnion(x);\n    return x.cases()[x.tag];\n}\nexport function getCaseFields(x) {\n    assertUnion(x);\n    return x.fields;\n}\n","import { compare, equals, structuralHash } from \"./Util.js\";\n// Using a class here for better compatibility with TS files importing Some\nexport class Some {\n    constructor(value) {\n        this.value = value;\n    }\n    toJSON() {\n        return this.value;\n    }\n    // Don't add \"Some\" for consistency with erased options\n    toString() {\n        return String(this.value);\n    }\n    GetHashCode() {\n        return structuralHash(this.value);\n    }\n    Equals(other) {\n        if (other == null) {\n            return false;\n        }\n        else {\n            return equals(this.value, other instanceof Some ? other.value : other);\n        }\n    }\n    CompareTo(other) {\n        if (other == null) {\n            return 1;\n        }\n        else {\n            return compare(this.value, other instanceof Some ? other.value : other);\n        }\n    }\n}\nexport function some(x) {\n    return x == null || x instanceof Some ? new Some(x) : x;\n}\nexport function value(x) {\n    if (x == null) {\n        throw new Error(\"Option has no value\");\n    }\n    else {\n        return x instanceof Some ? x.value : x;\n    }\n}\nexport function ofNullable(x) {\n    // This will fail with unit probably, an alternative would be:\n    // return x === null ? undefined : (x === undefined ? new Some(x) : x);\n    return x == null ? undefined : x;\n}\nexport function toNullable(x) {\n    return x == null ? null : value(x);\n}\nexport function flatten(x) {\n    return x == null ? undefined : value(x);\n}\nexport function toArray(opt) {\n    return (opt == null) ? [] : [value(opt)];\n}\nexport function defaultArg(opt, defaultValue) {\n    return (opt != null) ? value(opt) : defaultValue;\n}\nexport function defaultArgWith(opt, defThunk) {\n    return (opt != null) ? value(opt) : defThunk();\n}\nexport function filter(predicate, opt) {\n    return (opt != null) ? (predicate(value(opt)) ? opt : undefined) : opt;\n}\nexport function map(mapping, opt) {\n    return (opt != null) ? some(mapping(value(opt))) : undefined;\n}\nexport function map2(mapping, opt1, opt2) {\n    return (opt1 != null && opt2 != null) ? mapping(value(opt1), value(opt2)) : undefined;\n}\nexport function map3(mapping, opt1, opt2, opt3) {\n    return (opt1 != null && opt2 != null && opt3 != null) ? mapping(value(opt1), value(opt2), value(opt3)) : undefined;\n}\nexport function bind(binder, opt) {\n    return opt != null ? binder(value(opt)) : undefined;\n}\nexport function tryOp(op, arg) {\n    try {\n        return some(op(arg));\n    }\n    catch (_a) {\n        return undefined;\n    }\n}\n","import { Union } from \"./Types.js\";\nimport { union_type } from \"./Reflection.js\";\nimport { some } from \"./Option.js\";\n\nexport class FSharpResult$2 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Ok\", \"Error\"];\n    }\n}\n\nexport function FSharpResult$2$reflection(gen0, gen1) {\n    return union_type(\"FSharp.Core.FSharpResult`2\", [gen0, gen1], FSharpResult$2, () => [[[\"ResultValue\", gen0]], [[\"ErrorValue\", gen1]]]);\n}\n\nexport function Result_Map(mapping, result) {\n    if (result.tag === 0) {\n        return new FSharpResult$2(0, mapping(result.fields[0]));\n    }\n    else {\n        return new FSharpResult$2(1, result.fields[0]);\n    }\n}\n\nexport function Result_MapError(mapping, result) {\n    if (result.tag === 0) {\n        return new FSharpResult$2(0, result.fields[0]);\n    }\n    else {\n        return new FSharpResult$2(1, mapping(result.fields[0]));\n    }\n}\n\nexport function Result_Bind(binder, result) {\n    if (result.tag === 0) {\n        return binder(result.fields[0]);\n    }\n    else {\n        return new FSharpResult$2(1, result.fields[0]);\n    }\n}\n\nexport class FSharpChoice$2 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of2\", \"Choice2Of2\"];\n    }\n}\n\nexport function FSharpChoice$2$reflection(gen0, gen1) {\n    return union_type(\"FSharp.Core.FSharpChoice`2\", [gen0, gen1], FSharpChoice$2, () => [[[\"Item\", gen0]], [[\"Item\", gen1]]]);\n}\n\nexport class FSharpChoice$3 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of3\", \"Choice2Of3\", \"Choice3Of3\"];\n    }\n}\n\nexport function FSharpChoice$3$reflection(gen0, gen1, gen2) {\n    return union_type(\"FSharp.Core.FSharpChoice`3\", [gen0, gen1, gen2], FSharpChoice$3, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]]]);\n}\n\nexport class FSharpChoice$4 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of4\", \"Choice2Of4\", \"Choice3Of4\", \"Choice4Of4\"];\n    }\n}\n\nexport function FSharpChoice$4$reflection(gen0, gen1, gen2, gen3) {\n    return union_type(\"FSharp.Core.FSharpChoice`4\", [gen0, gen1, gen2, gen3], FSharpChoice$4, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]]]);\n}\n\nexport class FSharpChoice$5 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of5\", \"Choice2Of5\", \"Choice3Of5\", \"Choice4Of5\", \"Choice5Of5\"];\n    }\n}\n\nexport function FSharpChoice$5$reflection(gen0, gen1, gen2, gen3, gen4) {\n    return union_type(\"FSharp.Core.FSharpChoice`5\", [gen0, gen1, gen2, gen3, gen4], FSharpChoice$5, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]], [[\"Item\", gen4]]]);\n}\n\nexport class FSharpChoice$6 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of6\", \"Choice2Of6\", \"Choice3Of6\", \"Choice4Of6\", \"Choice5Of6\", \"Choice6Of6\"];\n    }\n}\n\nexport function FSharpChoice$6$reflection(gen0, gen1, gen2, gen3, gen4, gen5) {\n    return union_type(\"FSharp.Core.FSharpChoice`6\", [gen0, gen1, gen2, gen3, gen4, gen5], FSharpChoice$6, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]], [[\"Item\", gen4]], [[\"Item\", gen5]]]);\n}\n\nexport class FSharpChoice$7 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of7\", \"Choice2Of7\", \"Choice3Of7\", \"Choice4Of7\", \"Choice5Of7\", \"Choice6Of7\", \"Choice7Of7\"];\n    }\n}\n\nexport function FSharpChoice$7$reflection(gen0, gen1, gen2, gen3, gen4, gen5, gen6) {\n    return union_type(\"FSharp.Core.FSharpChoice`7\", [gen0, gen1, gen2, gen3, gen4, gen5, gen6], FSharpChoice$7, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]], [[\"Item\", gen4]], [[\"Item\", gen5]], [[\"Item\", gen6]]]);\n}\n\nexport function Choice_makeChoice1Of2(x) {\n    return new FSharpChoice$2(0, x);\n}\n\nexport function Choice_makeChoice2Of2(x) {\n    return new FSharpChoice$2(1, x);\n}\n\nexport function Choice_tryValueIfChoice1Of2(x) {\n    if (x.tag === 0) {\n        return some(x.fields[0]);\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function Choice_tryValueIfChoice2Of2(x) {\n    if (x.tag === 1) {\n        return some(x.fields[0]);\n    }\n    else {\n        return void 0;\n    }\n}\n\n","\"use strict\";\r\n\r\nexport function Parsimmon(action) {\r\n  if (!(this instanceof Parsimmon)) {\r\n    return new Parsimmon(action);\r\n  }\r\n  this._ = action;\r\n}\r\n\r\nvar _ = Parsimmon.prototype;\r\n\r\nexport function times(n, f) {\r\n  var i = 0;\r\n  for (i; i < n; i++) {\r\n    f(i);\r\n  }\r\n}\r\n\r\nexport function forEach(f, arr) {\r\n  times(arr.length, function(i) {\r\n    f(arr[i], i, arr);\r\n  });\r\n}\r\n\r\nexport function reduce(f, seed, arr) {\r\n  forEach(function(elem, i, arr) {\r\n    seed = f(seed, elem, i, arr);\r\n  }, arr);\r\n  return seed;\r\n}\r\n\r\nexport function map(f, arr) {\r\n  return reduce(\r\n    function(acc, elem, i, a) {\r\n      return acc.concat([f(elem, i, a)]);\r\n    },\r\n    [],\r\n    arr\r\n  );\r\n}\r\n\r\nexport function lshiftBuffer(input) {\r\n  var asTwoBytes = reduce(\r\n    function(a, v, i, b) {\r\n      return a.concat(\r\n        i === b.length - 1\r\n          ? Buffer.from([v, 0]).readUInt16BE(0)\r\n          : b.readUInt16BE(i)\r\n      );\r\n    },\r\n    [],\r\n    input\r\n  );\r\n  return Buffer.from(\r\n    map(function(x) {\r\n      return ((x << 1) & 0xffff) >> 8;\r\n    }, asTwoBytes)\r\n  );\r\n}\r\n\r\nfunction consumeBitsFromBuffer(n, input) {\r\n  var state = { v: 0, buf: input };\r\n  times(n, function() {\r\n    state = {\r\n      v: (state.v << 1) | bitPeekBuffer(state.buf),\r\n      buf: lshiftBuffer(state.buf)\r\n    };\r\n  });\r\n  return state;\r\n}\r\n\r\nfunction bitPeekBuffer(input) {\r\n  return input[0] >> 7;\r\n}\r\n\r\nexport function sum(numArr) {\r\n  return reduce(\r\n    function(x, y) {\r\n      return x + y;\r\n    },\r\n    0,\r\n    numArr\r\n  );\r\n}\r\n\r\nexport function find(pred, arr) {\r\n  return reduce(\r\n    function(found, elem) {\r\n      return found || (pred(elem) ? elem : found);\r\n    },\r\n    null,\r\n    arr\r\n  );\r\n}\r\n\r\nfunction bufferExists() {\r\n  return typeof Buffer !== \"undefined\";\r\n}\r\n\r\nfunction ensureBuffer() {\r\n  if (!bufferExists()) {\r\n    throw new Error(\r\n      \"Buffer global does not exist; please consider using https://github.com/feross/buffer if you are running Parsimmon in a browser.\"\r\n    );\r\n  }\r\n}\r\n\r\nfunction bitSeq(alignments) {\r\n  ensureBuffer();\r\n  var totalBits = sum(alignments);\r\n  if (totalBits % 8 !== 0) {\r\n    throw new Error(\r\n      \"The bits [\" +\r\n        alignments.join(\", \") +\r\n        \"] add up to \" +\r\n        totalBits +\r\n        \" which is not an even number of bytes; the total should be divisible by 8\"\r\n    );\r\n  }\r\n  var bytes = totalBits / 8;\r\n\r\n  var tooBigRange = find(function(x) {\r\n    return x > 48;\r\n  }, alignments);\r\n  if (tooBigRange) {\r\n    throw new Error(\r\n      tooBigRange + \" bit range requested exceeds 48 bit (6 byte) Number max.\"\r\n    );\r\n  }\r\n\r\n  return new Parsimmon(function(input, i) {\r\n    var newPos = bytes + i;\r\n    if (newPos > input.length) {\r\n      return makeFailure(i, bytes.toString() + \" bytes\");\r\n    }\r\n    return makeSuccess(\r\n      newPos,\r\n      reduce(\r\n        function(acc, bits) {\r\n          var state = consumeBitsFromBuffer(bits, acc.buf);\r\n          return {\r\n            coll: acc.coll.concat(state.v),\r\n            buf: state.buf\r\n          };\r\n        },\r\n        { coll: [], buf: input.slice(i, newPos) },\r\n        alignments\r\n      ).coll\r\n    );\r\n  });\r\n}\r\n\r\nfunction bitSeqObj(namedAlignments) {\r\n  ensureBuffer();\r\n  var seenKeys = {};\r\n  var totalKeys = 0;\r\n  var fullAlignments = map(function(item) {\r\n    if (isArray(item)) {\r\n      var pair = item;\r\n      if (pair.length !== 2) {\r\n        throw new Error(\r\n          \"[\" +\r\n            pair.join(\", \") +\r\n            \"] should be length 2, got length \" +\r\n            pair.length\r\n        );\r\n      }\r\n      assertString(pair[0]);\r\n      assertNumber(pair[1]);\r\n      if (Object.prototype.hasOwnProperty.call(seenKeys, pair[0])) {\r\n        throw new Error(\"duplicate key in bitSeqObj: \" + pair[0]);\r\n      }\r\n      seenKeys[pair[0]] = true;\r\n      totalKeys++;\r\n      return pair;\r\n    } else {\r\n      assertNumber(item);\r\n      return [null, item];\r\n    }\r\n  }, namedAlignments);\r\n  if (totalKeys < 1) {\r\n    throw new Error(\r\n      \"bitSeqObj expects at least one named pair, got [\" +\r\n        namedAlignments.join(\", \") +\r\n        \"]\"\r\n    );\r\n  }\r\n  var namesOnly = map(function(pair) {\r\n    return pair[0];\r\n  }, fullAlignments);\r\n  var alignmentsOnly = map(function(pair) {\r\n    return pair[1];\r\n  }, fullAlignments);\r\n\r\n  return bitSeq(alignmentsOnly).map(function(parsed) {\r\n    var namedParsed = map(function(name, i) {\r\n      return [name, parsed[i]];\r\n    }, namesOnly);\r\n\r\n    return reduce(\r\n      function(obj, kv) {\r\n        if (kv[0] !== null) {\r\n          obj[kv[0]] = kv[1];\r\n        }\r\n        return obj;\r\n      },\r\n      {},\r\n      namedParsed\r\n    );\r\n  });\r\n}\r\n\r\nfunction parseBufferFor(other, length) {\r\n  ensureBuffer();\r\n  return new Parsimmon(function(input, i) {\r\n    if (i + length > input.length) {\r\n      return makeFailure(i, length + \" bytes for \" + other);\r\n    }\r\n    return makeSuccess(i + length, input.slice(i, i + length));\r\n  });\r\n}\r\n\r\nfunction parseBuffer(length) {\r\n  return parseBufferFor(\"buffer\", length).map(function(unsafe) {\r\n    return Buffer.from(unsafe);\r\n  });\r\n}\r\n\r\nfunction encodedString(encoding, length) {\r\n  return parseBufferFor(\"string\", length).map(function(buff) {\r\n    return buff.toString(encoding);\r\n  });\r\n}\r\n\r\nfunction isInteger(value) {\r\n  return typeof value === \"number\" && Math.floor(value) === value;\r\n}\r\n\r\nfunction assertValidIntegerByteLengthFor(who, length) {\r\n  if (!isInteger(length) || length < 0 || length > 6) {\r\n    throw new Error(who + \" requires integer length in range [0, 6].\");\r\n  }\r\n}\r\n\r\nfunction uintBE(length) {\r\n  assertValidIntegerByteLengthFor(\"uintBE\", length);\r\n  return parseBufferFor(\"uintBE(\" + length + \")\", length).map(function(buff) {\r\n    return buff.readUIntBE(0, length);\r\n  });\r\n}\r\n\r\nfunction uintLE(length) {\r\n  assertValidIntegerByteLengthFor(\"uintLE\", length);\r\n  return parseBufferFor(\"uintLE(\" + length + \")\", length).map(function(buff) {\r\n    return buff.readUIntLE(0, length);\r\n  });\r\n}\r\n\r\nfunction intBE(length) {\r\n  assertValidIntegerByteLengthFor(\"intBE\", length);\r\n  return parseBufferFor(\"intBE(\" + length + \")\", length).map(function(buff) {\r\n    return buff.readIntBE(0, length);\r\n  });\r\n}\r\n\r\nfunction intLE(length) {\r\n  assertValidIntegerByteLengthFor(\"intLE\", length);\r\n  return parseBufferFor(\"intLE(\" + length + \")\", length).map(function(buff) {\r\n    return buff.readIntLE(0, length);\r\n  });\r\n}\r\n\r\nfunction floatBE() {\r\n  return parseBufferFor(\"floatBE\", 4).map(function(buff) {\r\n    return buff.readFloatBE(0);\r\n  });\r\n}\r\n\r\nfunction floatLE() {\r\n  return parseBufferFor(\"floatLE\", 4).map(function(buff) {\r\n    return buff.readFloatLE(0);\r\n  });\r\n}\r\n\r\nfunction doubleBE() {\r\n  return parseBufferFor(\"doubleBE\", 8).map(function(buff) {\r\n    return buff.readDoubleBE(0);\r\n  });\r\n}\r\n\r\nfunction doubleLE() {\r\n  return parseBufferFor(\"doubleLE\", 8).map(function(buff) {\r\n    return buff.readDoubleLE(0);\r\n  });\r\n}\r\n\r\nfunction toArray(arrLike) {\r\n  return Array.prototype.slice.call(arrLike);\r\n}\r\n// -*- Helpers -*-\r\n\r\nfunction isParser(obj) {\r\n  return obj instanceof Parsimmon;\r\n}\r\n\r\nfunction isArray(x) {\r\n  return {}.toString.call(x) === \"[object Array]\";\r\n}\r\n\r\nfunction isBuffer(x) {\r\n  /* global Buffer */\r\n  return bufferExists() && Buffer.isBuffer(x);\r\n}\r\n\r\nexport function makeSuccess(index, value) {\r\n  return {\r\n    status: true,\r\n    index: index,\r\n    value: value,\r\n    furthest: -1,\r\n    expected: []\r\n  };\r\n}\r\n\r\nexport function makeFailure(index, expected) {\r\n  if (!isArray(expected)) {\r\n    expected = [expected];\r\n  }\r\n  return {\r\n    status: false,\r\n    index: -1,\r\n    value: null,\r\n    furthest: index,\r\n    expected: expected\r\n  };\r\n}\r\n\r\nfunction mergeReplies(result, last) {\r\n  if (!last) {\r\n    return result;\r\n  }\r\n  if (result.furthest > last.furthest) {\r\n    return result;\r\n  }\r\n  var expected =\r\n    result.furthest === last.furthest\r\n      ? union(result.expected, last.expected)\r\n      : last.expected;\r\n  return {\r\n    status: result.status,\r\n    index: result.index,\r\n    value: result.value,\r\n    furthest: last.furthest,\r\n    expected: expected\r\n  };\r\n}\r\n\r\nfunction makeLineColumnIndex(input, i) {\r\n  if (isBuffer(input)) {\r\n    return {\r\n      offset: i,\r\n      line: -1,\r\n      column: -1\r\n    };\r\n  }\r\n  var lines = input.slice(0, i).split(\"\\n\");\r\n  // Note that unlike the character offset, the line and column offsets are\r\n  // 1-based.\r\n  var lineWeAreUpTo = lines.length;\r\n  var columnWeAreUpTo = lines[lines.length - 1].length + 1;\r\n  return {\r\n    offset: i,\r\n    line: lineWeAreUpTo,\r\n    column: columnWeAreUpTo\r\n  };\r\n}\r\n\r\n// Returns the sorted set union of two arrays of strings\r\nfunction union(xs, ys) {\r\n  var obj = {};\r\n  for (var i = 0; i < xs.length; i++) {\r\n    obj[xs[i]] = true;\r\n  }\r\n  for (var j = 0; j < ys.length; j++) {\r\n    obj[ys[j]] = true;\r\n  }\r\n  var keys = [];\r\n  for (var k in obj) {\r\n    if ({}.hasOwnProperty.call(obj, k)) {\r\n      keys.push(k);\r\n    }\r\n  }\r\n  keys.sort();\r\n  return keys;\r\n}\r\n\r\nfunction assertParser(p) {\r\n  if (!isParser(p)) {\r\n    throw new Error(\"not a parser: \" + p);\r\n  }\r\n}\r\n\r\nfunction get(input, i) {\r\n  if (typeof input === \"string\") {\r\n    return input.charAt(i);\r\n  }\r\n  return input[i];\r\n}\r\n\r\n// TODO[ES5]: Switch to Array.isArray eventually.\r\nfunction assertArray(x) {\r\n  if (!isArray(x)) {\r\n    throw new Error(\"not an array: \" + x);\r\n  }\r\n}\r\n\r\nfunction assertNumber(x) {\r\n  if (typeof x !== \"number\") {\r\n    throw new Error(\"not a number: \" + x);\r\n  }\r\n}\r\n\r\nfunction assertRegexp(x) {\r\n  if (!(x instanceof RegExp)) {\r\n    throw new Error(\"not a regexp: \" + x);\r\n  }\r\n  var f = flags(x);\r\n  for (var i = 0; i < f.length; i++) {\r\n    var c = f.charAt(i);\r\n    // Only allow regexp flags [imu] for now, since [g] and [y] specifically\r\n    // mess up Parsimmon. If more non-stateful regexp flags are added in the\r\n    // future, this will need to be revisited.\r\n    if (c !== \"i\" && c !== \"m\" && c !== \"u\") {\r\n      throw new Error('unsupported regexp flag \"' + c + '\": ' + x);\r\n    }\r\n  }\r\n}\r\n\r\nfunction assertFunction(x) {\r\n  if (typeof x !== \"function\") {\r\n    throw new Error(\"not a function: \" + x);\r\n  }\r\n}\r\n\r\nfunction assertString(x) {\r\n  if (typeof x !== \"string\") {\r\n    throw new Error(\"not a string: \" + x);\r\n  }\r\n}\r\n\r\n// -*- Error Formatting -*-\r\n\r\nvar linesBeforeStringError = 2;\r\nvar linesAfterStringError = 3;\r\nvar bytesPerLine = 8;\r\nvar bytesBefore = bytesPerLine * 5;\r\nvar bytesAfter = bytesPerLine * 4;\r\nvar defaultLinePrefix = \"  \";\r\n\r\nexport function repeat(string, amount) {\r\n  return new Array(amount + 1).join(string);\r\n}\r\n\r\nexport function formatExpected(expected) {\r\n  if (expected.length === 1) {\r\n    return \"Expected:\\n\\n\" + expected[0];\r\n  }\r\n  return \"Expected one of the following: \\n\\n\" + expected.join(\", \");\r\n}\r\n\r\nexport function leftPad(str, pad, char) {\r\n  var add = pad - str.length;\r\n  if (add <= 0) {\r\n    return str;\r\n  }\r\n  return repeat(char, add) + str;\r\n}\r\n\r\nfunction toChunks(arr, chunkSize) {\r\n  var length = arr.length;\r\n  var chunks = [];\r\n  var chunkIndex = 0;\r\n\r\n  if (length <= chunkSize) {\r\n    return [arr.slice()];\r\n  }\r\n\r\n  for (var i = 0; i < length; i++) {\r\n    if (!chunks[chunkIndex]) {\r\n      chunks.push([]);\r\n    }\r\n\r\n    chunks[chunkIndex].push(arr[i]);\r\n\r\n    if ((i + 1) % chunkSize === 0) {\r\n      chunkIndex++;\r\n    }\r\n  }\r\n\r\n  return chunks;\r\n}\r\n\r\n// Get a range of indexes including `i`-th element and `before` and `after` amount of elements from `arr`.\r\nexport function rangeFromIndexAndOffsets(i, before, after, length) {\r\n  return {\r\n    // Guard against the negative upper bound for lines included in the output.\r\n    from: i - before > 0 ? i - before : 0,\r\n    to: i + after > length ? length : i + after\r\n  };\r\n}\r\n\r\nexport function byteRangeToRange(byteRange) {\r\n  // Exception for inputs smaller than `bytesPerLine`\r\n  if (byteRange.from === 0 && byteRange.to === 1) {\r\n    return {\r\n      from: byteRange.from,\r\n      to: byteRange.to\r\n    };\r\n  }\r\n\r\n  return {\r\n    from: byteRange.from / bytesPerLine,\r\n    // Round `to`, so we don't get float if the amount of bytes is not divisible by `bytesPerLine`\r\n    to: Math.floor(byteRange.to / bytesPerLine)\r\n  };\r\n}\r\n\r\nexport function formatGot(input, error) {\r\n  var index = error.index;\r\n  var i = index.offset;\r\n\r\n  var verticalMarkerLength = 1;\r\n  var column;\r\n  var lineWithErrorIndex;\r\n  var lines;\r\n  var lineRange;\r\n  var lastLineNumberLabelLength;\r\n\r\n  if (i === input.length) {\r\n    return \"Got the end of the input\";\r\n  }\r\n\r\n  if (isBuffer(input)) {\r\n    var byteLineWithErrorIndex = i - (i % bytesPerLine);\r\n    var columnByteIndex = i - byteLineWithErrorIndex;\r\n    var byteRange = rangeFromIndexAndOffsets(\r\n      byteLineWithErrorIndex,\r\n      bytesBefore,\r\n      bytesAfter + bytesPerLine,\r\n      input.length\r\n    );\r\n    var bytes = input.slice(byteRange.from, byteRange.to);\r\n    var bytesInChunks = toChunks(bytes.toJSON().data, bytesPerLine);\r\n\r\n    var byteLines = map(function(byteRow) {\r\n      return map(function(byteValue) {\r\n        // Prefix byte values with a `0` if they are shorter than 2 characters.\r\n        return leftPad(byteValue.toString(16), 2, \"0\");\r\n      }, byteRow);\r\n    }, bytesInChunks);\r\n\r\n    lineRange = byteRangeToRange(byteRange);\r\n    lineWithErrorIndex = byteLineWithErrorIndex / bytesPerLine;\r\n    column = columnByteIndex * 3;\r\n\r\n    // Account for an extra space.\r\n    if (columnByteIndex >= 4) {\r\n      column += 1;\r\n    }\r\n\r\n    verticalMarkerLength = 2;\r\n    lines = map(function(byteLine) {\r\n      return byteLine.length <= 4\r\n        ? byteLine.join(\" \")\r\n        : byteLine.slice(0, 4).join(\" \") + \"  \" + byteLine.slice(4).join(\" \");\r\n    }, byteLines);\r\n    lastLineNumberLabelLength = (\r\n      (lineRange.to > 0 ? lineRange.to - 1 : lineRange.to) * 8\r\n    ).toString(16).length;\r\n\r\n    if (lastLineNumberLabelLength < 2) {\r\n      lastLineNumberLabelLength = 2;\r\n    }\r\n  } else {\r\n    var inputLines = input.split(/\\r\\n|[\\n\\r\\u2028\\u2029]/);\r\n    column = index.column - 1;\r\n    lineWithErrorIndex = index.line - 1;\r\n    lineRange = rangeFromIndexAndOffsets(\r\n      lineWithErrorIndex,\r\n      linesBeforeStringError,\r\n      linesAfterStringError,\r\n      inputLines.length\r\n    );\r\n\r\n    lines = inputLines.slice(lineRange.from, lineRange.to);\r\n    lastLineNumberLabelLength = lineRange.to.toString().length;\r\n  }\r\n\r\n  var lineWithErrorCurrentIndex = lineWithErrorIndex - lineRange.from;\r\n\r\n  if (isBuffer(input)) {\r\n    lastLineNumberLabelLength = (\r\n      (lineRange.to > 0 ? lineRange.to - 1 : lineRange.to) * 8\r\n    ).toString(16).length;\r\n\r\n    if (lastLineNumberLabelLength < 2) {\r\n      lastLineNumberLabelLength = 2;\r\n    }\r\n  }\r\n\r\n  var linesWithLineNumbers = reduce(\r\n    function(acc, lineSource, index) {\r\n      var isLineWithError = index === lineWithErrorCurrentIndex;\r\n      var prefix = isLineWithError ? \"> \" : defaultLinePrefix;\r\n      var lineNumberLabel;\r\n\r\n      if (isBuffer(input)) {\r\n        lineNumberLabel = leftPad(\r\n          ((lineRange.from + index) * 8).toString(16),\r\n          lastLineNumberLabelLength,\r\n          \"0\"\r\n        );\r\n      } else {\r\n        lineNumberLabel = leftPad(\r\n          (lineRange.from + index + 1).toString(),\r\n          lastLineNumberLabelLength,\r\n          \" \"\r\n        );\r\n      }\r\n\r\n      return [].concat(\r\n        acc,\r\n        [prefix + lineNumberLabel + \" | \" + lineSource],\r\n        isLineWithError\r\n          ? [\r\n              defaultLinePrefix +\r\n                repeat(\" \", lastLineNumberLabelLength) +\r\n                \" | \" +\r\n                leftPad(\"\", column, \" \") +\r\n                repeat(\"^\", verticalMarkerLength)\r\n            ]\r\n          : []\r\n      );\r\n    },\r\n    [],\r\n    lines\r\n  );\r\n\r\n  return linesWithLineNumbers.join(\"\\n\");\r\n}\r\n\r\nexport function formatError(input, error) {\r\n  return [\r\n    \"\\n\",\r\n    \"-- PARSING FAILED \" + repeat(\"-\", 50),\r\n    \"\\n\\n\",\r\n    formatGot(input, error),\r\n    \"\\n\\n\",\r\n    formatExpected(error.expected),\r\n    \"\\n\"\r\n  ].join(\"\");\r\n}\r\n\r\nexport function flags(re) {\r\n  var s = \"\" + re;\r\n  return s.slice(s.lastIndexOf(\"/\") + 1);\r\n}\r\n\r\nexport function anchoredRegexp(re) {\r\n  return RegExp(\"^(?:\" + re.source + \")\", flags(re));\r\n}\r\n\r\n// -*- Combinators -*-\r\n\r\nexport function seq() {\r\n  var parsers = [].slice.call(arguments);\r\n  var numParsers = parsers.length;\r\n  for (var j = 0; j < numParsers; j += 1) {\r\n    assertParser(parsers[j]);\r\n  }\r\n  return Parsimmon(function(input, i) {\r\n    var result;\r\n    var accum = new Array(numParsers);\r\n    for (var j = 0; j < numParsers; j += 1) {\r\n      result = mergeReplies(parsers[j]._(input, i), result);\r\n      if (!result.status) {\r\n        return result;\r\n      }\r\n      accum[j] = result.value;\r\n      i = result.index;\r\n    }\r\n    return mergeReplies(makeSuccess(i, accum), result);\r\n  });\r\n}\r\n\r\nexport function seqObj() {\r\n  var seenKeys = {};\r\n  var totalKeys = 0;\r\n  var parsers = toArray(arguments);\r\n  var numParsers = parsers.length;\r\n  for (var j = 0; j < numParsers; j += 1) {\r\n    var p = parsers[j];\r\n    if (isParser(p)) {\r\n      continue;\r\n    }\r\n    if (isArray(p)) {\r\n      var isWellFormed =\r\n        p.length === 2 && typeof p[0] === \"string\" && isParser(p[1]);\r\n      if (isWellFormed) {\r\n        var key = p[0];\r\n        if (Object.prototype.hasOwnProperty.call(seenKeys, key)) {\r\n          throw new Error(\"seqObj: duplicate key \" + key);\r\n        }\r\n        seenKeys[key] = true;\r\n        totalKeys++;\r\n        continue;\r\n      }\r\n    }\r\n    throw new Error(\r\n      \"seqObj arguments must be parsers or [string, parser] array pairs.\"\r\n    );\r\n  }\r\n  if (totalKeys === 0) {\r\n    throw new Error(\"seqObj expects at least one named parser, found zero\");\r\n  }\r\n  return Parsimmon(function(input, i) {\r\n    var result;\r\n    var accum = {};\r\n    for (var j = 0; j < numParsers; j += 1) {\r\n      var name;\r\n      var parser;\r\n      if (isArray(parsers[j])) {\r\n        name = parsers[j][0];\r\n        parser = parsers[j][1];\r\n      } else {\r\n        name = null;\r\n        parser = parsers[j];\r\n      }\r\n      result = mergeReplies(parser._(input, i), result);\r\n      if (!result.status) {\r\n        return result;\r\n      }\r\n      if (name) {\r\n        accum[name] = result.value;\r\n      }\r\n      i = result.index;\r\n    }\r\n    return mergeReplies(makeSuccess(i, accum), result);\r\n  });\r\n}\r\n\r\nexport function seqMap() {\r\n  var args = [].slice.call(arguments);\r\n  if (args.length === 0) {\r\n    throw new Error(\"seqMap needs at least one argument\");\r\n  }\r\n  var mapper = args.pop();\r\n  assertFunction(mapper);\r\n  return seq.apply(null, args).map(function(results) {\r\n    return mapper.apply(null, results);\r\n  });\r\n}\r\n\r\n// TODO[ES5]: Revisit this with Object.keys and .bind.\r\nexport function createLanguage(parsers) {\r\n  var language = {};\r\n  for (var key in parsers) {\r\n    if ({}.hasOwnProperty.call(parsers, key)) {\r\n      (function(key) {\r\n        var func = function() {\r\n          return parsers[key](language);\r\n        };\r\n        language[key] = lazy(func);\r\n      })(key);\r\n    }\r\n  }\r\n  return language;\r\n}\r\n\r\nexport function alt() {\r\n  var parsers = [].slice.call(arguments);\r\n  var numParsers = parsers.length;\r\n  if (numParsers === 0) {\r\n    return fail(\"zero alternates\");\r\n  }\r\n  for (var j = 0; j < numParsers; j += 1) {\r\n    assertParser(parsers[j]);\r\n  }\r\n  return Parsimmon(function(input, i) {\r\n    var result;\r\n    for (var j = 0; j < parsers.length; j += 1) {\r\n      result = mergeReplies(parsers[j]._(input, i), result);\r\n      if (result.status) {\r\n        return result;\r\n      }\r\n    }\r\n    return result;\r\n  });\r\n}\r\n\r\nexport function sepBy(parser, separator) {\r\n  // Argument asserted by sepBy1\r\n  return sepBy1(parser, separator).or(succeed([]));\r\n}\r\n\r\nexport function sepBy1(parser, separator) {\r\n  assertParser(parser);\r\n  assertParser(separator);\r\n  var pairs = separator.then(parser).many();\r\n  return seqMap(parser, pairs, function(r, rs) {\r\n    return [r].concat(rs);\r\n  });\r\n}\r\n\r\n// -*- Core Parsing Methods -*-\r\n\r\n_.parse = function(input) {\r\n  if (typeof input !== \"string\" && !isBuffer(input)) {\r\n    throw new Error(\r\n      \".parse must be called with a string or Buffer as its argument\"\r\n    );\r\n  }\r\n  var result = this.skip(eof)._(input, 0);\r\n  if (result.status) {\r\n    return {\r\n      status: true,\r\n      value: result.value\r\n    };\r\n  }\r\n  return {\r\n    status: false,\r\n    index: makeLineColumnIndex(input, result.furthest),\r\n    expected: result.expected\r\n  };\r\n};\r\n\r\n// -*- Other Methods -*-\r\n\r\n_.tryParse = function(str) {\r\n  var result = this.parse(str);\r\n  if (result.status) {\r\n    return result.value;\r\n  } else {\r\n    var msg = formatError(str, result);\r\n    var err = new Error(msg);\r\n    err.type = \"ParsimmonError\";\r\n    err.result = result;\r\n    throw err;\r\n  }\r\n};\r\n\r\n_.or = function(alternative) {\r\n  return alt(this, alternative);\r\n};\r\n\r\n_.trim = function(parser) {\r\n  return this.wrap(parser, parser);\r\n};\r\n\r\n_.wrap = function(leftParser, rightParser) {\r\n  return seqMap(leftParser, this, rightParser, function(left, middle) {\r\n    return middle;\r\n  });\r\n};\r\n\r\n_.thru = function(wrapper) {\r\n  return wrapper(this);\r\n};\r\n\r\n_.then = function(next) {\r\n  assertParser(next);\r\n  return seq(this, next).map(function(results) {\r\n    return results[1];\r\n  });\r\n};\r\n\r\n_.many = function() {\r\n  var self = this;\r\n\r\n  return Parsimmon(function(input, i) {\r\n    var accum = [];\r\n    var result = undefined;\r\n\r\n    for (;;) {\r\n      result = mergeReplies(self._(input, i), result);\r\n      if (result.status) {\r\n        if (i === result.index) {\r\n          throw new Error(\r\n            \"infinite loop detected in .many() parser --- calling .many() on \" +\r\n              \"a parser which can accept zero characters is usually the cause\"\r\n          );\r\n        }\r\n        i = result.index;\r\n        accum.push(result.value);\r\n      } else {\r\n        return mergeReplies(makeSuccess(i, accum), result);\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\n_.tieWith = function(separator) {\r\n  assertString(separator);\r\n  return this.map(function(args) {\r\n    assertArray(args);\r\n    if (args.length) {\r\n      assertString(args[0]);\r\n      var s = args[0];\r\n      for (var i = 1; i < args.length; i++) {\r\n        assertString(args[i]);\r\n        s += separator + args[i];\r\n      }\r\n      return s;\r\n    } else {\r\n      return \"\";\r\n    }\r\n  });\r\n};\r\n\r\n_.tie = function() {\r\n  return this.tieWith(\"\");\r\n};\r\n\r\n_.times = function(min, max) {\r\n  var self = this;\r\n  if (arguments.length < 2) {\r\n    max = min;\r\n  }\r\n  assertNumber(min);\r\n  assertNumber(max);\r\n  return Parsimmon(function(input, i) {\r\n    var accum = [];\r\n    var result = undefined;\r\n    var prevResult = undefined;\r\n    for (var times = 0; times < min; times += 1) {\r\n      result = self._(input, i);\r\n      prevResult = mergeReplies(result, prevResult);\r\n      if (result.status) {\r\n        i = result.index;\r\n        accum.push(result.value);\r\n      } else {\r\n        return prevResult;\r\n      }\r\n    }\r\n    for (; times < max; times += 1) {\r\n      result = self._(input, i);\r\n      prevResult = mergeReplies(result, prevResult);\r\n      if (result.status) {\r\n        i = result.index;\r\n        accum.push(result.value);\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    return mergeReplies(makeSuccess(i, accum), prevResult);\r\n  });\r\n};\r\n\r\n_.result = function(res) {\r\n  return this.map(function() {\r\n    return res;\r\n  });\r\n};\r\n\r\n_.atMost = function(n) {\r\n  return this.times(0, n);\r\n};\r\n\r\n_.atLeast = function(n) {\r\n  return seqMap(this.times(n), this.many(), function(init, rest) {\r\n    return init.concat(rest);\r\n  });\r\n};\r\n\r\n_.map = function(fn) {\r\n  assertFunction(fn);\r\n  var self = this;\r\n  return Parsimmon(function(input, i) {\r\n    var result = self._(input, i);\r\n    if (!result.status) {\r\n      return result;\r\n    }\r\n    return mergeReplies(makeSuccess(result.index, fn(result.value)), result);\r\n  });\r\n};\r\n\r\n_.contramap = function(fn) {\r\n  assertFunction(fn);\r\n  var self = this;\r\n  return Parsimmon(function(input, i) {\r\n    var result = self.parse(fn(input.slice(i)));\r\n    if (!result.status) {\r\n      return result;\r\n    }\r\n    return makeSuccess(i + input.length, result.value);\r\n  });\r\n};\r\n\r\n_.promap = function(f, g) {\r\n  assertFunction(f);\r\n  assertFunction(g);\r\n  return this.contramap(f).map(g);\r\n};\r\n\r\n_.skip = function(next) {\r\n  return seq(this, next).map(function(results) {\r\n    return results[0];\r\n  });\r\n};\r\n\r\n_.mark = function() {\r\n  return seqMap(index, this, index, function(start, value, end) {\r\n    return {\r\n      start: start,\r\n      value: value,\r\n      end: end\r\n    };\r\n  });\r\n};\r\n\r\n_.node = function(name) {\r\n  return seqMap(index, this, index, function(start, value, end) {\r\n    return {\r\n      name: name,\r\n      value: value,\r\n      start: start,\r\n      end: end\r\n    };\r\n  });\r\n};\r\n\r\n_.sepBy = function(separator) {\r\n  return sepBy(this, separator);\r\n};\r\n\r\n_.sepBy1 = function(separator) {\r\n  return sepBy1(this, separator);\r\n};\r\n\r\n_.lookahead = function(x) {\r\n  return this.skip(lookahead(x));\r\n};\r\n\r\n_.notFollowedBy = function(x) {\r\n  return this.skip(notFollowedBy(x));\r\n};\r\n\r\n_.desc = function(expected) {\r\n  if (!isArray(expected)) {\r\n    expected = [expected];\r\n  }\r\n  var self = this;\r\n  return Parsimmon(function(input, i) {\r\n    var reply = self._(input, i);\r\n    if (!reply.status) {\r\n      reply.expected = expected;\r\n    }\r\n    return reply;\r\n  });\r\n};\r\n\r\n_.fallback = function(result) {\r\n  return this.or(succeed(result));\r\n};\r\n\r\n_.ap = function(other) {\r\n  return seqMap(other, this, function(f, x) {\r\n    return f(x);\r\n  });\r\n};\r\n\r\n_.chain = function(f) {\r\n  var self = this;\r\n  return Parsimmon(function(input, i) {\r\n    var result = self._(input, i);\r\n    if (!result.status) {\r\n      return result;\r\n    }\r\n    var nextParser = f(result.value);\r\n    return mergeReplies(nextParser._(input, result.index), result);\r\n  });\r\n};\r\n\r\n// -*- Constructors -*-\r\n\r\nexport function string(str) {\r\n  assertString(str);\r\n  var expected = \"'\" + str + \"'\";\r\n  return Parsimmon(function(input, i) {\r\n    var j = i + str.length;\r\n    var head = input.slice(i, j);\r\n    if (head === str) {\r\n      return makeSuccess(j, head);\r\n    } else {\r\n      return makeFailure(i, expected);\r\n    }\r\n  });\r\n}\r\n\r\nexport function byte(b) {\r\n  ensureBuffer();\r\n  assertNumber(b);\r\n  if (b > 0xff) {\r\n    throw new Error(\r\n      \"Value specified to byte constructor (\" +\r\n        b +\r\n        \"=0x\" +\r\n        b.toString(16) +\r\n        \") is larger in value than a single byte.\"\r\n    );\r\n  }\r\n  var expected = (b > 0xf ? \"0x\" : \"0x0\") + b.toString(16);\r\n  return Parsimmon(function(input, i) {\r\n    var head = get(input, i);\r\n    if (head === b) {\r\n      return makeSuccess(i + 1, head);\r\n    } else {\r\n      return makeFailure(i, expected);\r\n    }\r\n  });\r\n}\r\n\r\nexport function regexp(re, group) {\r\n  assertRegexp(re);\r\n  if (arguments.length >= 2) {\r\n    assertNumber(group);\r\n  } else {\r\n    group = 0;\r\n  }\r\n  var anchored = anchoredRegexp(re);\r\n  var expected = \"\" + re;\r\n  return Parsimmon(function(input, i) {\r\n    var match = anchored.exec(input.slice(i));\r\n    if (match) {\r\n      if (0 <= group && group <= match.length) {\r\n        var fullMatch = match[0];\r\n        var groupMatch = match[group];\r\n        return makeSuccess(i + fullMatch.length, groupMatch);\r\n      }\r\n      var message =\r\n        \"valid match group (0 to \" + match.length + \") in \" + expected;\r\n      return makeFailure(i, message);\r\n    }\r\n    return makeFailure(i, expected);\r\n  });\r\n}\r\n\r\nexport function succeed(value) {\r\n  return Parsimmon(function(input, i) {\r\n    return makeSuccess(i, value);\r\n  });\r\n}\r\n\r\nexport function fail(expected) {\r\n  return Parsimmon(function(input, i) {\r\n    return makeFailure(i, expected);\r\n  });\r\n}\r\n\r\nexport function lookahead(x) {\r\n  if (isParser(x)) {\r\n    return Parsimmon(function(input, i) {\r\n      var result = x._(input, i);\r\n      result.index = i;\r\n      result.value = \"\";\r\n      return result;\r\n    });\r\n  } else if (typeof x === \"string\") {\r\n    return lookahead(string(x));\r\n  } else if (x instanceof RegExp) {\r\n    return lookahead(regexp(x));\r\n  }\r\n  throw new Error(\"not a string, regexp, or parser: \" + x);\r\n}\r\n\r\nexport function notFollowedBy(parser) {\r\n  assertParser(parser);\r\n  return Parsimmon(function(input, i) {\r\n    var result = parser._(input, i);\r\n    var text = input.slice(i, result.index);\r\n    return result.status\r\n      ? makeFailure(i, 'not \"' + text + '\"')\r\n      : makeSuccess(i, null);\r\n  });\r\n}\r\n\r\nexport function test(predicate) {\r\n  assertFunction(predicate);\r\n  return Parsimmon(function(input, i) {\r\n    var char = get(input, i);\r\n    if (i < input.length && predicate(char)) {\r\n      return makeSuccess(i + 1, char);\r\n    } else {\r\n      return makeFailure(i, \"a character/byte matching \" + predicate);\r\n    }\r\n  });\r\n}\r\n\r\nexport function oneOf(str) {\r\n  var expected = str.split(\"\");\r\n  for (var idx = 0; idx < expected.length; idx++) {\r\n    expected[idx] = \"'\" + expected[idx] + \"'\";\r\n  }\r\n  return test(function(ch) {\r\n    return str.indexOf(ch) >= 0;\r\n  }).desc(expected);\r\n}\r\n\r\nexport function noneOf(str) {\r\n  return test(function(ch) {\r\n    return str.indexOf(ch) < 0;\r\n  }).desc(\"none of '\" + str + \"'\");\r\n}\r\n\r\nexport function custom(parsingFunction) {\r\n  return Parsimmon(parsingFunction(makeSuccess, makeFailure));\r\n}\r\n\r\n// TODO[ES5]: Improve error message using JSON.stringify eventually.\r\nexport function range(begin, end) {\r\n  return test(function(ch) {\r\n    return begin <= ch && ch <= end;\r\n  }).desc(begin + \"-\" + end);\r\n}\r\n\r\nexport function takeWhile(predicate) {\r\n  assertFunction(predicate);\r\n\r\n  return Parsimmon(function(input, i) {\r\n    var j = i;\r\n    while (j < input.length && predicate(get(input, j))) {\r\n      j++;\r\n    }\r\n    return makeSuccess(j, input.slice(i, j));\r\n  });\r\n}\r\n\r\nexport function lazy(desc, f) {\r\n  if (arguments.length < 2) {\r\n    f = desc;\r\n    desc = undefined;\r\n  }\r\n\r\n  var parser = Parsimmon(function(input, i) {\r\n    parser._ = f()._;\r\n    return parser._(input, i);\r\n  });\r\n\r\n  if (desc) {\r\n    return parser.desc(desc);\r\n  } else {\r\n    return parser;\r\n  }\r\n}\r\n\r\n// -*- Fantasy Land Extras -*-\r\n\r\nfunction empty() {\r\n  return fail(\"fantasy-land/empty\");\r\n}\r\n\r\n_.concat = _.or;\r\n_.empty = empty;\r\n_.of = succeed;\r\n_[\"fantasy-land/ap\"] = _.ap;\r\n_[\"fantasy-land/chain\"] = _.chain;\r\n_[\"fantasy-land/concat\"] = _.concat;\r\n_[\"fantasy-land/empty\"] = _.empty;\r\n_[\"fantasy-land/of\"] = _.of;\r\n_[\"fantasy-land/map\"] = _.map;\r\n\r\n// -*- Base Parsers -*-\r\n\r\nexport const index = Parsimmon(function(input, i) {\r\n  return makeSuccess(i, makeLineColumnIndex(input, i));\r\n});\r\n\r\nexport const any = Parsimmon(function(input, i) {\r\n  if (i >= input.length) {\r\n    return makeFailure(i, \"any character/byte\");\r\n  }\r\n  return makeSuccess(i + 1, get(input, i));\r\n});\r\n\r\nexport const all = Parsimmon(function(input, i) {\r\n  return makeSuccess(input.length, input.slice(i));\r\n});\r\n\r\nexport const eof = Parsimmon(function(input, i) {\r\n  if (i < input.length) {\r\n    return makeFailure(i, \"EOF\");\r\n  }\r\n  return makeSuccess(i, null);\r\n});\r\n\r\nexport const digit = regexp(/[0-9]/).desc(\"a digit\");\r\nexport const digits = regexp(/[0-9]*/).desc(\"optional digits\");\r\nexport const letter = regexp(/[a-z]/i).desc(\"a letter\");\r\nexport const letters = regexp(/[a-z]*/i).desc(\"optional letters\");\r\nexport const optWhitespace = regexp(/\\s*/).desc(\"optional whitespace\");\r\nexport const whitespace = regexp(/\\s+/).desc(\"whitespace\");\r\nexport const cr = string(\"\\r\");\r\nexport const lf = string(\"\\n\");\r\nexport const crlf = string(\"\\r\\n\");\r\nexport const newline = alt(crlf, lf, cr).desc(\"newline\");\r\nexport const end = alt(newline, eof);","// export type decimal = Decimal;\nexport var NumberStyles;\n(function (NumberStyles) {\n    // None = 0x00000000,\n    // AllowLeadingWhite = 0x00000001,\n    // AllowTrailingWhite = 0x00000002,\n    // AllowLeadingSign = 0x00000004,\n    // AllowTrailingSign = 0x00000008,\n    // AllowParentheses = 0x00000010,\n    // AllowDecimalPoint = 0x00000020,\n    // AllowThousands = 0x00000040,\n    // AllowExponent = 0x00000080,\n    // AllowCurrencySymbol = 0x00000100,\n    NumberStyles[NumberStyles[\"AllowHexSpecifier\"] = 512] = \"AllowHexSpecifier\";\n    // Integer = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign,\n    // HexNumber = AllowLeadingWhite | AllowTrailingWhite | AllowHexSpecifier,\n    // Number = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n    //          AllowTrailingSign | AllowDecimalPoint | AllowThousands,\n    // Float = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n    //         AllowDecimalPoint | AllowExponent,\n    // Currency = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n    //            AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol,\n    // Any = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n    //       AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol | AllowExponent,\n})(NumberStyles || (NumberStyles = {}));\nfunction validResponse(regexMatch, radix) {\n    const [/*all*/ , sign, prefix, digits] = regexMatch;\n    return {\n        sign: sign || \"\",\n        prefix: prefix || \"\",\n        digits,\n        radix,\n    };\n}\nfunction getRange(unsigned, bitsize) {\n    switch (bitsize) {\n        case 8: return unsigned ? [0, 255] : [-128, 127];\n        case 16: return unsigned ? [0, 65535] : [-32768, 32767];\n        case 32: return unsigned ? [0, 4294967295] : [-2147483648, 2147483647];\n        default: throw new Error(\"Invalid bit size.\");\n    }\n}\nfunction getInvalidDigits(radix) {\n    switch (radix) {\n        case 2: return /[^0-1]/;\n        case 8: return /[^0-7]/;\n        case 10: return /[^0-9]/;\n        case 16: return /[^0-9a-fA-F]/;\n        default:\n            throw new Error(\"Invalid Base.\");\n    }\n}\nfunction getRadix(prefix, style) {\n    if (style & NumberStyles.AllowHexSpecifier) {\n        return 16;\n    }\n    else {\n        switch (prefix) {\n            case \"0b\":\n            case \"0B\": return 2;\n            case \"0o\":\n            case \"0O\": return 8;\n            case \"0x\":\n            case \"0X\": return 16;\n            default: return 10;\n        }\n    }\n}\nexport function isValid(str, style, radix) {\n    const integerRegex = /^\\s*([\\+\\-])?(0[xXoObB])?([0-9a-fA-F]+)\\s*$/;\n    const res = integerRegex.exec(str.replace(/_/g, \"\"));\n    if (res != null) {\n        const [/*all*/ , /*sign*/ , prefix, digits] = res;\n        radix = radix || getRadix(prefix, style);\n        const invalidDigits = getInvalidDigits(radix);\n        if (!invalidDigits.test(digits)) {\n            return validResponse(res, radix);\n        }\n    }\n    return null;\n}\nexport function parse(str, style, unsigned, bitsize, radix) {\n    const res = isValid(str, style, radix);\n    if (res != null) {\n        let v = Number.parseInt(res.sign + res.digits, res.radix);\n        if (!Number.isNaN(v)) {\n            const [umin, umax] = getRange(true, bitsize);\n            if (!unsigned && res.radix !== 10 && v >= umin && v <= umax) {\n                v = v << (32 - bitsize) >> (32 - bitsize);\n            }\n            const [min, max] = getRange(unsigned, bitsize);\n            if (v >= min && v <= max) {\n                return v;\n            }\n        }\n    }\n    throw new Error(\"Input string was not in a correct format.\");\n}\nexport function tryParse(str, style, unsigned, bitsize, defValue) {\n    try {\n        defValue.contents = parse(str, style, unsigned, bitsize);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function op_UnaryNegation_Int8(x) {\n    return x === -128 ? x : -x;\n}\nexport function op_UnaryNegation_Int16(x) {\n    return x === -32768 ? x : -x;\n}\nexport function op_UnaryNegation_Int32(x) {\n    return x === -2147483648 ? x : -x;\n}\n","export const symbol = Symbol(\"numeric\");\nexport function isNumeric(x) {\n    return typeof x === \"number\" || (x === null || x === void 0 ? void 0 : x[symbol]);\n}\nexport function compare(x, y) {\n    if (typeof x === \"number\") {\n        return x < y ? -1 : (x > y ? 1 : 0);\n    }\n    else {\n        return x.CompareTo(y);\n    }\n}\nexport function multiply(x, y) {\n    if (typeof x === \"number\") {\n        return x * y;\n    }\n    else {\n        return x[symbol]().multiply(y);\n    }\n}\nexport function toFixed(x, dp) {\n    if (typeof x === \"number\") {\n        return x.toFixed(dp);\n    }\n    else {\n        return x[symbol]().toFixed(dp);\n    }\n}\nexport function toPrecision(x, sd) {\n    if (typeof x === \"number\") {\n        return x.toPrecision(sd);\n    }\n    else {\n        return x[symbol]().toPrecision(sd);\n    }\n}\nexport function toExponential(x, dp) {\n    if (typeof x === \"number\") {\n        return x.toExponential(dp);\n    }\n    else {\n        return x[symbol]().toExponential(dp);\n    }\n}\nexport function toHex(x) {\n    if (typeof x === \"number\") {\n        return (Number(x) >>> 0).toString(16);\n    }\n    else {\n        return x[symbol]().toHex();\n    }\n}\n","// Adapted from: https://github.com/dcodeIO/long.js/blob/master/src/long.js\n// Apache License 2.0: https://github.com/dcodeIO/long.js/blob/master/LICENSE\n/* tslint:disable */\nimport { symbol } from \"../Numeric.js\";\n/**\n * wasm optimizations, to do native i64 multiplication and divide\n */\nvar wasm = null;\ntry {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\n        0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\n    ])), {}).exports;\n}\ncatch (e) {\n    // no wasm support :(\n}\n/**\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n *  See the from* functions below for more convenient ways of constructing Longs.\n * @exports Long\n * @class A Long class for representing a 64 bit two's-complement integer value.\n * @param {number} low The low (signed) 32 bits of the long\n * @param {number} high The high (signed) 32 bits of the long\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @constructor\n */\nexport function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n    this.unsigned = !!unsigned;\n}\nLong.prototype.GetHashCode = function () {\n    let h1 = this.unsigned ? 1 : 0;\n    h1 = ((h1 << 5) + h1) ^ this.high;\n    h1 = ((h1 << 5) + h1) ^ this.low;\n    return h1;\n};\nLong.prototype.Equals = function (x) { return equals(this, x); };\nLong.prototype.CompareTo = function (x) { return compare(this, x); };\nLong.prototype.toString = function (radix) { return toString(this, radix); };\nLong.prototype.toJSON = function () { return toString(this); };\nLong.prototype[symbol] = function () {\n    const x = this;\n    return {\n        multiply: y => multiply(x, y),\n        toPrecision: sd => String(x) + (0).toPrecision(sd).substr(1),\n        toExponential: dp => String(x) + (0).toExponential(dp).substr(1),\n        toFixed: dp => String(x) + (0).toFixed(dp).substr(1),\n        toHex: () => toString(x.unsigned ? x : fromBytes(toBytes(x), true), 16),\n    };\n};\n// The internal representation of a long is the two given signed, 32-bit values.\n// We use 32-bit pieces because these are the size of integers on which\n// Javascript performs bit-operations.  For operations like addition and\n// multiplication, we split each number into 16 bit pieces, which can easily be\n// multiplied within Javascript's floating-point representation without overflow\n// or change in sign.\n//\n// In the algorithms below, we frequently reduce the negative case to the\n// positive case by negating the input(s) and then post-processing the result.\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n// a positive number, it overflows back into a negative).  Not handling this\n// case would often result in infinite recursion.\n//\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n// methods on which they depend.\n/**\n * An indicator used to reliably determine if an object is a Long or not.\n * @type {boolean}\n * @const\n * @private\n */\nLong.prototype.__isLong__;\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\n/**\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n * @inner\n */\nexport function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n}\n/**\n * Tests if the specified object is a Long.\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n */\n// Long.isLong = isLong;\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object}\n * @inner\n */\nvar INT_CACHE = {};\n/**\n * A cache of the Long representations of small unsigned integer values.\n * @type {!Object}\n * @inner\n */\nvar UINT_CACHE = {};\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n    if (unsigned) {\n        value >>>= 0;\n        if (cache = (0 <= value && value < 256)) {\n            cachedObj = UINT_CACHE[value];\n            if (cachedObj)\n                return cachedObj;\n        }\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\n        if (cache)\n            UINT_CACHE[value] = obj;\n        return obj;\n    }\n    else {\n        value |= 0;\n        if (cache = (-128 <= value && value < 128)) {\n            cachedObj = INT_CACHE[value];\n            if (cachedObj)\n                return cachedObj;\n        }\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\n        if (cache)\n            INT_CACHE[value] = obj;\n        return obj;\n    }\n}\n/**\n * Returns a Long representing the given 32 bit integer value.\n * @function\n * @param {number} value The 32 bit integer in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromInt = fromInt;\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromNumber(value, unsigned) {\n    if (isNaN(value))\n        return unsigned ? UZERO : ZERO;\n    if (unsigned) {\n        if (value < 0)\n            return UZERO;\n        if (value >= TWO_PWR_64_DBL)\n            return MAX_UNSIGNED_VALUE;\n    }\n    else {\n        if (value <= -TWO_PWR_63_DBL)\n            return MIN_VALUE;\n        if (value + 1 >= TWO_PWR_63_DBL)\n            return MAX_VALUE;\n    }\n    if (value < 0)\n        return negate(fromNumber(-value, unsigned));\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\n}\n/**\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n * @function\n * @param {number} value The number in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromNumber = fromNumber;\n/**\n * @param {number} lowBits\n * @param {number} highBits\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n}\n/**\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n *  assumed to use 32 bits.\n * @function\n * @param {number} lowBits The low 32 bits\n * @param {number} highBits The high 32 bits\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromBits = fromBits;\n/**\n * @function\n * @param {number} base\n * @param {number} exponent\n * @returns {number}\n * @inner\n */\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n/**\n * @param {string} str\n * @param {(boolean|number)=} unsigned\n * @param {number=} radix\n * @returns {!Long}\n * @inner\n */\nexport function fromString(str, unsigned, radix) {\n    if (str.length === 0)\n        throw Error('empty string');\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\n        return ZERO;\n    if (typeof unsigned === 'number') {\n        // For goog.math.long compatibility\n        radix = unsigned,\n            unsigned = false;\n    }\n    else {\n        unsigned = !!unsigned;\n    }\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix)\n        throw RangeError('radix');\n    var p = str.indexOf('-');\n    if (p > 0)\n        throw Error('interior hyphen');\n    else if (p === 0) {\n        return negate(fromString(str.substring(1), unsigned, radix));\n    }\n    // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n    for (var i = 0; i < str.length; i += 8) {\n        var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);\n        if (size < 8) {\n            var power = fromNumber(pow_dbl(radix, size));\n            result = add(multiply(result, power), fromNumber(value));\n        }\n        else {\n            result = multiply(result, radixToPower);\n            result = add(result, fromNumber(value));\n        }\n    }\n    result.unsigned = unsigned;\n    return result;\n}\n/**\n * Returns a Long representation of the given string, written using the specified radix.\n * @function\n * @param {string} str The textual representation of the Long\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromString = fromString;\n/**\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromValue(val, unsigned) {\n    if (typeof val === 'number')\n        return fromNumber(val, unsigned);\n    if (typeof val === 'string')\n        return fromString(val, unsigned);\n    // Throws for non-objects, converts non-instanceof Long:\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n}\n/**\n * Converts the specified value to a Long using the appropriate from* function for its type.\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long}\n */\n// Long.fromValue = fromValue;\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n// no runtime penalty for these.\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_16_DBL = 1 << 16;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_24_DBL = 1 << 24;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n/**\n * @type {!Long}\n * @const\n * @inner\n */\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n/**\n * @type {!Long}\n * @inner\n */\nexport var ZERO = fromInt(0);\n/**\n * Signed zero.\n * @type {!Long}\n */\n// Long.ZERO = ZERO;\n/**\n * @type {!Long}\n * @inner\n */\nexport var UZERO = fromInt(0, true);\n/**\n * Unsigned zero.\n * @type {!Long}\n */\n// Long.UZERO = UZERO;\n/**\n * @type {!Long}\n * @inner\n */\nexport var ONE = fromInt(1);\n/**\n * Signed one.\n * @type {!Long}\n */\n// Long.ONE = ONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var UONE = fromInt(1, true);\n/**\n * Unsigned one.\n * @type {!Long}\n */\n// Long.UONE = UONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var NEG_ONE = fromInt(-1);\n/**\n * Signed negative one.\n * @type {!Long}\n */\n// Long.NEG_ONE = NEG_ONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n/**\n * Maximum signed value.\n * @type {!Long}\n */\n// Long.MAX_VALUE = MAX_VALUE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n/**\n * Maximum unsigned value.\n * @type {!Long}\n */\n// Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n/**\n * Minimum signed value.\n * @type {!Long}\n */\n// Long.MIN_VALUE = MIN_VALUE;\n/**\n * @alias Long.prototype\n * @inner\n */\n// var LongPrototype = Long.prototype;\n/**\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n * @this {!Long}\n * @returns {number}\n */\nexport function toInt($this) {\n    return $this.unsigned ? $this.low >>> 0 : $this.low;\n}\n;\n/**\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n * @this {!Long}\n * @returns {number}\n */\nexport function toNumber($this) {\n    if ($this.unsigned)\n        return (($this.high >>> 0) * TWO_PWR_32_DBL) + ($this.low >>> 0);\n    return $this.high * TWO_PWR_32_DBL + ($this.low >>> 0);\n}\n;\n/**\n * Converts the Long to a string written in the specified radix.\n * @this {!Long}\n * @param {number=} radix Radix (2-36), defaults to 10\n * @returns {string}\n * @override\n * @throws {RangeError} If `radix` is out of range\n */\nexport function toString($this, radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix)\n        throw RangeError('radix');\n    if (isZero($this))\n        return '0';\n    if (isNegative($this)) { // Unsigned Longs are never negative\n        if (equals($this, MIN_VALUE)) {\n            // We need to change the Long value before it can be negated, so we remove\n            // the bottom-most digit in this base and then recurse to do the rest.\n            var radixLong = fromNumber(radix), div = divide($this, radixLong), rem1 = subtract(multiply(div, radixLong), $this);\n            return toString(div, radix) + toInt(rem1).toString(radix);\n        }\n        else\n            return '-' + toString(negate($this), radix);\n    }\n    // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = fromNumber(pow_dbl(radix, 6), $this.unsigned), rem = $this;\n    var result = '';\n    while (true) {\n        var remDiv = divide(rem, radixToPower), intval = toInt(subtract(rem, multiply(remDiv, radixToPower))) >>> 0, digits = intval.toString(radix);\n        rem = remDiv;\n        if (isZero(rem))\n            return digits + result;\n        else {\n            while (digits.length < 6)\n                digits = '0' + digits;\n            result = '' + digits + result;\n        }\n    }\n}\n;\n/**\n * Gets the high 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed high bits\n */\nexport function getHighBits($this) {\n    return $this.high;\n}\n;\n/**\n * Gets the high 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned high bits\n */\nexport function getHighBitsUnsigned($this) {\n    return $this.high >>> 0;\n}\n;\n/**\n * Gets the low 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed low bits\n */\nexport function getLowBits($this) {\n    return $this.low;\n}\n;\n/**\n * Gets the low 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned low bits\n */\nexport function getLowBitsUnsigned($this) {\n    return $this.low >>> 0;\n}\n;\n/**\n * Gets the number of bits needed to represent the absolute value of this Long.\n * @this {!Long}\n * @returns {number}\n */\nexport function getNumBitsAbs($this) {\n    if (isNegative($this)) // Unsigned Longs are never negative\n        return equals($this, MIN_VALUE) ? 64 : getNumBitsAbs(negate($this));\n    var val = $this.high != 0 ? $this.high : $this.low;\n    for (var bit = 31; bit > 0; bit--)\n        if ((val & (1 << bit)) != 0)\n            break;\n    return $this.high != 0 ? bit + 33 : bit + 1;\n}\n;\n/**\n * Tests if this Long's value equals zero.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isZero($this) {\n    return $this.high === 0 && $this.low === 0;\n}\n;\n/**\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n * @returns {boolean}\n */\n// LongPrototype.eqz = LongPrototype.isZero;\n/**\n * Tests if this Long's value is negative.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isNegative($this) {\n    return !$this.unsigned && $this.high < 0;\n}\n;\n/**\n * Tests if this Long's value is positive.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isPositive($this) {\n    return $this.unsigned || $this.high >= 0;\n}\n;\n/**\n * Tests if this Long's value is odd.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isOdd($this) {\n    return ($this.low & 1) === 1;\n}\n;\n/**\n * Tests if this Long's value is even.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isEven($this) {\n    return ($this.low & 1) === 0;\n}\n;\n/**\n * Tests if this Long's value equals the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function equals($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    if ($this.unsigned !== other.unsigned && ($this.high >>> 31) === 1 && (other.high >>> 31) === 1)\n        return false;\n    return $this.high === other.high && $this.low === other.low;\n}\n;\n/**\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.eq = LongPrototype.equals;\n/**\n * Tests if this Long's value differs from the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function notEquals($this, other) {\n    return !equals($this, /* validates */ other);\n}\n;\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.neq = LongPrototype.notEquals;\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.ne = LongPrototype.notEquals;\n/**\n * Tests if this Long's value is less than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function lessThan($this, other) {\n    return compare($this, /* validates */ other) < 0;\n}\n;\n/**\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.lt = LongPrototype.lessThan;\n/**\n * Tests if this Long's value is less than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function lessThanOrEqual($this, other) {\n    return compare($this, /* validates */ other) <= 0;\n}\n;\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.lte = LongPrototype.lessThanOrEqual;\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.le = LongPrototype.lessThanOrEqual;\n/**\n * Tests if this Long's value is greater than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function greaterThan($this, other) {\n    return compare($this, /* validates */ other) > 0;\n}\n;\n/**\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.gt = LongPrototype.greaterThan;\n/**\n * Tests if this Long's value is greater than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function greaterThanOrEqual($this, other) {\n    return compare($this, /* validates */ other) >= 0;\n}\n;\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n/**\n * Compares this Long's value with the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\nexport function compare($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    if (equals($this, other))\n        return 0;\n    var thisNeg = isNegative($this), otherNeg = isNegative(other);\n    if (thisNeg && !otherNeg)\n        return -1;\n    if (!thisNeg && otherNeg)\n        return 1;\n    // At this point the sign bits are the same\n    if (!$this.unsigned)\n        return isNegative(subtract($this, other)) ? -1 : 1;\n    // Both are positive if at least one is unsigned\n    return (other.high >>> 0) > ($this.high >>> 0) || (other.high === $this.high && (other.low >>> 0) > ($this.low >>> 0)) ? -1 : 1;\n}\n;\n/**\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\n// LongPrototype.comp = LongPrototype.compare;\n/**\n * Negates this Long's value.\n * @this {!Long}\n * @returns {!Long} Negated Long\n */\nexport function negate($this) {\n    if (!$this.unsigned && equals($this, MIN_VALUE))\n        return MIN_VALUE;\n    return add(not($this), ONE);\n}\n;\n/**\n * Negates this Long's value. This is an alias of {@link Long#negate}.\n * @function\n * @returns {!Long} Negated Long\n */\n// LongPrototype.neg = LongPrototype.negate;\n/**\n * Returns the sum of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} addend Addend\n * @returns {!Long} Sum\n */\nexport function add($this, addend) {\n    if (!isLong(addend))\n        addend = fromValue(addend);\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n    var a48 = $this.high >>> 16;\n    var a32 = $this.high & 0xFFFF;\n    var a16 = $this.low >>> 16;\n    var a00 = $this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, $this.unsigned);\n}\n;\n/**\n * Returns the difference of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\nexport function subtract($this, subtrahend) {\n    if (!isLong(subtrahend))\n        subtrahend = fromValue(subtrahend);\n    return add($this, negate(subtrahend));\n}\n;\n/**\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n * @function\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\n// LongPrototype.sub = LongPrototype.subtract;\n/**\n * Returns the product of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\nexport function multiply($this, multiplier) {\n    if (isZero($this))\n        return $this.unsigned ? UZERO : ZERO;\n    if (!isLong(multiplier))\n        multiplier = fromValue(multiplier);\n    // use wasm support if present\n    if (wasm) {\n        var low = wasm.mul($this.low, $this.high, multiplier.low, multiplier.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    if (isZero(multiplier))\n        return $this.unsigned ? UZERO : ZERO;\n    if (equals($this, MIN_VALUE))\n        return isOdd(multiplier) ? MIN_VALUE : ZERO;\n    if (equals(multiplier, MIN_VALUE))\n        return isOdd($this) ? MIN_VALUE : ZERO;\n    if (isNegative($this)) {\n        if (isNegative(multiplier))\n            return multiply(negate($this), negate(multiplier));\n        else\n            return negate(multiply(negate($this), multiplier));\n    }\n    else if (isNegative(multiplier))\n        return negate(multiply($this, negate(multiplier)));\n    // If both longs are small, use float multiplication\n    if (lessThan($this, TWO_PWR_24) && lessThan(multiplier, TWO_PWR_24))\n        return fromNumber(toNumber($this) * toNumber(multiplier), $this.unsigned);\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n    var a48 = $this.high >>> 16;\n    var a32 = $this.high & 0xFFFF;\n    var a16 = $this.low >>> 16;\n    var a00 = $this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, $this.unsigned);\n}\n;\n/**\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n * @function\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\n// LongPrototype.mul = LongPrototype.multiply;\n/**\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\n *  unsigned if this Long is unsigned.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\nexport function divide($this, divisor) {\n    if (!isLong(divisor))\n        divisor = fromValue(divisor);\n    if (isZero(divisor))\n        throw Error('division by zero');\n    // use wasm support if present\n    if (wasm) {\n        // guard against signed division overflow: the largest\n        // negative number / -1 would be 1 larger than the largest\n        // positive number, due to two's complement.\n        if (!$this.unsigned &&\n            $this.high === -0x80000000 &&\n            divisor.low === -1 && divisor.high === -1) {\n            // be consistent with non-wasm code path\n            return $this;\n        }\n        var low = ($this.unsigned ? wasm.div_u : wasm.div_s)($this.low, $this.high, divisor.low, divisor.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    if (isZero($this))\n        return $this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n    if (!$this.unsigned) {\n        // This section is only relevant for signed longs and is derived from the\n        // closure library as a whole.\n        if (equals($this, MIN_VALUE)) {\n            if (equals(divisor, ONE) || equals(divisor, NEG_ONE))\n                return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n            else if (equals(divisor, MIN_VALUE))\n                return ONE;\n            else {\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n                var halfThis = shiftRight($this, 1);\n                approx = shiftLeft(divide(halfThis, divisor), 1);\n                if (equals(approx, ZERO)) {\n                    return isNegative(divisor) ? ONE : NEG_ONE;\n                }\n                else {\n                    rem = subtract($this, multiply(divisor, approx));\n                    res = add(approx, divide(rem, divisor));\n                    return res;\n                }\n            }\n        }\n        else if (equals(divisor, MIN_VALUE))\n            return $this.unsigned ? UZERO : ZERO;\n        if (isNegative($this)) {\n            if (isNegative(divisor))\n                return divide(negate($this), negate(divisor));\n            return negate(divide(negate($this), divisor));\n        }\n        else if (isNegative(divisor))\n            return negate(divide($this, negate(divisor)));\n        res = ZERO;\n    }\n    else {\n        // The algorithm below has not been made for unsigned longs. It's therefore\n        // required to take special care of the MSB prior to running it.\n        if (!divisor.unsigned)\n            divisor = toUnsigned(divisor);\n        if (greaterThan(divisor, $this))\n            return UZERO;\n        if (greaterThan(divisor, shiftRightUnsigned($this, 1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n            return UONE;\n        res = UZERO;\n    }\n    // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n    rem = $this;\n    while (greaterThanOrEqual(rem, divisor)) {\n        // Approximate the result of division. This may be a little greater or\n        // smaller than the actual value.\n        approx = Math.max(1, Math.floor(toNumber(rem) / toNumber(divisor)));\n        // We will tweak the approximate result by changing it in the 48-th digit or\n        // the smallest non-fractional digit, whichever is larger.\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2), delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48), \n        // Decrease the approximation until it is smaller than the remainder.  Note\n        // that if it is too large, the product overflows and is negative.\n        approxRes = fromNumber(approx), approxRem = multiply(approxRes, divisor);\n        while (isNegative(approxRem) || greaterThan(approxRem, rem)) {\n            approx -= delta;\n            approxRes = fromNumber(approx, $this.unsigned);\n            approxRem = multiply(approxRes, divisor);\n        }\n        // We know the answer can't be zero... and actually, zero would cause\n        // infinite recursion since we would make no progress.\n        if (isZero(approxRes))\n            approxRes = ONE;\n        res = add(res, approxRes);\n        rem = subtract(rem, approxRem);\n    }\n    return res;\n}\n;\n/**\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\n// LongPrototype.div = LongPrototype.divide;\n/**\n * Returns this Long modulo the specified.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nexport function modulo($this, divisor) {\n    if (!isLong(divisor))\n        divisor = fromValue(divisor);\n    // use wasm support if present\n    if (wasm) {\n        var low = ($this.unsigned ? wasm.rem_u : wasm.rem_s)($this.low, $this.high, divisor.low, divisor.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    return subtract($this, multiply(divide($this, divisor), divisor));\n}\n;\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\n// LongPrototype.mod = LongPrototype.modulo;\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\n// LongPrototype.rem = LongPrototype.modulo;\n/**\n * Returns the bitwise NOT of this Long.\n * @this {!Long}\n * @returns {!Long}\n */\nexport function not($this) {\n    return fromBits(~$this.low, ~$this.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise AND of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function and($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low & other.low, $this.high & other.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise OR of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function or($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low | other.low, $this.high | other.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise XOR of this Long and the given one.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function xor($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low ^ other.low, $this.high ^ other.high, $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftLeft($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    if ((numBits &= 63) === 0)\n        return $this;\n    else if (numBits < 32)\n        return fromBits($this.low << numBits, ($this.high << numBits) | ($this.low >>> (32 - numBits)), $this.unsigned);\n    else\n        return fromBits(0, $this.low << (numBits - 32), $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shl = LongPrototype.shiftLeft;\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftRight($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    if ((numBits &= 63) === 0)\n        return $this;\n    else if (numBits < 32)\n        return fromBits(($this.low >>> numBits) | ($this.high << (32 - numBits)), $this.high >> numBits, $this.unsigned);\n    else\n        return fromBits($this.high >> (numBits - 32), $this.high >= 0 ? 0 : -1, $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shr = LongPrototype.shiftRight;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftRightUnsigned($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    numBits &= 63;\n    if (numBits === 0)\n        return $this;\n    else {\n        var high = $this.high;\n        if (numBits < 32) {\n            var low = $this.low;\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, $this.unsigned);\n        }\n        else if (numBits === 32)\n            return fromBits(high, 0, $this.unsigned);\n        else\n            return fromBits(high >>> (numBits - 32), 0, $this.unsigned);\n    }\n}\n;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n/**\n * Returns this Long with bits rotated to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nexport const rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits))\n        numBits = numBits.toInt();\n    if ((numBits &= 63) === 0)\n        return this;\n    if (numBits === 32)\n        return fromBits(this.high, this.low, this.unsigned);\n    if (numBits < 32) {\n        b = (32 - numBits);\n        return fromBits(((this.low << numBits) | (this.high >>> b)), ((this.high << numBits) | (this.low >>> b)), this.unsigned);\n    }\n    numBits -= 32;\n    b = (32 - numBits);\n    return fromBits(((this.high << numBits) | (this.low >>> b)), ((this.low << numBits) | (this.high >>> b)), this.unsigned);\n};\n/**\n * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\n// LongPrototype.rotl = LongPrototype.rotateLeft;\n/**\n * Returns this Long with bits rotated to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nexport const rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits))\n        numBits = numBits.toInt();\n    if ((numBits &= 63) === 0)\n        return this;\n    if (numBits === 32)\n        return fromBits(this.high, this.low, this.unsigned);\n    if (numBits < 32) {\n        b = (32 - numBits);\n        return fromBits(((this.high << b) | (this.low >>> numBits)), ((this.low << b) | (this.high >>> numBits)), this.unsigned);\n    }\n    numBits -= 32;\n    b = (32 - numBits);\n    return fromBits(((this.low << b) | (this.high >>> numBits)), ((this.high << b) | (this.low >>> numBits)), this.unsigned);\n};\n/**\n * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\n// LongPrototype.rotr = LongPrototype.rotateRight;\n/**\n * Converts this Long to signed.\n * @this {!Long}\n * @returns {!Long} Signed long\n */\nexport function toSigned($this) {\n    if (!$this.unsigned)\n        return $this;\n    return fromBits($this.low, $this.high, false);\n}\n;\n/**\n * Converts this Long to unsigned.\n * @this {!Long}\n * @returns {!Long} Unsigned long\n */\nexport function toUnsigned($this) {\n    if ($this.unsigned)\n        return $this;\n    return fromBits($this.low, $this.high, true);\n}\n;\n/**\n * Converts this Long to its byte representation.\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @this {!Long}\n * @returns {!Array.<number>} Byte representation\n */\nexport function toBytes($this, le) {\n    return le ? toBytesLE($this) : toBytesBE($this);\n}\n;\n/**\n * Converts this Long to its little endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Little endian byte representation\n */\nexport function toBytesLE($this) {\n    var hi = $this.high, lo = $this.low;\n    return [\n        lo & 0xff,\n        lo >>> 8 & 0xff,\n        lo >>> 16 & 0xff,\n        lo >>> 24,\n        hi & 0xff,\n        hi >>> 8 & 0xff,\n        hi >>> 16 & 0xff,\n        hi >>> 24\n    ];\n}\n;\n/**\n * Converts this Long to its big endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Big endian byte representation\n */\nexport function toBytesBE($this) {\n    var hi = $this.high, lo = $this.low;\n    return [\n        hi >>> 24,\n        hi >>> 16 & 0xff,\n        hi >>> 8 & 0xff,\n        hi & 0xff,\n        lo >>> 24,\n        lo >>> 16 & 0xff,\n        lo >>> 8 & 0xff,\n        lo & 0xff\n    ];\n}\n;\n/**\n * Creates a Long from its byte representation.\n * @param {!Array.<number>} bytes Byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytes(bytes, unsigned, le) {\n    return le ? fromBytesLE(bytes, unsigned) : fromBytesBE(bytes, unsigned);\n}\n;\n/**\n * Creates a Long from its little endian byte representation.\n * @param {!Array.<number>} bytes Little endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] |\n        bytes[1] << 8 |\n        bytes[2] << 16 |\n        bytes[3] << 24, bytes[4] |\n        bytes[5] << 8 |\n        bytes[6] << 16 |\n        bytes[7] << 24, unsigned);\n}\n;\n/**\n * Creates a Long from its big endian byte representation.\n * @param {!Array.<number>} bytes Big endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 |\n        bytes[5] << 16 |\n        bytes[6] << 8 |\n        bytes[7], bytes[0] << 24 |\n        bytes[1] << 16 |\n        bytes[2] << 8 |\n        bytes[3], unsigned);\n}\n;\n","import { isValid } from \"./Int32.js\";\nimport * as LongLib from \"./lib/long.js\";\nexport default LongLib.Long;\nexport const get_Zero = LongLib.ZERO;\nexport const get_One = LongLib.ONE;\nexport const op_Addition = LongLib.add;\nexport const op_Subtraction = LongLib.subtract;\nexport const op_Multiply = LongLib.multiply;\nexport const op_Division = LongLib.divide;\nexport const op_Modulus = LongLib.modulo;\nexport const op_UnaryNegation = LongLib.negate;\nexport const op_LeftShift = LongLib.shiftLeft;\nexport const op_RightShift = LongLib.shiftRight;\nexport const op_RightShiftUnsigned = LongLib.shiftRightUnsigned;\nexport const op_BitwiseAnd = LongLib.and;\nexport const op_BitwiseOr = LongLib.or;\nexport const op_ExclusiveOr = LongLib.xor;\nexport const op_LogicalNot = LongLib.not;\nexport const op_LessThan = LongLib.lessThan;\nexport const op_LessThanOrEqual = LongLib.lessThanOrEqual;\nexport const op_GreaterThan = LongLib.greaterThan;\nexport const op_GreaterThanOrEqual = LongLib.greaterThanOrEqual;\nexport const op_Equality = LongLib.equals;\nexport const op_Inequality = LongLib.notEquals;\nexport const equals = LongLib.equals;\nexport const compare = LongLib.compare;\nexport const fromInt = LongLib.fromInt;\nexport const fromBits = LongLib.fromBits;\nexport const fromBytes = LongLib.fromBytes;\nexport const fromNumber = LongLib.fromNumber;\nexport const fromString = LongLib.fromString;\nexport const fromValue = LongLib.fromValue;\nexport const toInt = LongLib.toInt;\nexport const toBytes = LongLib.toBytes;\nexport const toNumber = LongLib.toNumber;\nexport const toString = LongLib.toString;\nexport const getLowBits = LongLib.getLowBits;\nexport const getHighBits = LongLib.getHighBits;\nexport const getLowBitsUnsigned = LongLib.getLowBitsUnsigned;\nexport const getHighBitsUnsigned = LongLib.getHighBitsUnsigned;\nfunction getMaxValue(unsigned, radix, isNegative) {\n    switch (radix) {\n        case 2: return unsigned ?\n            \"1111111111111111111111111111111111111111111111111111111111111111\" :\n            (isNegative ? \"1000000000000000000000000000000000000000000000000000000000000000\"\n                : \"111111111111111111111111111111111111111111111111111111111111111\");\n        case 8: return unsigned ?\n            \"1777777777777777777777\" :\n            (isNegative ? \"1000000000000000000000\" : \"777777777777777777777\");\n        case 10: return unsigned ?\n            \"18446744073709551615\" :\n            (isNegative ? \"9223372036854775808\" : \"9223372036854775807\");\n        case 16: return unsigned ?\n            \"FFFFFFFFFFFFFFFF\" :\n            (isNegative ? \"8000000000000000\" : \"7FFFFFFFFFFFFFFF\");\n        default: throw new Error(\"Invalid radix.\");\n    }\n}\nexport function abs(x) {\n    if (!x.unsigned && LongLib.isNegative(x)) {\n        return op_UnaryNegation(x);\n    }\n    else {\n        return x;\n    }\n}\nexport function fromInteger(value, unsigned, kind) {\n    let x = value;\n    let xh = 0;\n    switch (kind) {\n        case 0:\n            x = value << 24 >> 24;\n            xh = x;\n            break;\n        case 4:\n            x = value << 24 >>> 24;\n            break;\n        case 1:\n            x = value << 16 >> 16;\n            xh = x;\n            break;\n        case 5:\n            x = value << 16 >>> 16;\n            break;\n        case 2:\n            x = value >> 0;\n            xh = x;\n            break;\n        case 6:\n            x = value >>> 0;\n            break;\n    }\n    return LongLib.fromBits(x, xh >> 31, unsigned);\n}\nexport function parse(str, style, unsigned, _bitsize, radix) {\n    const res = isValid(str, style, radix);\n    if (res != null) {\n        const lessOrEqual = (x, y) => {\n            const len = Math.max(x.length, y.length);\n            return x.padStart(len, \"0\") <= y.padStart(len, \"0\");\n        };\n        const isNegative = res.sign === \"-\";\n        const maxValue = getMaxValue(unsigned || res.radix !== 10, res.radix, isNegative);\n        if (lessOrEqual(res.digits.toUpperCase(), maxValue)) {\n            str = isNegative ? res.sign + res.digits : res.digits;\n            return LongLib.fromString(str, unsigned, res.radix);\n        }\n    }\n    throw new Error(\"Input string was not in a correct format.\");\n}\nexport function tryParse(str, style, unsigned, bitsize, defValue) {\n    try {\n        defValue.contents = parse(str, style, unsigned, bitsize);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function unixEpochMillisecondsToTicks(ms, offset) {\n    return op_Multiply(op_Addition(op_Addition(LongLib.fromNumber(ms), 62135596800000), offset), 10000);\n}\nexport function ticksToUnixEpochMilliseconds(ticks) {\n    return LongLib.toNumber(op_Subtraction(op_Division(ticks, 10000), 62135596800000));\n}\nexport function makeRangeStepFunction(step, last, unsigned) {\n    const stepComparedWithZero = LongLib.compare(step, unsigned ? LongLib.UZERO : LongLib.ZERO);\n    if (stepComparedWithZero === 0) {\n        throw new Error(\"The step of a range cannot be zero\");\n    }\n    const stepGreaterThanZero = stepComparedWithZero > 0;\n    return (x) => {\n        const comparedWithLast = LongLib.compare(x, last);\n        if ((stepGreaterThanZero && comparedWithLast <= 0)\n            || (!stepGreaterThanZero && comparedWithLast >= 0)) {\n            return [x, op_Addition(x, step)];\n        }\n        else {\n            return undefined;\n        }\n    };\n}\n","/**\n * DateTimeOffset functions.\n *\n * Note: Date instances are always DateObjects in local\n * timezone (because JS dates are all kinds of messed up).\n * A local date returns UTC epoc when `.getTime()` is called.\n *\n * Basically; invariant: date.getTime() always return UTC time.\n */\nimport { fromValue, ticksToUnixEpochMilliseconds, unixEpochMillisecondsToTicks } from \"./Long.js\";\nimport { compareDates, dateOffset, padWithZeros } from \"./Util.js\";\nexport const offsetRegex = /(?:Z|[+-](\\d+):?([0-5]?\\d)?)\\s*$/;\nexport function dateOffsetToString(offset) {\n    const isMinus = offset < 0;\n    offset = Math.abs(offset);\n    const hours = ~~(offset / 3600000);\n    const minutes = (offset % 3600000) / 60000;\n    return (isMinus ? \"-\" : \"+\") +\n        padWithZeros(hours, 2) + \":\" +\n        padWithZeros(minutes, 2);\n}\nexport function dateToHalfUTCString(date, half) {\n    const str = date.toISOString();\n    return half === \"first\"\n        ? str.substring(0, str.indexOf(\"T\"))\n        : str.substring(str.indexOf(\"T\") + 1, str.length - 1);\n}\nfunction dateToISOString(d, utc) {\n    if (utc) {\n        return d.toISOString();\n    }\n    else {\n        // JS Date is always local\n        const printOffset = d.kind == null ? true : d.kind === 2 /* Local */;\n        return padWithZeros(d.getFullYear(), 4) + \"-\" +\n            padWithZeros(d.getMonth() + 1, 2) + \"-\" +\n            padWithZeros(d.getDate(), 2) + \"T\" +\n            padWithZeros(d.getHours(), 2) + \":\" +\n            padWithZeros(d.getMinutes(), 2) + \":\" +\n            padWithZeros(d.getSeconds(), 2) + \".\" +\n            padWithZeros(d.getMilliseconds(), 3) +\n            (printOffset ? dateOffsetToString(d.getTimezoneOffset() * -60000) : \"\");\n    }\n}\nfunction dateToISOStringWithOffset(dateWithOffset, offset) {\n    const str = dateWithOffset.toISOString();\n    return str.substring(0, str.length - 1) + dateOffsetToString(offset);\n}\nfunction dateToStringWithCustomFormat(date, format, utc) {\n    return format.replace(/(\\w)\\1*/g, (match) => {\n        let rep = Number.NaN;\n        switch (match.substring(0, 1)) {\n            case \"y\":\n                const y = utc ? date.getUTCFullYear() : date.getFullYear();\n                rep = match.length < 4 ? y % 100 : y;\n                break;\n            case \"M\":\n                rep = (utc ? date.getUTCMonth() : date.getMonth()) + 1;\n                break;\n            case \"d\":\n                rep = utc ? date.getUTCDate() : date.getDate();\n                break;\n            case \"H\":\n                rep = utc ? date.getUTCHours() : date.getHours();\n                break;\n            case \"h\":\n                const h = utc ? date.getUTCHours() : date.getHours();\n                rep = h > 12 ? h % 12 : h;\n                break;\n            case \"m\":\n                rep = utc ? date.getUTCMinutes() : date.getMinutes();\n                break;\n            case \"s\":\n                rep = utc ? date.getUTCSeconds() : date.getSeconds();\n                break;\n            case \"f\":\n                rep = utc ? date.getUTCMilliseconds() : date.getMilliseconds();\n                break;\n        }\n        if (Number.isNaN(rep)) {\n            return match;\n        }\n        else {\n            return (rep < 10 && match.length > 1) ? \"0\" + rep : \"\" + rep;\n        }\n    });\n}\nfunction dateToStringWithOffset(date, format) {\n    var _a, _b, _c;\n    const d = new Date(date.getTime() + ((_a = date.offset) !== null && _a !== void 0 ? _a : 0));\n    if (typeof format !== \"string\") {\n        return d.toISOString().replace(/\\.\\d+/, \"\").replace(/[A-Z]|\\.\\d+/g, \" \") + dateOffsetToString(((_b = date.offset) !== null && _b !== void 0 ? _b : 0));\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\": return dateToHalfUTCString(d, \"first\");\n            case \"T\":\n            case \"t\": return dateToHalfUTCString(d, \"second\");\n            case \"O\":\n            case \"o\": return dateToISOStringWithOffset(d, ((_c = date.offset) !== null && _c !== void 0 ? _c : 0));\n            default: throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(d, format, true);\n    }\n}\nfunction dateToStringWithKind(date, format) {\n    const utc = date.kind === 1 /* UTC */;\n    if (typeof format !== \"string\") {\n        return utc ? date.toUTCString() : date.toLocaleString();\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\":\n                return utc ? dateToHalfUTCString(date, \"first\") : date.toLocaleDateString();\n            case \"T\":\n            case \"t\":\n                return utc ? dateToHalfUTCString(date, \"second\") : date.toLocaleTimeString();\n            case \"O\":\n            case \"o\":\n                return dateToISOString(date, utc);\n            default:\n                throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(date, format, utc);\n    }\n}\nexport function toString(date, format, _provider) {\n    return date.offset != null\n        ? dateToStringWithOffset(date, format)\n        : dateToStringWithKind(date, format);\n}\nexport function DateTime(value, kind) {\n    const d = new Date(value);\n    d.kind = (kind == null ? 0 /* Unspecified */ : kind) | 0;\n    return d;\n}\nexport function fromTicks(ticks, kind) {\n    ticks = fromValue(ticks);\n    kind = kind != null ? kind : 0 /* Unspecified */;\n    let date = DateTime(ticksToUnixEpochMilliseconds(ticks), kind);\n    // Ticks are local to offset (in this case, either UTC or Local/Unknown).\n    // If kind is anything but UTC, that means that the tick number was not\n    // in utc, thus getTime() cannot return UTC, and needs to be shifted.\n    if (kind !== 1 /* UTC */) {\n        date = DateTime(date.getTime() - dateOffset(date), kind);\n    }\n    return date;\n}\nexport function fromDateTimeOffset(date, kind) {\n    var _a;\n    switch (kind) {\n        case 1 /* UTC */: return DateTime(date.getTime(), 1 /* UTC */);\n        case 2 /* Local */: return DateTime(date.getTime(), 2 /* Local */);\n        default:\n            const d = DateTime(date.getTime() + ((_a = date.offset) !== null && _a !== void 0 ? _a : 0), kind);\n            return DateTime(d.getTime() - dateOffset(d), kind);\n    }\n}\nexport function getTicks(date) {\n    return unixEpochMillisecondsToTicks(date.getTime(), dateOffset(date));\n}\nexport function minValue() {\n    // This is \"0001-01-01T00:00:00.000Z\", actual JS min value is -8640000000000000\n    return DateTime(-62135596800000, 0 /* Unspecified */);\n}\nexport function maxValue() {\n    // This is \"9999-12-31T23:59:59.999Z\", actual JS max value is 8640000000000000\n    return DateTime(253402300799999, 0 /* Unspecified */);\n}\nexport function parseRaw(input) {\n    if (input === null) {\n        throw new Error(\"Value cannot be null when parsing DateTime\");\n    }\n    if (input.trim() === \"\") {\n        throw new Error(\"An empty string is not recognized as a valid DateTime\");\n    }\n    let date = new Date(input);\n    if (isNaN(date.getTime())) {\n        // Try to check strings JS Date cannot parse (see #1045, #1422)\n        // tslint:disable-next-line:max-line-length\n        const m = /^\\s*(\\d+[^\\w\\s:]\\d+[^\\w\\s:]\\d+)?\\s*(\\d+:\\d+(?::\\d+(?:\\.\\d+)?)?)?\\s*([AaPp][Mm])?\\s*([+-]\\d+(?::\\d+)?)?\\s*$/.exec(input);\n        if (m != null) {\n            let baseDate;\n            let timeInSeconds = 0;\n            if (m[2] != null) {\n                const timeParts = m[2].split(\":\");\n                timeInSeconds =\n                    parseInt(timeParts[0], 10) * 3600 +\n                        parseInt(timeParts[1] || \"0\", 10) * 60 +\n                        parseFloat(timeParts[2] || \"0\");\n                if (m[3] != null && m[3].toUpperCase() === \"PM\") {\n                    timeInSeconds += 720;\n                }\n            }\n            if (m[4] != null) { // There's an offset, parse as UTC\n                if (m[1] != null) {\n                    baseDate = new Date(m[1] + \" UTC\");\n                }\n                else {\n                    const d = new Date();\n                    baseDate = new Date(d.getUTCFullYear() + \"/\" + (d.getUTCMonth() + 1) + \"/\" + d.getUTCDate());\n                }\n                const offsetParts = m[4].substr(1).split(\":\");\n                let offsetInMinutes = parseInt(offsetParts[0], 10) * 60 + parseInt(offsetParts[1] || \"0\", 10);\n                if (m[4][0] === \"+\") {\n                    offsetInMinutes *= -1;\n                }\n                timeInSeconds += offsetInMinutes * 60;\n            }\n            else {\n                if (m[1] != null) {\n                    baseDate = new Date(m[1]);\n                }\n                else {\n                    const d = new Date();\n                    baseDate = new Date(d.getFullYear() + \"/\" + (d.getMonth() + 1) + \"/\" + d.getDate());\n                }\n            }\n            date = new Date(baseDate.getTime() + timeInSeconds * 1000);\n            // correct for daylight savings time\n            date = new Date(date.getTime() + (date.getTimezoneOffset() - baseDate.getTimezoneOffset()) * 60000);\n        }\n        else {\n            throw new Error(\"The string is not a valid Date.\");\n        }\n    }\n    return date;\n}\nexport function parse(str, detectUTC = false) {\n    const date = parseRaw(str);\n    const offset = offsetRegex.exec(str);\n    // .NET always parses DateTime as Local if there's offset info (even \"Z\")\n    // Newtonsoft.Json uses UTC if the offset is \"Z\"\n    const kind = offset != null\n        ? (detectUTC && offset[0] === \"Z\" ? 1 /* UTC */ : 2 /* Local */)\n        : 0 /* Unspecified */;\n    return DateTime(date.getTime(), kind);\n}\nexport function tryParse(v, defValue) {\n    try {\n        defValue.contents = parse(v);\n        return true;\n    }\n    catch (_err) {\n        return false;\n    }\n}\nexport function create(year, month, day, h = 0, m = 0, s = 0, ms = 0, kind) {\n    const dateValue = kind === 1 /* UTC */\n        ? Date.UTC(year, month - 1, day, h, m, s, ms)\n        : new Date(year, month - 1, day, h, m, s, ms).getTime();\n    if (isNaN(dateValue)) {\n        throw new Error(\"The parameters describe an unrepresentable Date.\");\n    }\n    const date = DateTime(dateValue, kind);\n    if (year <= 99) {\n        date.setFullYear(year, month - 1, day);\n    }\n    return date;\n}\nexport function now() {\n    return DateTime(Date.now(), 2 /* Local */);\n}\nexport function utcNow() {\n    return DateTime(Date.now(), 1 /* UTC */);\n}\nexport function today() {\n    return date(now());\n}\nexport function isLeapYear(year) {\n    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n}\nexport function daysInMonth(year, month) {\n    return month === 2\n        ? (isLeapYear(year) ? 29 : 28)\n        : (month >= 8 ? (month % 2 === 0 ? 31 : 30) : (month % 2 === 0 ? 30 : 31));\n}\nexport function toUniversalTime(date) {\n    return date.kind === 1 /* UTC */ ? date : DateTime(date.getTime(), 1 /* UTC */);\n}\nexport function toLocalTime(date) {\n    return date.kind === 2 /* Local */ ? date : DateTime(date.getTime(), 2 /* Local */);\n}\nexport function specifyKind(d, kind) {\n    return create(year(d), month(d), day(d), hour(d), minute(d), second(d), millisecond(d), kind);\n}\nexport function timeOfDay(d) {\n    return hour(d) * 3600000\n        + minute(d) * 60000\n        + second(d) * 1000\n        + millisecond(d);\n}\nexport function date(d) {\n    return create(year(d), month(d), day(d), 0, 0, 0, 0, d.kind);\n}\nexport function day(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCDate() : d.getDate();\n}\nexport function hour(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCHours() : d.getHours();\n}\nexport function millisecond(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCMilliseconds() : d.getMilliseconds();\n}\nexport function minute(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCMinutes() : d.getMinutes();\n}\nexport function month(d) {\n    return (d.kind === 1 /* UTC */ ? d.getUTCMonth() : d.getMonth()) + 1;\n}\nexport function second(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCSeconds() : d.getSeconds();\n}\nexport function year(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCFullYear() : d.getFullYear();\n}\nexport function dayOfWeek(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCDay() : d.getDay();\n}\nexport function dayOfYear(d) {\n    const _year = year(d);\n    const _month = month(d);\n    let _day = day(d);\n    for (let i = 1; i < _month; i++) {\n        _day += daysInMonth(_year, i);\n    }\n    return _day;\n}\nexport function add(d, ts) {\n    const newDate = DateTime(d.getTime() + ts, d.kind);\n    if (d.kind === 2 /* Local */) {\n        const oldTzOffset = d.getTimezoneOffset();\n        const newTzOffset = newDate.getTimezoneOffset();\n        return oldTzOffset !== newTzOffset\n            ? DateTime(newDate.getTime() + (newTzOffset - oldTzOffset) * 60000, d.kind)\n            : newDate;\n    }\n    else {\n        return newDate;\n    }\n}\nexport function addDays(d, v) {\n    return add(d, v * 86400000);\n}\nexport function addHours(d, v) {\n    return add(d, v * 3600000);\n}\nexport function addMinutes(d, v) {\n    return add(d, v * 60000);\n}\nexport function addSeconds(d, v) {\n    return add(d, v * 1000);\n}\nexport function addMilliseconds(d, v) {\n    return add(d, v);\n}\nexport function addYears(d, v) {\n    const newMonth = month(d);\n    const newYear = year(d) + v;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nexport function addMonths(d, v) {\n    let newMonth = month(d) + v;\n    let newMonth_ = 0;\n    let yearOffset = 0;\n    if (newMonth > 12) {\n        newMonth_ = newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12);\n        newMonth = newMonth_;\n    }\n    else if (newMonth < 1) {\n        newMonth_ = 12 + newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12) + (newMonth_ === 12 ? -1 : 0);\n        newMonth = newMonth_;\n    }\n    const newYear = year(d) + yearOffset;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nexport function subtract(d, that) {\n    return typeof that === \"number\"\n        ? add(d, -that)\n        : d.getTime() - that.getTime();\n}\nexport function toLongDateString(d) {\n    return d.toDateString();\n}\nexport function toShortDateString(d) {\n    return d.toLocaleDateString();\n}\nexport function toLongTimeString(d) {\n    return d.toLocaleTimeString();\n}\nexport function toShortTimeString(d) {\n    return d.toLocaleTimeString().replace(/:\\d\\d(?!:)/, \"\");\n}\nexport function equals(d1, d2) {\n    return d1.getTime() === d2.getTime();\n}\nexport const compare = compareDates;\nexport const compareTo = compareDates;\nexport function op_Addition(x, y) {\n    return add(x, y);\n}\nexport function op_Subtraction(x, y) {\n    return subtract(x, y);\n}\nexport function isDaylightSavingTime(x) {\n    const jan = new Date(x.getFullYear(), 0, 1);\n    const jul = new Date(x.getFullYear(), 6, 1);\n    return isDST(jan.getTimezoneOffset(), jul.getTimezoneOffset(), x.getTimezoneOffset());\n}\nfunction isDST(janOffset, julOffset, tOffset) {\n    return Math.min(janOffset, julOffset) === tOffset;\n}\nexport default DateTime;\n","export function create(pattern, options = 0) {\n    // Supported RegexOptions\n    // * IgnoreCase:  0x0001\n    // * Multiline:   0x0002\n    // * Singleline:  0x0010\n    // * ECMAScript:  0x0100 (ignored)\n    if ((options & ~(1 ^ 2 ^ 16 ^ 256)) !== 0) {\n        throw new Error(\"RegexOptions only supports: IgnoreCase, Multiline, Singleline and ECMAScript\");\n    }\n    let flags = \"g\";\n    flags += options & 1 ? \"i\" : \"\"; // 0x0001 RegexOptions.IgnoreCase\n    flags += options & 2 ? \"m\" : \"\";\n    flags += options & 16 ? \"s\" : \"\";\n    return new RegExp(pattern, flags);\n}\n// From http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex\nexport function escape(str) {\n    return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\nexport function unescape(str) {\n    return str.replace(/\\\\([\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|])/g, \"$1\");\n}\nexport function isMatch(str, pattern, options = 0) {\n    let reg;\n    reg = str instanceof RegExp\n        ? (reg = str, str = pattern, reg.lastIndex = options, reg)\n        : reg = create(pattern, options);\n    return reg.test(str);\n}\nexport function match(str, pattern, options = 0) {\n    let reg;\n    reg = str instanceof RegExp\n        ? (reg = str, str = pattern, reg.lastIndex = options, reg)\n        : reg = create(pattern, options);\n    return reg.exec(str);\n}\nexport function matches(str, pattern, options = 0) {\n    let reg;\n    reg = str instanceof RegExp\n        ? (reg = str, str = pattern, reg.lastIndex = options, reg)\n        : reg = create(pattern, options);\n    if (!reg.global) {\n        throw new Error(\"Non-global RegExp\"); // Prevent infinite loop\n    }\n    let m = reg.exec(str);\n    const matches = [];\n    while (m !== null) {\n        matches.push(m);\n        m = reg.exec(str);\n    }\n    return matches;\n}\nexport function options(reg) {\n    let options = 256; // ECMAScript\n    options |= reg.ignoreCase ? 1 : 0;\n    options |= reg.multiline ? 2 : 0;\n    return options;\n}\nexport function replace(reg, input, replacement, limit, offset = 0) {\n    function replacer() {\n        let res = arguments[0];\n        if (limit) {\n            limit--;\n            const match = [];\n            const len = arguments.length;\n            // arguments: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#specifying_a_function_as_a_parameter\n            // * match: matched substring\n            // * p1, p2, ...: nth capture group string\n            // * offset: offset of matched substring\n            // * string: whole string examined\n            // * groups: named capturing groups\n            //           ONLY if regex contains a named capture group AND browser supports named groups\n            // -> last element can be groups OR input string\n            // -> check if last element is string\n            const withGroups = typeof arguments[len - 1] !== \"string\";\n            let pLast = withGroups ? len - 3 : len - 2;\n            for (let i = 0; i < pLast; i++) {\n                match.push(arguments[i]);\n            }\n            match.index = arguments[pLast++];\n            match.input = arguments[pLast++];\n            if (withGroups) {\n                match.groups = arguments[pLast];\n            }\n            res = replacement(match);\n        }\n        return res;\n    }\n    if (typeof reg === \"string\") {\n        const tmp = reg;\n        reg = create(input, limit !== null && limit !== void 0 ? limit : 0);\n        input = tmp;\n        limit = undefined;\n    }\n    if (typeof replacement === \"function\") {\n        limit = limit == null ? -1 : limit;\n        return input.substring(0, offset) + input.substring(offset).replace(reg, replacer);\n    }\n    else {\n        replacement =\n            replacement\n                // $0 doesn't work with JS regex, see #1155\n                .replace(/\\$0/g, (_s) => \"$&\")\n                // named groups in replacement are `${name}` in .Net, but `$<name>` in JS (in regex: groups are `(?<name>...)` in both)\n                .replace(/\\${([^}]+)}/g, \"\\$<$1>\");\n        if (limit != null) {\n            let m;\n            const sub1 = input.substring(offset);\n            const _matches = matches(reg, sub1);\n            const sub2 = matches.length > limit ? (m = _matches[limit - 1], sub1.substring(0, m.index + m[0].length)) : sub1;\n            return input.substring(0, offset) + sub2.replace(reg, replacement)\n                + input.substring(offset + sub2.length);\n        }\n        else {\n            return input.replace(reg, replacement);\n        }\n    }\n}\nexport function split(reg, input, limit, offset = 0) {\n    if (typeof reg === \"string\") {\n        const tmp = reg;\n        reg = create(input, limit !== null && limit !== void 0 ? limit : 0);\n        input = tmp;\n        limit = undefined;\n    }\n    input = input.substring(offset);\n    return input.split(reg, limit);\n}\n","import { toString as dateToString } from \"./Date.js\";\nimport { compare as numericCompare, isNumeric, multiply, toExponential, toFixed, toHex, toPrecision } from \"./Numeric.js\";\nimport { escape } from \"./RegExp.js\";\nimport { FSharpRef, toString } from \"./Types.js\";\nconst fsFormatRegExp = /(^|[^%])%([0+\\- ]*)(\\*|\\d+)?(?:\\.(\\d+))?(\\w)/;\nconst interpolateRegExp = /(?:(^|[^%])%([0+\\- ]*)(\\d+)?(?:\\.(\\d+))?(\\w))?%P\\(\\)/g;\nconst formatRegExp = /\\{(\\d+)(,-?\\d+)?(?:\\:([a-zA-Z])(\\d{0,2})|\\:(.+?))?\\}/g;\nfunction isLessThan(x, y) {\n    return numericCompare(x, y) < 0;\n}\nfunction cmp(x, y, ic) {\n    function isIgnoreCase(i) {\n        return i === true ||\n            i === 1 /* CurrentCultureIgnoreCase */ ||\n            i === 3 /* InvariantCultureIgnoreCase */ ||\n            i === 5 /* OrdinalIgnoreCase */;\n    }\n    function isOrdinal(i) {\n        return i === 4 /* Ordinal */ ||\n            i === 5 /* OrdinalIgnoreCase */;\n    }\n    if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    if (y == null) {\n        return 1;\n    } // everything is bigger than null\n    if (isOrdinal(ic)) {\n        if (isIgnoreCase(ic)) {\n            x = x.toLowerCase();\n            y = y.toLowerCase();\n        }\n        return (x === y) ? 0 : (x < y ? -1 : 1);\n    }\n    else {\n        if (isIgnoreCase(ic)) {\n            x = x.toLocaleLowerCase();\n            y = y.toLocaleLowerCase();\n        }\n        return x.localeCompare(y);\n    }\n}\nexport function compare(...args) {\n    switch (args.length) {\n        case 2: return cmp(args[0], args[1], false);\n        case 3: return cmp(args[0], args[1], args[2]);\n        case 4: return cmp(args[0], args[1], args[2] === true);\n        case 5: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), false);\n        case 6: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5]);\n        case 7: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5] === true);\n        default: throw new Error(\"String.compare: Unsupported number of parameters\");\n    }\n}\nexport function compareOrdinal(x, y) {\n    return cmp(x, y, 4 /* Ordinal */);\n}\nexport function compareTo(x, y) {\n    return cmp(x, y, 0 /* CurrentCulture */);\n}\nexport function startsWith(str, pattern, ic) {\n    if (str.length >= pattern.length) {\n        return cmp(str.substr(0, pattern.length), pattern, ic) === 0;\n    }\n    return false;\n}\nexport function indexOfAny(str, anyOf, ...args) {\n    if (str == null || str === \"\") {\n        return -1;\n    }\n    const startIndex = (args.length > 0) ? args[0] : 0;\n    if (startIndex < 0) {\n        throw new Error(\"Start index cannot be negative\");\n    }\n    const length = (args.length > 1) ? args[1] : str.length - startIndex;\n    if (length < 0) {\n        throw new Error(\"Length cannot be negative\");\n    }\n    if (length > str.length - startIndex) {\n        throw new Error(\"Invalid startIndex and length\");\n    }\n    str = str.substr(startIndex, length);\n    for (const c of anyOf) {\n        const index = str.indexOf(c);\n        if (index > -1) {\n            return index + startIndex;\n        }\n    }\n    return -1;\n}\nexport function printf(input) {\n    return {\n        input,\n        cont: fsFormat(input),\n    };\n}\nexport function interpolate(input, values) {\n    let i = 0;\n    return input.replace(interpolateRegExp, (_, prefix, flags, padLength, precision, format) => {\n        return formatReplacement(values[i++], prefix, flags, padLength, precision, format);\n    });\n}\nfunction continuePrint(cont, arg) {\n    return typeof arg === \"string\" ? cont(arg) : arg.cont(cont);\n}\nexport function toConsole(arg) {\n    // Don't remove the lambda here, see #1357\n    return continuePrint((x) => console.log(x), arg);\n}\nexport function toConsoleError(arg) {\n    return continuePrint((x) => console.error(x), arg);\n}\nexport function toText(arg) {\n    return continuePrint((x) => x, arg);\n}\nexport function toFail(arg) {\n    return continuePrint((x) => {\n        throw new Error(x);\n    }, arg);\n}\nfunction formatReplacement(rep, prefix, flags, padLength, precision, format) {\n    let sign = \"\";\n    flags = flags || \"\";\n    format = format || \"\";\n    if (isNumeric(rep)) {\n        if (format.toLowerCase() !== \"x\") {\n            if (isLessThan(rep, 0)) {\n                rep = multiply(rep, -1);\n                sign = \"-\";\n            }\n            else {\n                if (flags.indexOf(\" \") >= 0) {\n                    sign = \" \";\n                }\n                else if (flags.indexOf(\"+\") >= 0) {\n                    sign = \"+\";\n                }\n            }\n        }\n        precision = precision == null ? null : parseInt(precision, 10);\n        switch (format) {\n            case \"f\":\n            case \"F\":\n                precision = precision != null ? precision : 6;\n                rep = toFixed(rep, precision);\n                break;\n            case \"g\":\n            case \"G\":\n                rep = precision != null ? toPrecision(rep, precision) : toPrecision(rep);\n                break;\n            case \"e\":\n            case \"E\":\n                rep = precision != null ? toExponential(rep, precision) : toExponential(rep);\n                break;\n            case \"x\":\n                rep = toHex(rep);\n                break;\n            case \"X\":\n                rep = toHex(rep).toUpperCase();\n                break;\n            default: // AOid\n                rep = String(rep);\n                break;\n        }\n    }\n    else if (rep instanceof Date) {\n        rep = dateToString(rep);\n    }\n    else {\n        rep = toString(rep);\n    }\n    padLength = typeof padLength === \"number\" ? padLength : parseInt(padLength, 10);\n    if (!isNaN(padLength)) {\n        const zeroFlag = flags.indexOf(\"0\") >= 0; // Use '0' for left padding\n        const minusFlag = flags.indexOf(\"-\") >= 0; // Right padding\n        const ch = minusFlag || !zeroFlag ? \" \" : \"0\";\n        if (ch === \"0\") {\n            rep = padLeft(rep, padLength - sign.length, ch, minusFlag);\n            rep = sign + rep;\n        }\n        else {\n            rep = padLeft(sign + rep, padLength, ch, minusFlag);\n        }\n    }\n    else {\n        rep = sign + rep;\n    }\n    return prefix ? prefix + rep : rep;\n}\nfunction formatOnce(str2, rep, padRef) {\n    return str2.replace(fsFormatRegExp, (match, prefix, flags, padLength, precision, format) => {\n        if (padRef.contents != null) {\n            padLength = padRef.contents;\n            padRef.contents = null;\n        }\n        else if (padLength === \"*\") {\n            if (rep < 0) {\n                throw new Error(\"Non-negative number required\");\n            }\n            padRef.contents = rep;\n            return match;\n        }\n        const once = formatReplacement(rep, prefix, flags, padLength, precision, format);\n        return once.replace(/%/g, \"%%\");\n    });\n}\nfunction createPrinter(str, cont, padRef = new FSharpRef(null)) {\n    return (...args) => {\n        // Make a copy as the function may be used several times\n        let strCopy = str;\n        for (const arg of args) {\n            strCopy = formatOnce(strCopy, arg, padRef);\n        }\n        return fsFormatRegExp.test(strCopy)\n            ? createPrinter(strCopy, cont, padRef)\n            : cont(strCopy.replace(/%%/g, \"%\"));\n    };\n}\nexport function fsFormat(str) {\n    return (cont) => {\n        return fsFormatRegExp.test(str)\n            ? createPrinter(str, cont)\n            : cont(str);\n    };\n}\nexport function format(str, ...args) {\n    if (typeof str === \"object\" && args.length > 0) {\n        // Called with culture info\n        str = args[0];\n        args.shift();\n    }\n    return str.replace(formatRegExp, (_, idx, padLength, format, precision, pattern) => {\n        let rep = args[idx];\n        if (isNumeric(rep)) {\n            precision = precision == null ? null : parseInt(precision, 10);\n            switch (format) {\n                case \"f\":\n                case \"F\":\n                    precision = precision != null ? precision : 2;\n                    rep = toFixed(rep, precision);\n                    break;\n                case \"g\":\n                case \"G\":\n                    rep = precision != null ? toPrecision(rep, precision) : toPrecision(rep);\n                    break;\n                case \"e\":\n                case \"E\":\n                    rep = precision != null ? toExponential(rep, precision) : toExponential(rep);\n                    break;\n                case \"p\":\n                case \"P\":\n                    precision = precision != null ? precision : 2;\n                    rep = toFixed(multiply(rep, 100), precision) + \" %\";\n                    break;\n                case \"d\":\n                case \"D\":\n                    rep = precision != null ? padLeft(String(rep), precision, \"0\") : String(rep);\n                    break;\n                case \"x\":\n                case \"X\":\n                    rep = precision != null ? padLeft(toHex(rep), precision, \"0\") : toHex(rep);\n                    if (format === \"X\") {\n                        rep = rep.toUpperCase();\n                    }\n                    break;\n                default:\n                    if (pattern) {\n                        let sign = \"\";\n                        rep = pattern.replace(/(0+)(\\.0+)?/, (_, intPart, decimalPart) => {\n                            if (isLessThan(rep, 0)) {\n                                rep = multiply(rep, -1);\n                                sign = \"-\";\n                            }\n                            rep = toFixed(rep, decimalPart != null ? decimalPart.length - 1 : 0);\n                            return padLeft(rep, (intPart || \"\").length - sign.length + (decimalPart != null ? decimalPart.length : 0), \"0\");\n                        });\n                        rep = sign + rep;\n                    }\n            }\n        }\n        else if (rep instanceof Date) {\n            rep = dateToString(rep, pattern || format);\n        }\n        else {\n            rep = toString(rep);\n        }\n        padLength = parseInt((padLength || \" \").substring(1), 10);\n        if (!isNaN(padLength)) {\n            rep = padLeft(String(rep), Math.abs(padLength), \" \", padLength < 0);\n        }\n        return rep;\n    });\n}\nexport function endsWith(str, search) {\n    const idx = str.lastIndexOf(search);\n    return idx >= 0 && idx === str.length - search.length;\n}\nexport function initialize(n, f) {\n    if (n < 0) {\n        throw new Error(\"String length must be non-negative\");\n    }\n    const xs = new Array(n);\n    for (let i = 0; i < n; i++) {\n        xs[i] = f(i);\n    }\n    return xs.join(\"\");\n}\nexport function insert(str, startIndex, value) {\n    if (startIndex < 0 || startIndex > str.length) {\n        throw new Error(\"startIndex is negative or greater than the length of this instance.\");\n    }\n    return str.substring(0, startIndex) + value + str.substring(startIndex);\n}\nexport function isNullOrEmpty(str) {\n    return typeof str !== \"string\" || str.length === 0;\n}\nexport function isNullOrWhiteSpace(str) {\n    return typeof str !== \"string\" || /^\\s*$/.test(str);\n}\nexport function concat(...xs) {\n    return xs.map((x) => String(x)).join(\"\");\n}\nexport function join(delimiter, xs) {\n    if (Array.isArray(xs)) {\n        return xs.join(delimiter);\n    }\n    else {\n        return Array.from(xs).join(delimiter);\n    }\n}\nexport function joinWithIndices(delimiter, xs, startIndex, count) {\n    const endIndexPlusOne = startIndex + count;\n    if (endIndexPlusOne > xs.length) {\n        throw new Error(\"Index and count must refer to a location within the buffer.\");\n    }\n    return xs.slice(startIndex, endIndexPlusOne).join(delimiter);\n}\nfunction notSupported(name) {\n    throw new Error(\"The environment doesn't support '\" + name + \"', please use a polyfill.\");\n}\nexport function toBase64String(inArray) {\n    let str = \"\";\n    for (let i = 0; i < inArray.length; i++) {\n        str += String.fromCharCode(inArray[i]);\n    }\n    return typeof btoa === \"function\" ? btoa(str) : notSupported(\"btoa\");\n}\nexport function fromBase64String(b64Encoded) {\n    const binary = typeof atob === \"function\" ? atob(b64Encoded) : notSupported(\"atob\");\n    const bytes = new Uint8Array(binary.length);\n    for (let i = 0; i < binary.length; i++) {\n        bytes[i] = binary.charCodeAt(i);\n    }\n    return bytes;\n}\nexport function padLeft(str, len, ch, isRight) {\n    ch = ch || \" \";\n    len = len - str.length;\n    for (let i = 0; i < len; i++) {\n        str = isRight ? str + ch : ch + str;\n    }\n    return str;\n}\nexport function padRight(str, len, ch) {\n    return padLeft(str, len, ch, true);\n}\nexport function remove(str, startIndex, count) {\n    if (startIndex >= str.length) {\n        throw new Error(\"startIndex must be less than length of string\");\n    }\n    if (typeof count === \"number\" && (startIndex + count) > str.length) {\n        throw new Error(\"Index and count must refer to a location within the string.\");\n    }\n    return str.slice(0, startIndex) + (typeof count === \"number\" ? str.substr(startIndex + count) : \"\");\n}\nexport function replace(str, search, replace) {\n    return str.replace(new RegExp(escape(search), \"g\"), replace);\n}\nexport function replicate(n, x) {\n    return initialize(n, () => x);\n}\nexport function getCharAtIndex(input, index) {\n    if (index < 0 || index >= input.length) {\n        throw new Error(\"Index was outside the bounds of the array.\");\n    }\n    return input[index];\n}\nexport function split(str, splitters, count, removeEmpty) {\n    count = typeof count === \"number\" ? count : undefined;\n    removeEmpty = typeof removeEmpty === \"number\" ? removeEmpty : undefined;\n    if (count && count < 0) {\n        throw new Error(\"Count cannot be less than zero\");\n    }\n    if (count === 0) {\n        return [];\n    }\n    if (!Array.isArray(splitters)) {\n        if (removeEmpty === 0) {\n            return str.split(splitters, count);\n        }\n        const len = arguments.length;\n        splitters = Array(len - 1);\n        for (let key = 1; key < len; key++) {\n            splitters[key - 1] = arguments[key];\n        }\n    }\n    splitters = splitters.map((x) => escape(x));\n    splitters = splitters.length > 0 ? splitters : [\" \"];\n    let i = 0;\n    const splits = [];\n    const reg = new RegExp(splitters.join(\"|\"), \"g\");\n    while (count == null || count > 1) {\n        const m = reg.exec(str);\n        if (m === null) {\n            break;\n        }\n        if (!removeEmpty || (m.index - i) > 0) {\n            count = count != null ? count - 1 : count;\n            splits.push(str.substring(i, m.index));\n        }\n        i = reg.lastIndex;\n    }\n    if (!removeEmpty || (str.length - i) > 0) {\n        splits.push(str.substring(i));\n    }\n    return splits;\n}\nexport function trim(str, ...chars) {\n    if (chars.length === 0) {\n        return str.trim();\n    }\n    const pattern = \"[\" + escape(chars.join(\"\")) + \"]+\";\n    return str.replace(new RegExp(\"^\" + pattern), \"\").replace(new RegExp(pattern + \"$\"), \"\");\n}\nexport function trimStart(str, ...chars) {\n    return chars.length === 0\n        ? str.trimStart()\n        : str.replace(new RegExp(\"^[\" + escape(chars.join(\"\")) + \"]+\"), \"\");\n}\nexport function trimEnd(str, ...chars) {\n    return chars.length === 0\n        ? str.trimEnd()\n        : str.replace(new RegExp(\"[\" + escape(chars.join(\"\")) + \"]+$\"), \"\");\n}\nexport function filter(pred, x) {\n    return x.split(\"\").filter((c) => pred(c)).join(\"\");\n}\nexport function substring(str, startIndex, length) {\n    if ((startIndex + (length || 0) > str.length)) {\n        throw new Error(\"Invalid startIndex and/or length\");\n    }\n    return length != null ? str.substr(startIndex, length) : str.substr(startIndex);\n}\n","// https://github.com/MikeMcl/big.js/blob/01b3ce3a6b0ba7b42442ea48ec4ffc88d1669ec4/big.mjs\n/* tslint:disable */\nimport { combineHashCodes } from \"../Util.js\";\nimport { symbol } from \"../Numeric.js\";\n// The shared prototype object.\nvar P = {\n    GetHashCode() { return combineHashCodes([this.s, this.e].concat(this.c)); },\n    Equals(x) { return !this.cmp(x); },\n    CompareTo(x) { return this.cmp(x); },\n    [symbol]() {\n        const _this = this;\n        return {\n            multiply: y => _this.mul(y),\n            toPrecision: sd => _this.toPrecision(sd),\n            toExponential: dp => _this.toExponential(dp),\n            toFixed: dp => _this.toFixed(dp),\n            toHex: () => (Number(_this) >>> 0).toString(16),\n        };\n    }\n};\n/*\n *  big.js v5.2.2\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\n *  Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\n *  https://github.com/MikeMcl/big.js/LICENCE\n */\n/************************************** EDITABLE DEFAULTS *****************************************/\n// The default values below must be integers within the stated ranges.\n/*\n * The maximum number of decimal places (DP) of the results of operations involving division:\n * div and sqrt, and pow with negative exponents.\n */\nvar DP = 28, // 0 to MAX_DP\n/*\n * The rounding mode (RM) used when rounding to the above decimal places.\n *\n *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\n *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\n *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\n *  3  Away from zero.                                  (ROUND_UP)\n */\nRM = 1, // 0, 1, 2 or 3\n// The maximum value of DP and Big.DP.\nMAX_DP = 1E6, // 0 to 1000000\n// The maximum magnitude of the exponent argument to the pow method.\nMAX_POWER = 1E6, // 1 to 1000000\n/*\n * The negative exponent (NE) at and beneath which toString returns exponential notation.\n * (JavaScript numbers: -7)\n * -1000000 is the minimum recommended exponent value of a Big.\n */\nNE = -29, // 0 to -1000000\n/*\n * The positive exponent (PE) at and above which toString returns exponential notation.\n * (JavaScript numbers: 21)\n * 1000000 is the maximum recommended exponent value of a Big.\n * (This limit is not enforced or checked.)\n */\nPE = 29, // 0 to 1000000\n/**************************************************************************************************/\n// Error messages.\nNAME = '[big.js] ', INVALID = NAME + 'Invalid ', INVALID_DP = INVALID + 'decimal places', INVALID_RM = INVALID + 'rounding mode', DIV_BY_ZERO = NAME + 'Division by zero', UNDEFINED = void 0, NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\n/*\n * Create and return a Big constructor.\n *\n */\nfunction _Big_() {\n    /*\n     * The Big constructor and exported function.\n     * Create and return a new instance of a Big number object.\n     *\n     * n {number|string|Big} A numeric value.\n     */\n    function Big(n) {\n        var x = this;\n        // Enable constructor usage without new.\n        if (!(x instanceof Big))\n            return n === UNDEFINED ? _Big_() : new Big(n);\n        // Duplicate.\n        if (n instanceof Big) {\n            x.s = n.s;\n            x.e = n.e;\n            x.c = n.c.slice();\n            normalize(x);\n        }\n        else {\n            parse(x, n);\n        }\n        /*\n         * Retain a reference to this Big constructor, and shadow Big.prototype.constructor which\n         * points to Object.\n         */\n        x.constructor = Big;\n    }\n    Big.prototype = P;\n    Big.DP = DP;\n    Big.RM = RM;\n    Big.NE = NE;\n    Big.PE = PE;\n    Big.version = '5.2.2';\n    return Big;\n}\nfunction normalize(x) {\n    x = round(x, DP, 0);\n    if (x.c.length > 1 && !x.c[0]) {\n        let i = x.c.findIndex(x => x);\n        x.c = x.c.slice(i);\n        x.e = x.e - i;\n    }\n}\n/*\n * Parse the number or string value passed to a Big constructor.\n *\n * x {Big} A Big number instance.\n * n {number|string} A numeric value.\n */\nfunction parse(x, n) {\n    var e, i, nl;\n    // Minus zero?\n    if (n === 0 && 1 / n < 0)\n        n = '-0';\n    else if (!NUMERIC.test(n += ''))\n        throw Error(INVALID + 'number');\n    // Determine sign.\n    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\n    // Decimal point?\n    if ((e = n.indexOf('.')) > -1)\n        n = n.replace('.', '');\n    // Exponential form?\n    if ((i = n.search(/e/i)) > 0) {\n        // Determine exponent.\n        if (e < 0)\n            e = i;\n        e += +n.slice(i + 1);\n        n = n.substring(0, i);\n    }\n    else if (e < 0) {\n        // Integer.\n        e = n.length;\n    }\n    nl = n.length;\n    // Determine leading zeros before decimal point.\n    for (i = 0; i < e && i < nl && n.charAt(i) == '0';)\n        ++i;\n    // older version (ignores decimal point).\n    // // Determine leading zeros.\n    // for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\n    if (i == nl) {\n        // Zero.\n        x.c = [x.e = 0];\n    }\n    else {\n        x.e = e - i - 1;\n        x.c = [];\n        // Convert string to array of digits without leading zeros\n        for (e = 0; i < nl;)\n            x.c[e++] = +n.charAt(i++);\n        // older version (doesn't keep trailing zeroes).\n        // // Determine trailing zeros.\n        // for (; nl > 0 && n.charAt(--nl) == '0';);\n        // // Convert string to array of digits without leading/trailing zeros.\n        // for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\n    }\n    x = round(x, Big.DP, Big.RM);\n    return x;\n}\n/*\n * Round Big x to a maximum of dp decimal places using rounding mode rm.\n * Called by stringify, P.div, P.round and P.sqrt.\n *\n * x {Big} The Big to round.\n * dp {number} Integer, 0 to MAX_DP inclusive.\n * rm {number} 0, 1, 2 or 3 (DOWN, HALF_UP, HALF_EVEN, UP)\n * [more] {boolean} Whether the result of division was truncated.\n */\nfunction round(x, dp, rm, more) {\n    var xc = x.c, i = x.e + dp + 1;\n    if (i < xc.length) {\n        if (rm === 1) {\n            // xc[i] is the digit after the digit that may be rounded up.\n            more = xc[i] >= 5;\n        }\n        else if (rm === 2) {\n            more = xc[i] > 5 || xc[i] == 5 &&\n                (more || i < 0 || xc[i + 1] !== UNDEFINED || xc[i - 1] & 1);\n        }\n        else if (rm === 3) {\n            const isZero = xc.findIndex((xci, idx) => idx >= i && xci > 0) < 0;\n            more = more || !isZero;\n        }\n        else {\n            more = false;\n            if (rm !== 0)\n                throw Error(INVALID_RM);\n        }\n        if (i < 1) {\n            xc.length = 1;\n            if (more) {\n                // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n                x.e = -dp;\n                xc[0] = 1;\n            }\n            else {\n                // Zero.\n                xc[0] = x.e = 0;\n            }\n        }\n        else {\n            // Remove any digits after the required decimal places.\n            xc.length = i--;\n            // Round up?\n            if (more) {\n                // Rounding up may mean the previous digit has to be rounded up.\n                for (; ++xc[i] > 9;) {\n                    xc[i] = 0;\n                    if (!i--) {\n                        ++x.e;\n                        xc.unshift(1);\n                    }\n                }\n            }\n            // Remove trailing zeros.\n            for (i = xc.length; !xc[--i];)\n                xc.pop();\n        }\n    }\n    else if (rm < 0 || rm > 3 || rm !== ~~rm) {\n        throw Error(INVALID_RM);\n    }\n    return x;\n}\n/*\n * Return a string representing the value of Big x in normal or exponential notation.\n * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\n *\n * x {Big}\n * id? {number} Caller id.\n *         1 toExponential\n *         2 toFixed\n *         3 toPrecision\n *         4 valueOf\n * n? {number|undefined} Caller's argument.\n * k? {number|undefined}\n */\nfunction stringify(x, id, n, k) {\n    var e, s, Big = x.constructor, z = !x.c[0];\n    if (n !== UNDEFINED) {\n        if (n !== ~~n || n < (id == 3) || n > MAX_DP) {\n            throw Error(id == 3 ? INVALID + 'precision' : INVALID_DP);\n        }\n        x = new Big(x);\n        // The index of the digit that may be rounded up.\n        n = k - x.e;\n        // Round?\n        if (x.c.length > ++k)\n            round(x, n, Big.RM);\n        // toFixed: recalculate k as x.e may have changed if value rounded up.\n        if (id == 2)\n            k = x.e + n + 1;\n        // Append zeros?\n        for (; x.c.length < k;)\n            x.c.push(0);\n    }\n    e = x.e;\n    s = x.c.join('');\n    n = s.length;\n    // Exponential notation?\n    if (id != 2 && (id == 1 || id == 3 && k <= e || e <= Big.NE || e >= Big.PE)) {\n        s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\n        // Normal notation.\n    }\n    else if (e < 0) {\n        for (; ++e;)\n            s = '0' + s;\n        s = '0.' + s;\n    }\n    else if (e > 0) {\n        if (++e > n)\n            for (e -= n; e--;)\n                s += '0';\n        else if (e < n)\n            s = s.slice(0, e) + '.' + s.slice(e);\n    }\n    else if (n > 1) {\n        s = s.charAt(0) + '.' + s.slice(1);\n    }\n    return x.s < 0 && (!z || id == 4) ? '-' + s : s;\n}\n// Prototype/instance methods\n/*\n * Return a new Big whose value is the absolute value of this Big.\n */\nP.abs = function () {\n    var x = new this.constructor(this);\n    x.s = 1;\n    return x;\n};\n/*\n * Return 1 if the value of this Big is greater than the value of Big y,\n *       -1 if the value of this Big is less than the value of Big y, or\n *        0 if they have the same value.\n*/\nP.cmp = function (y) {\n    var isneg, Big = this.constructor, x = new Big(this), y = new Big(y), xc = x.c, yc = y.c, i = x.s, j = y.s, k = x.e, l = y.e;\n    // Either zero?\n    if (!xc[0] || !yc[0])\n        return !xc[0] ? !yc[0] ? 0 : -j : i;\n    // Signs differ?\n    if (i != j)\n        return i;\n    isneg = i < 0;\n    // Compare exponents.\n    if (k != l)\n        return k > l ^ isneg ? 1 : -1;\n    // Compare digit by digit.\n    j = Math.max(xc.length, yc.length);\n    for (i = 0; i < j; i++) {\n        k = i < xc.length ? xc[i] : 0;\n        l = i < yc.length ? yc[i] : 0;\n        if (k != l)\n            return k > l ^ isneg ? 1 : -1;\n    }\n    return 0;\n    // old version (doesn't compare well trailing zeroes, e.g. 1.0 with 1.00)\n    // j = (k = xc.length) < (l = yc.length) ? k : l;\n    // // Compare digit by digit.\n    // for (i = -1; ++i < j;) {\n    //   if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\n    // }\n    // // Compare lengths.\n    // return k == l ? 0 : k > l ^ isneg ? 1 : -1;\n};\n/*\n * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\n * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n */\nP.div = function (y) {\n    var Big = this.constructor, x = new Big(this), y = new Big(y), a = x.c, // dividend\n    b = y.c, // divisor\n    k = x.s == y.s ? 1 : -1, dp = Big.DP;\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP)\n        throw Error(INVALID_DP);\n    // Divisor is zero?\n    if (!b[0])\n        throw Error(DIV_BY_ZERO);\n    // Dividend is 0? Return +-0.\n    if (!a[0])\n        return new Big(k * 0);\n    var bl, bt, n, cmp, ri, bz = b.slice(), ai = bl = b.length, al = a.length, r = a.slice(0, bl), // remainder\n    rl = r.length, q = y, // quotient\n    qc = q.c = [], qi = 0, d = dp + (q.e = x.e - y.e) + 1; // number of digits of the result\n    q.s = k;\n    k = d < 0 ? 0 : d;\n    // Create version of divisor with leading zero.\n    bz.unshift(0);\n    // Add zeros to make remainder as long as divisor.\n    for (; rl++ < bl;)\n        r.push(0);\n    do {\n        // n is how many times the divisor goes into current remainder.\n        for (n = 0; n < 10; n++) {\n            // Compare divisor and remainder.\n            if (bl != (rl = r.length)) {\n                cmp = bl > rl ? 1 : -1;\n            }\n            else {\n                for (ri = -1, cmp = 0; ++ri < bl;) {\n                    if (b[ri] != r[ri]) {\n                        cmp = b[ri] > r[ri] ? 1 : -1;\n                        break;\n                    }\n                }\n            }\n            // If divisor < remainder, subtract divisor from remainder.\n            if (cmp < 0) {\n                // Remainder can't be more than 1 digit longer than divisor.\n                // Equalise lengths using divisor with extra leading zero?\n                for (bt = rl == bl ? b : bz; rl;) {\n                    if (r[--rl] < bt[rl]) {\n                        ri = rl;\n                        for (; ri && !r[--ri];)\n                            r[ri] = 9;\n                        --r[ri];\n                        r[rl] += 10;\n                    }\n                    r[rl] -= bt[rl];\n                }\n                for (; !r[0];)\n                    r.shift();\n            }\n            else {\n                break;\n            }\n        }\n        // Add the digit n to the result array.\n        qc[qi++] = cmp ? n : ++n;\n        // Update the remainder.\n        if (r[0] && cmp)\n            r[rl] = a[ai] || 0;\n        else\n            r = [a[ai]];\n    } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\n    // Leading zero? Do not remove if result is simply zero (qi == 1).\n    if (!qc[0] && qi != 1) {\n        // There can't be more than one zero.\n        qc.shift();\n        q.e--;\n    }\n    // Round?\n    if (qi > d)\n        round(q, dp, Big.RM, r[0] !== UNDEFINED);\n    return q;\n};\n/*\n * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\n */\nP.eq = function (y) {\n    return !this.cmp(y);\n};\n/*\n * Return true if the value of this Big is greater than the value of Big y, otherwise return\n * false.\n */\nP.gt = function (y) {\n    return this.cmp(y) > 0;\n};\n/*\n * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\n * return false.\n */\nP.gte = function (y) {\n    return this.cmp(y) > -1;\n};\n/*\n * Return true if the value of this Big is less than the value of Big y, otherwise return false.\n */\nP.lt = function (y) {\n    return this.cmp(y) < 0;\n};\n/*\n * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\n * return false.\n */\nP.lte = function (y) {\n    return this.cmp(y) < 1;\n};\n/*\n * Return a new Big whose value is the value of this Big minus the value of Big y.\n */\nP.minus = P.sub = function (y) {\n    var i, j, t, xlty, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;\n    // Signs differ?\n    if (a != b) {\n        y.s = -b;\n        return x.plus(y);\n    }\n    var xc = x.c.slice(), xe = x.e, yc = y.c, ye = y.e;\n    // Either zero?\n    if (!xc[0] || !yc[0]) {\n        // y is non-zero? x is non-zero? Or both are zero.\n        return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);\n    }\n    // Determine which is the bigger number. Prepend zeros to equalise exponents.\n    if (a = xe - ye) {\n        if (xlty = a < 0) {\n            a = -a;\n            t = xc;\n        }\n        else {\n            ye = xe;\n            t = yc;\n        }\n        t.reverse();\n        for (b = a; b--;)\n            t.push(0);\n        t.reverse();\n    }\n    else {\n        // Exponents equal. Check digit by digit.\n        j = ((xlty = xc.length < yc.length) ? xc : yc).length;\n        for (a = b = 0; b < j; b++) {\n            if (xc[b] != yc[b]) {\n                xlty = xc[b] < yc[b];\n                break;\n            }\n        }\n    }\n    // x < y? Point xc to the array of the bigger number.\n    if (xlty) {\n        t = xc;\n        xc = yc;\n        yc = t;\n        y.s = -y.s;\n    }\n    /*\n     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\n     * needs to start at yc.length.\n     */\n    if ((b = (j = yc.length) - (i = xc.length)) > 0)\n        for (; b--;)\n            xc[i++] = 0;\n    // Subtract yc from xc.\n    for (b = i; j > a;) {\n        if (xc[--j] < yc[j]) {\n            for (i = j; i && !xc[--i];)\n                xc[i] = 9;\n            --xc[i];\n            xc[j] += 10;\n        }\n        xc[j] -= yc[j];\n    }\n    // Remove trailing zeros.\n    for (; xc[--b] === 0;)\n        xc.pop();\n    // Remove leading zeros and adjust exponent accordingly.\n    for (; xc[0] === 0;) {\n        xc.shift();\n        --ye;\n    }\n    if (!xc[0]) {\n        // n - n = +0\n        y.s = 1;\n        // Result must be zero.\n        xc = [ye = 0];\n    }\n    y.c = xc;\n    y.e = ye;\n    return y;\n};\n/*\n * Return a new Big whose value is the value of this Big modulo the value of Big y.\n */\nP.mod = function (y) {\n    var ygtx, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;\n    if (!y.c[0])\n        throw Error(DIV_BY_ZERO);\n    x.s = y.s = 1;\n    ygtx = y.cmp(x) == 1;\n    x.s = a;\n    y.s = b;\n    if (ygtx)\n        return new Big(x);\n    a = Big.DP;\n    b = Big.RM;\n    Big.DP = Big.RM = 0;\n    x = x.div(y);\n    Big.DP = a;\n    Big.RM = b;\n    return this.minus(x.times(y));\n};\n/*\n * Return a new Big whose value is the value of this Big plus the value of Big y.\n */\nP.plus = P.add = function (y) {\n    var t, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;\n    // Signs differ?\n    if (a != b) {\n        y.s = -b;\n        return x.minus(y);\n    }\n    var xe = x.e, xc = x.c, ye = y.e, yc = y.c;\n    // Either zero? y is non-zero? x is non-zero? Or both are zero.\n    if (!xc[0] || !yc[0])\n        return yc[0] ? y : new Big(xc[0] ? x : a * 0);\n    xc = xc.slice();\n    // Prepend zeros to equalise exponents.\n    // Note: reverse faster than unshifts.\n    if (a = xe - ye) {\n        if (a > 0) {\n            ye = xe;\n            t = yc;\n        }\n        else {\n            a = -a;\n            t = xc;\n        }\n        t.reverse();\n        for (; a--;)\n            t.push(0);\n        t.reverse();\n    }\n    // Point xc to the longer array.\n    if (xc.length - yc.length < 0) {\n        t = yc;\n        yc = xc;\n        xc = t;\n    }\n    a = yc.length;\n    // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\n    for (b = 0; a; xc[a] %= 10)\n        b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0;\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n    if (b) {\n        xc.unshift(b);\n        ++ye;\n    }\n    // Remove trailing zeros.\n    for (a = xc.length; xc[--a] === 0;)\n        xc.pop();\n    y.c = xc;\n    y.e = ye;\n    return y;\n};\n/*\n * Return a Big whose value is the value of this Big raised to the power n.\n * If n is negative, round to a maximum of Big.DP decimal places using rounding\n * mode Big.RM.\n *\n * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\n */\nP.pow = function (n) {\n    var Big = this.constructor, x = new Big(this), y = new Big(1), one = new Big(1), isneg = n < 0;\n    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER)\n        throw Error(INVALID + 'exponent');\n    if (isneg)\n        n = -n;\n    for (;;) {\n        if (n & 1)\n            y = y.times(x);\n        n >>= 1;\n        if (!n)\n            break;\n        x = x.times(x);\n    }\n    return isneg ? one.div(y) : y;\n};\n/*\n * Return a new Big whose value is the value of this Big rounded using rounding mode rm\n * to a maximum of dp decimal places, or, if dp is negative, to an integer which is a\n * multiple of 10**-dp.\n * If dp is not specified, round to 0 decimal places.\n * If rm is not specified, use Big.RM.\n *\n * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\n * rm? 0, 1, 2 or 3 (ROUND_DOWN, ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP)\n */\nP.round = function (dp, rm) {\n    var Big = this.constructor;\n    if (dp === UNDEFINED)\n        dp = 0;\n    else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP)\n        throw Error(INVALID_DP);\n    return round(new Big(this), dp, rm === UNDEFINED ? Big.RM : rm);\n};\n/*\n * Return a new Big whose value is the square root of the value of this Big, rounded, if\n * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n */\nP.sqrt = function () {\n    var r, c, t, Big = this.constructor, x = new Big(this), s = x.s, e = x.e, half = new Big(0.5);\n    // Zero?\n    if (!x.c[0])\n        return new Big(x);\n    // Negative?\n    if (s < 0)\n        throw Error(NAME + 'No square root');\n    // Estimate.\n    s = Math.sqrt(x + '');\n    // Math.sqrt underflow/overflow?\n    // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\n    if (s === 0 || s === 1 / 0) {\n        c = x.c.join('');\n        if (!(c.length + e & 1))\n            c += '0';\n        s = Math.sqrt(c);\n        e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\n        r = new Big((s == 1 / 0 ? '1e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\n    }\n    else {\n        r = new Big(s);\n    }\n    e = r.e + (Big.DP += 4);\n    // Newton-Raphson iteration.\n    do {\n        t = r;\n        r = half.times(t.plus(x.div(t)));\n    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\n    return round(r, Big.DP -= 4, Big.RM);\n};\n/*\n * Return a new Big whose value is the value of this Big times the value of Big y.\n */\nP.times = P.mul = function (y) {\n    var c, Big = this.constructor, x = new Big(this), y = new Big(y), xc = x.c, yc = y.c, a = xc.length, b = yc.length, i = x.e, j = y.e;\n    // Determine sign of result.\n    y.s = x.s == y.s ? 1 : -1;\n    // Return signed 0 if either 0.\n    if (!xc[0] || !yc[0])\n        return new Big(y.s * 0);\n    // Initialise exponent of result as x.e + y.e.\n    y.e = i + j;\n    // If array xc has fewer digits than yc, swap xc and yc, and lengths.\n    if (a < b) {\n        c = xc;\n        xc = yc;\n        yc = c;\n        j = a;\n        a = b;\n        b = j;\n    }\n    // Initialise coefficient array of result with zeros.\n    for (c = new Array(j = a + b); j--;)\n        c[j] = 0;\n    // Multiply.\n    // i is initially xc.length.\n    for (i = b; i--;) {\n        b = 0;\n        // a is yc.length.\n        for (j = a + i; j > i;) {\n            // Current sum of products at this digit position, plus carry.\n            b = c[j] + yc[i] * xc[j - i - 1] + b;\n            c[j--] = b % 10;\n            // carry\n            b = b / 10 | 0;\n        }\n        c[j] = (c[j] + b) % 10;\n    }\n    // Increment result exponent if there is a final carry, otherwise remove leading zero.\n    if (b)\n        ++y.e;\n    else\n        c.shift();\n    // Remove trailing zeros.\n    for (i = c.length; !c[--i];)\n        c.pop();\n    y.c = c;\n    return y;\n};\n/*\n * Return a string representing the value of this Big in exponential notation to dp fixed decimal\n * places and rounded using Big.RM.\n *\n * dp? {number} Integer, 0 to MAX_DP inclusive.\n */\nP.toExponential = function (dp) {\n    return stringify(this, 1, dp, dp);\n};\n/*\n * Return a string representing the value of this Big in normal notation to dp fixed decimal\n * places and rounded using Big.RM.\n *\n * dp? {number} Integer, 0 to MAX_DP inclusive.\n *\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\n */\nP.toFixed = function (dp) {\n    return stringify(this, 2, dp, this.e + dp);\n};\n/*\n * Return a string representing the value of this Big rounded to sd significant digits using\n * Big.RM. Use exponential notation if sd is less than the number of digits necessary to represent\n * the integer part of the value in normal notation.\n *\n * sd {number} Integer, 1 to MAX_DP inclusive.\n */\nP.toPrecision = function (sd) {\n    return stringify(this, 3, sd, sd - 1);\n};\n/*\n * Return a string representing the value of this Big.\n * Return exponential notation if this Big has a positive exponent equal to or greater than\n * Big.PE, or a negative exponent equal to or less than Big.NE.\n * Omit the sign for negative zero.\n */\nP.toString = function () {\n    return stringify(this);\n};\n/*\n * Return a string representing the value of this Big.\n * Return exponential notation if this Big has a positive exponent equal to or greater than\n * Big.PE, or a negative exponent equal to or less than Big.NE.\n * Include the sign for negative zero.\n */\nP.valueOf = P.toJSON = function () {\n    return stringify(this, 4);\n};\n// Export\nexport var Big = _Big_();\nexport default Big;\n","import Decimal from \"./lib/big.js\";\nimport { FSharpRef } from \"./Types.js\";\nexport default Decimal;\nexport const get_Zero = new Decimal(0);\nexport const get_One = new Decimal(1);\nexport const get_MinusOne = new Decimal(-1);\nexport const get_MaxValue = new Decimal(\"79228162514264337593543950335\");\nexport const get_MinValue = new Decimal(\"-79228162514264337593543950335\");\nexport function compare(x, y) {\n    return x.cmp(y);\n}\nexport function equals(x, y) {\n    return !x.cmp(y);\n}\nexport function abs(x) {\n    return x.abs();\n}\nexport function round(x, digits = 0) {\n    return x.round(digits, 2 /* ROUND_HALF_EVEN */);\n}\nexport function truncate(x) {\n    return x.round(0, 0 /* ROUND_DOWN */);\n}\nexport function ceiling(x) {\n    return x.round(0, x.cmp(0) >= 0 ? 3 /* ROUND_UP */ : 0 /* ROUND_DOWN */);\n}\nexport function floor(x) {\n    return x.round(0, x.cmp(0) >= 0 ? 0 /* ROUND_DOWN */ : 3 /* ROUND_UP */);\n}\nexport function pow(x, n) {\n    return x.pow(n);\n}\nexport function sqrt(x) {\n    return x.sqrt();\n}\nexport function op_Addition(x, y) {\n    return x.add(y);\n}\nexport function op_Subtraction(x, y) {\n    return x.sub(y);\n}\nexport function op_Multiply(x, y) {\n    return x.mul(y);\n}\nexport function op_Division(x, y) {\n    return x.div(y);\n}\nexport function op_Modulus(x, y) {\n    return x.mod(y);\n}\nexport function op_UnaryNegation(x) {\n    const x2 = new Decimal(x);\n    x2.s = -x2.s || 0;\n    return x2;\n}\nexport const add = op_Addition;\nexport const subtract = op_Subtraction;\nexport const multiply = op_Multiply;\nexport const divide = op_Division;\nexport const remainder = op_Modulus;\nexport const negate = op_UnaryNegation;\nexport function toString(x) {\n    return x.toString();\n}\nexport function tryParse(str, defValue) {\n    try {\n        defValue.contents = new Decimal(str.trim());\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function parse(str) {\n    const defValue = new FSharpRef(get_Zero);\n    if (tryParse(str, defValue)) {\n        return defValue.contents;\n    }\n    else {\n        throw new Error(\"Input string was not in a correct format.\");\n    }\n}\nexport function toNumber(x) {\n    return +x;\n}\nfunction decimalToHex(dec, bitSize) {\n    const hex = new Uint8Array(bitSize / 4 | 0);\n    let hexCount = 1;\n    for (let d = 0; d < dec.length; d++) {\n        let value = dec[d];\n        for (let i = 0; i < hexCount; i++) {\n            const digit = hex[i] * 10 + value | 0;\n            hex[i] = digit & 0xF;\n            value = digit >> 4;\n        }\n        if (value !== 0) {\n            hex[hexCount++] = value;\n        }\n    }\n    return hex.slice(0, hexCount); // digits in reverse order\n}\nfunction hexToDecimal(hex, bitSize) {\n    const dec = new Uint8Array(bitSize * 301 / 1000 + 1 | 0);\n    let decCount = 1;\n    for (let d = hex.length - 1; d >= 0; d--) {\n        let carry = hex[d];\n        for (let i = 0; i < decCount; i++) {\n            const val = dec[i] * 16 + carry | 0;\n            dec[i] = (val % 10) | 0;\n            carry = (val / 10) | 0;\n        }\n        while (carry > 0) {\n            dec[decCount++] = (carry % 10) | 0;\n            carry = (carry / 10) | 0;\n        }\n    }\n    return dec.slice(0, decCount); // digits in reverse order\n}\nfunction setInt32Bits(hexDigits, bits, offset) {\n    for (let i = 0; i < 8; i++) {\n        hexDigits[offset + i] = (bits >> (i * 4)) & 0xF;\n    }\n}\nfunction getInt32Bits(hexDigits, offset) {\n    let bits = 0;\n    for (let i = 0; i < 8; i++) {\n        bits = bits | (hexDigits[offset + i] << (i * 4));\n    }\n    return bits;\n}\nexport function fromIntArray(bits) {\n    return fromInts(bits[0], bits[1], bits[2], bits[3]);\n}\nexport function fromInts(low, mid, high, signExp) {\n    const isNegative = signExp < 0;\n    const scale = (signExp >> 16) & 0x7F;\n    return fromParts(low, mid, high, isNegative, scale);\n}\nexport function fromParts(low, mid, high, isNegative, scale) {\n    const bitSize = 96;\n    const hexDigits = new Uint8Array(bitSize / 4);\n    setInt32Bits(hexDigits, low, 0);\n    setInt32Bits(hexDigits, mid, 8);\n    setInt32Bits(hexDigits, high, 16);\n    const decDigits = hexToDecimal(hexDigits, bitSize);\n    scale = scale & 0x7F;\n    const big = new Decimal(0);\n    big.c = Array.from(decDigits.reverse());\n    big.e = decDigits.length - scale - 1;\n    big.s = isNegative ? -1 : 1;\n    const d = new Decimal(big);\n    return d;\n}\nexport function getBits(d) {\n    const bitSize = 96;\n    const decDigits = Uint8Array.from(d.c);\n    const hexDigits = decimalToHex(decDigits, bitSize);\n    const low = getInt32Bits(hexDigits, 0);\n    const mid = getInt32Bits(hexDigits, 8);\n    const high = getInt32Bits(hexDigits, 16);\n    const decStr = d.toString();\n    const dotPos = decStr.indexOf(\".\");\n    const scale = dotPos < 0 ? 0 : decStr.length - dotPos - 1;\n    const signExp = ((scale & 0x7F) << 16) | (d.s < 0 ? 0x80000000 : 0);\n    return [low, mid, high, signExp];\n}\nexport function makeRangeStepFunction(step, last) {\n    const stepComparedWithZero = step.cmp(get_Zero);\n    if (stepComparedWithZero === 0) {\n        throw new Error(\"The step of a range cannot be zero\");\n    }\n    const stepGreaterThanZero = stepComparedWithZero > 0;\n    return (x) => {\n        const comparedWithLast = x.cmp(last);\n        if ((stepGreaterThanZero && comparedWithLast <= 0)\n            || (!stepGreaterThanZero && comparedWithLast >= 0)) {\n            return [x, op_Addition(x, step)];\n        }\n        else {\n            return undefined;\n        }\n    };\n}\n","import { makeRangeStepFunction as makeDecimalRangeStepFunction } from \"./Decimal.js\";\nimport { makeRangeStepFunction as makeLongRangeStepFunction } from \"./Long.js\";\nimport { some, value } from \"./Option.js\";\nimport { compare, equals } from \"./Util.js\";\nexport class Enumerator {\n    constructor(iter) {\n        this.iter = iter;\n    }\n    [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\n        return this.current;\n    }\n    [\"System.Collections.IEnumerator.get_Current\"]() {\n        return this.current;\n    }\n    [\"System.Collections.IEnumerator.MoveNext\"]() {\n        const cur = this.iter.next();\n        this.current = cur.value;\n        return !cur.done;\n    }\n    [\"System.Collections.IEnumerator.Reset\"]() {\n        throw new Error(\"JS iterators cannot be reset\");\n    }\n    Dispose() {\n        return;\n    }\n}\nexport function getEnumerator(o) {\n    return typeof o.GetEnumerator === \"function\"\n        ? o.GetEnumerator()\n        : new Enumerator(o[Symbol.iterator]());\n}\nexport function toIterator(en) {\n    return {\n        [Symbol.iterator]() { return this; },\n        next() {\n            const hasNext = en[\"System.Collections.IEnumerator.MoveNext\"]();\n            const current = hasNext ? en[\"System.Collections.IEnumerator.get_Current\"]() : undefined;\n            return { done: !hasNext, value: current };\n        },\n    };\n}\n// export function toIterable<T>(en: IEnumerable<T>): Iterable<T> {\n//   return {\n//     [Symbol.iterator]() {\n//       return toIterator(en.GetEnumerator());\n//     },\n//   };\n// }\nfunction __failIfNone(res) {\n    if (res == null) {\n        throw new Error(\"Seq did not contain any matching element\");\n    }\n    return value(res);\n}\nclass Seq {\n    constructor(f) {\n        this.f = f;\n    }\n    [Symbol.iterator]() { return new Seq(this.f); }\n    next() {\n        var _a;\n        this.iter = (_a = this.iter) !== null && _a !== void 0 ? _a : this.f();\n        return this.iter.next();\n    }\n    toString() {\n        return \"seq [\" + Array.from(this).join(\"; \") + \"]\";\n    }\n}\nfunction makeSeq(f) {\n    return new Seq(f);\n}\nfunction isArrayOrBufferView(xs) {\n    return Array.isArray(xs) || ArrayBuffer.isView(xs);\n}\nexport function ofArray(xs) {\n    if (Array.isArray(xs)) {\n        return delay(() => xs);\n    }\n    else {\n        return delay(() => unfold((i) => i != null && i < xs.length ? [xs[i], i + 1] : undefined, 0));\n    }\n}\nexport function allPairs(xs, ys) {\n    let firstEl = true;\n    const ysCache = [];\n    return collect((x) => {\n        if (firstEl) {\n            firstEl = false;\n            return map((y) => {\n                ysCache.push(y);\n                return [x, y];\n            }, ys);\n        }\n        else {\n            return ysCache.map((y) => [x, y]);\n            // return map(function (i) {\n            //     return [x, ysCache[i]];\n            // }, rangeNumber(0, 1, ysCache.length - 1));\n        }\n    }, xs);\n}\nexport function append(xs, ys) {\n    return delay(() => {\n        let firstDone = false;\n        const i = xs[Symbol.iterator]();\n        let iters = [i, undefined];\n        return unfold(() => {\n            var _a, _b;\n            let cur;\n            if (!firstDone) {\n                cur = (_a = iters[0]) === null || _a === void 0 ? void 0 : _a.next();\n                if (cur != null && !cur.done) {\n                    return [cur.value, iters];\n                }\n                else {\n                    firstDone = true;\n                    iters = [undefined, ys[Symbol.iterator]()];\n                }\n            }\n            cur = (_b = iters[1]) === null || _b === void 0 ? void 0 : _b.next();\n            return cur != null && !cur.done ? [cur.value, iters] : undefined;\n        }, iters);\n    });\n}\nexport function average(xs, averager) {\n    let count = 0;\n    const total = fold((acc, x) => {\n        count++;\n        return averager.Add(acc, x);\n    }, averager.GetZero(), xs);\n    return averager.DivideByInt(total, count);\n}\nexport function averageBy(f, xs, averager) {\n    let count = 0;\n    const total = fold((acc, x) => {\n        count++;\n        return averager.Add(acc, f(x));\n    }, averager.GetZero(), xs);\n    return averager.DivideByInt(total, count);\n}\nexport function concat(xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        let output;\n        return unfold((innerIter) => {\n            let hasFinished = false;\n            while (!hasFinished) {\n                if (innerIter == null) {\n                    const cur = iter.next();\n                    if (!cur.done) {\n                        innerIter = cur.value[Symbol.iterator]();\n                    }\n                    else {\n                        hasFinished = true;\n                    }\n                }\n                else {\n                    const cur = innerIter.next();\n                    if (!cur.done) {\n                        output = cur.value;\n                        hasFinished = true;\n                    }\n                    else {\n                        innerIter = undefined;\n                    }\n                }\n            }\n            return innerIter != null ? [output, innerIter] : undefined;\n        }, undefined);\n    });\n}\nexport function collect(f, xs) {\n    return concat(map(f, xs));\n}\nexport function choose(f, xs) {\n    return delay(() => unfold((iter) => {\n        let cur = iter.next();\n        while (!cur.done) {\n            const y = f(cur.value);\n            if (y != null) {\n                return [value(y), iter];\n            }\n            cur = iter.next();\n        }\n        return undefined;\n    }, xs[Symbol.iterator]()));\n}\nexport function compareWith(f, xs, ys) {\n    if (xs === ys) {\n        return 0;\n    }\n    let cur1;\n    let cur2;\n    let c = 0;\n    for (const iter1 = xs[Symbol.iterator](), iter2 = ys[Symbol.iterator]();;) {\n        cur1 = iter1.next();\n        cur2 = iter2.next();\n        if (cur1.done || cur2.done) {\n            break;\n        }\n        c = f(cur1.value, cur2.value);\n        if (c !== 0) {\n            break;\n        }\n    }\n    return (c !== 0) ? c : (cur1.done && !cur2.done) ? -1 : (!cur1.done && cur2.done) ? 1 : 0;\n}\nexport function delay(f) {\n    return makeSeq(() => f()[Symbol.iterator]());\n}\nexport function empty() {\n    return delay(() => []);\n}\nexport function singleton(y) {\n    return delay(() => [y]);\n}\nexport function enumerateFromFunctions(factory, moveNext, current) {\n    return delay(() => unfold((e) => moveNext(e) ? [current(e), e] : undefined, factory()));\n}\nexport function enumerateWhile(cond, xs) {\n    return concat(unfold(() => cond() ? [xs, true] : undefined, undefined));\n}\nexport function enumerateThenFinally(xs, finalFn) {\n    return delay(() => {\n        let iter;\n        try {\n            iter = xs[Symbol.iterator]();\n        }\n        catch (err) {\n            try {\n                return empty();\n            }\n            finally {\n                finalFn();\n            }\n        }\n        return unfold((it) => {\n            try {\n                const cur = it.next();\n                return !cur.done ? [cur.value, it] : undefined;\n            }\n            catch (err) {\n                return undefined;\n            }\n            finally {\n                finalFn();\n            }\n        }, iter);\n    });\n}\nexport function enumerateUsing(disp, work) {\n    let isDisposed = false;\n    const disposeOnce = () => {\n        if (!isDisposed) {\n            isDisposed = true;\n            disp.Dispose();\n        }\n    };\n    try {\n        return enumerateThenFinally(work(disp), disposeOnce);\n    }\n    catch (err) {\n        return void 0;\n    }\n    finally {\n        disposeOnce();\n    }\n}\nexport function exactlyOne(xs) {\n    const iter = xs[Symbol.iterator]();\n    const fst = iter.next();\n    if (fst.done) {\n        throw new Error(\"Seq was empty\");\n    }\n    const snd = iter.next();\n    if (!snd.done) {\n        throw new Error(\"Seq had multiple items\");\n    }\n    return fst.value;\n}\nexport function except(itemsToExclude, source) {\n    const exclusionItems = Array.from(itemsToExclude);\n    const testIsNotInExclusionItems = (element) => !exclusionItems.some((excludedItem) => equals(excludedItem, element));\n    return filter(testIsNotInExclusionItems, source);\n}\nexport function exists(f, xs) {\n    let cur;\n    for (const iter = xs[Symbol.iterator]();;) {\n        cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (f(cur.value)) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function exists2(f, xs, ys) {\n    let cur1;\n    let cur2;\n    for (const iter1 = xs[Symbol.iterator](), iter2 = ys[Symbol.iterator]();;) {\n        cur1 = iter1.next();\n        cur2 = iter2.next();\n        if (cur1.done || cur2.done) {\n            break;\n        }\n        if (f(cur1.value, cur2.value)) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function forAll(f, xs) {\n    return !exists((x) => !f(x), xs);\n}\nexport function forAll2(f, xs, ys) {\n    return !exists2((x, y) => !f(x, y), xs, ys);\n}\nexport function contains(i, xs) {\n    return exists((x) => equals(x, i), xs);\n}\nexport function filter(f, xs) {\n    return delay(() => unfold((iter) => {\n        let cur = iter.next();\n        while (!cur.done) {\n            if (f(cur.value)) {\n                return [cur.value, iter];\n            }\n            cur = iter.next();\n        }\n        return undefined;\n    }, xs[Symbol.iterator]()));\n}\nexport function where(f, xs) {\n    return filter(f, xs);\n}\nexport function fold(f, acc, xs) {\n    if (isArrayOrBufferView(xs)) {\n        return xs.reduce(f, acc);\n    }\n    else {\n        let cur;\n        for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n            cur = iter.next();\n            if (cur.done) {\n                break;\n            }\n            acc = f(acc, cur.value, i);\n        }\n        return acc;\n    }\n}\nexport function foldBack(f, xs, acc) {\n    const arr = isArrayOrBufferView(xs) ? xs : Array.from(xs);\n    for (let i = arr.length - 1; i >= 0; i--) {\n        acc = f(arr[i], acc, i);\n    }\n    return acc;\n}\nexport function fold2(f, acc, xs, ys) {\n    const iter1 = xs[Symbol.iterator]();\n    const iter2 = ys[Symbol.iterator]();\n    let cur1;\n    let cur2;\n    for (let i = 0;; i++) {\n        cur1 = iter1.next();\n        cur2 = iter2.next();\n        if (cur1.done || cur2.done) {\n            break;\n        }\n        acc = f(acc, cur1.value, cur2.value, i);\n    }\n    return acc;\n}\nexport function foldBack2(f, xs, ys, acc) {\n    const ar1 = isArrayOrBufferView(xs) ? xs : Array.from(xs);\n    const ar2 = isArrayOrBufferView(ys) ? ys : Array.from(ys);\n    for (let i = ar1.length - 1; i >= 0; i--) {\n        acc = f(ar1[i], ar2[i], acc, i);\n    }\n    return acc;\n}\nexport function tryHead(xs) {\n    const iter = xs[Symbol.iterator]();\n    const cur = iter.next();\n    return cur.done ? undefined : some(cur.value);\n}\nexport function head(xs) {\n    return __failIfNone(tryHead(xs));\n}\nexport function initialize(n, f) {\n    return delay(() => unfold((i) => i < n ? [f(i), i + 1] : undefined, 0));\n}\nexport function initializeInfinite(f) {\n    return delay(() => unfold((i) => [f(i), i + 1], 0));\n}\nexport function tryItem(i, xs) {\n    if (i < 0) {\n        return undefined;\n    }\n    if (isArrayOrBufferView(xs)) {\n        return i < xs.length ? some(xs[i]) : undefined;\n    }\n    for (let j = 0, iter = xs[Symbol.iterator]();; j++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (j === i) {\n            return some(cur.value);\n        }\n    }\n    return undefined;\n}\nexport function item(i, xs) {\n    return __failIfNone(tryItem(i, xs));\n}\nexport function iterate(f, xs) {\n    fold((_, x) => (f(x), undefined), undefined, xs);\n}\nexport function iterate2(f, xs, ys) {\n    fold2((_, x, y) => (f(x, y), undefined), undefined, xs, ys);\n}\nexport function iterateIndexed(f, xs) {\n    fold((_, x, i) => (f(i !== null && i !== void 0 ? i : 0, x), undefined), undefined, xs);\n}\nexport function iterateIndexed2(f, xs, ys) {\n    fold2((_, x, y, i) => (f(i !== null && i !== void 0 ? i : 0, x, y), undefined), undefined, xs, ys);\n}\nexport function isEmpty(xs) {\n    const i = xs[Symbol.iterator]();\n    return i.next().done;\n}\nexport function tryLast(xs) {\n    return isEmpty(xs) ? undefined : some(reduce((_, x) => x, xs));\n}\nexport function last(xs) {\n    return __failIfNone(tryLast(xs));\n}\nexport function length(xs) {\n    return isArrayOrBufferView(xs)\n        ? xs.length\n        : fold((acc, _x) => acc + 1, 0, xs);\n}\nexport function map(f, xs) {\n    return delay(() => unfold((iter) => {\n        const cur = iter.next();\n        return !cur.done ? [f(cur.value), iter] : undefined;\n    }, xs[Symbol.iterator]()));\n}\nexport function mapIndexed(f, xs) {\n    return delay(() => {\n        let i = 0;\n        return unfold((iter) => {\n            const cur = iter.next();\n            return !cur.done ? [f(i++, cur.value), iter] : undefined;\n        }, xs[Symbol.iterator]());\n    });\n}\nexport function indexed(xs) {\n    return mapIndexed((i, x) => [i, x], xs);\n}\nexport function map2(f, xs, ys) {\n    return delay(() => {\n        const iter1 = xs[Symbol.iterator]();\n        const iter2 = ys[Symbol.iterator]();\n        return unfold(() => {\n            const cur1 = iter1.next();\n            const cur2 = iter2.next();\n            return !cur1.done && !cur2.done ? [f(cur1.value, cur2.value), undefined] : undefined;\n        }, undefined);\n    });\n}\nexport function mapIndexed2(f, xs, ys) {\n    return delay(() => {\n        let i = 0;\n        const iter1 = xs[Symbol.iterator]();\n        const iter2 = ys[Symbol.iterator]();\n        return unfold(() => {\n            const cur1 = iter1.next();\n            const cur2 = iter2.next();\n            return !cur1.done && !cur2.done ? [f(i++, cur1.value, cur2.value), undefined] : undefined;\n        }, undefined);\n    });\n}\nexport function map3(f, xs, ys, zs) {\n    return delay(() => {\n        const iter1 = xs[Symbol.iterator]();\n        const iter2 = ys[Symbol.iterator]();\n        const iter3 = zs[Symbol.iterator]();\n        return unfold(() => {\n            const cur1 = iter1.next();\n            const cur2 = iter2.next();\n            const cur3 = iter3.next();\n            return !cur1.done && !cur2.done && !cur3.done ? [f(cur1.value, cur2.value, cur3.value), undefined] : undefined;\n        }, undefined);\n    });\n}\nexport function mapFold(f, acc, xs, transform) {\n    const result = [];\n    let r;\n    let cur;\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        [r, acc] = f(acc, cur.value);\n        result.push(r);\n    }\n    return transform !== void 0 ? [transform(result), acc] : [result, acc];\n}\nexport function mapFoldBack(f, xs, acc, transform) {\n    const arr = isArrayOrBufferView(xs) ? xs : Array.from(xs);\n    const result = [];\n    let r;\n    for (let i = arr.length - 1; i >= 0; i--) {\n        [r, acc] = f(arr[i], acc);\n        result.push(r);\n    }\n    return transform !== void 0 ? [transform(result), acc] : [result, acc];\n}\nexport function max(xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(acc, x) === 1 ? acc : x, xs);\n}\nexport function maxBy(f, xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(f(acc), f(x)) === 1 ? acc : x, xs);\n}\nexport function min(xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(acc, x) === -1 ? acc : x, xs);\n}\nexport function minBy(f, xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(f(acc), f(x)) === -1 ? acc : x, xs);\n}\nexport function pairwise(xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        const cur = iter.next();\n        if (cur.done) {\n            return empty();\n        }\n        const hd = cur.value;\n        const tl = tail(xs);\n        const ys = scan(([_, last], next) => [last, next], [hd, hd], tl);\n        return skip(1, ys);\n    });\n}\nexport function rangeChar(first, last) {\n    const firstNum = first.charCodeAt(0);\n    const lastNum = last.charCodeAt(0);\n    return delay(() => unfold((x) => x <= lastNum ? [String.fromCharCode(x), x + 1] : undefined, firstNum));\n}\nexport function rangeLong(first, step, last, unsigned) {\n    const stepFn = makeLongRangeStepFunction(step, last, unsigned);\n    return delay(() => unfold(stepFn, first));\n}\nexport function rangeDecimal(first, step, last) {\n    const stepFn = makeDecimalRangeStepFunction(step, last);\n    return delay(() => unfold(stepFn, first));\n}\nexport function rangeNumber(first, step, last) {\n    if (step === 0) {\n        throw new Error(\"Step cannot be 0\");\n    }\n    return delay(() => unfold((x) => step > 0 && x <= last || step < 0 && x >= last ? [x, x + step] : undefined, first));\n}\nexport function readOnly(xs) {\n    return map((x) => x, xs);\n}\nexport function reduce(f, xs) {\n    if (isArrayOrBufferView(xs)) {\n        return xs.reduce(f);\n    }\n    const iter = xs[Symbol.iterator]();\n    let cur = iter.next();\n    if (cur.done) {\n        throw new Error(\"Seq was empty\");\n    }\n    let acc = cur.value;\n    while (true) {\n        cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        acc = f(acc, cur.value);\n    }\n    return acc;\n}\nexport function reduceBack(f, xs) {\n    const ar = isArrayOrBufferView(xs) ? xs : Array.from(xs);\n    if (ar.length === 0) {\n        throw new Error(\"Seq was empty\");\n    }\n    let acc = ar[ar.length - 1];\n    for (let i = ar.length - 2; i >= 0; i--) {\n        acc = f(ar[i], acc, i);\n    }\n    return acc;\n}\nexport function replicate(n, x) {\n    return initialize(n, () => x);\n}\nexport function reverse(xs) {\n    const ar = isArrayOrBufferView(xs) ? xs.slice(0) : Array.from(xs);\n    return ofArray(ar.reverse());\n}\nexport function scan(f, seed, xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        return unfold((acc) => {\n            if (acc == null) {\n                return [seed, seed];\n            }\n            const cur = iter.next();\n            if (!cur.done) {\n                acc = f(acc, cur.value);\n                return [acc, acc];\n            }\n            return undefined;\n        }, undefined);\n    });\n}\nexport function scanBack(f, xs, seed) {\n    return reverse(scan((acc, x) => f(x, acc), seed, reverse(xs)));\n}\nexport function skip(n, xs) {\n    return makeSeq(() => {\n        const iter = xs[Symbol.iterator]();\n        for (let i = 1; i <= n; i++) {\n            if (iter.next().done) {\n                throw new Error(\"Seq has not enough elements\");\n            }\n        }\n        return iter;\n    });\n}\nexport function skipWhile(f, xs) {\n    return delay(() => {\n        let hasPassed = false;\n        return filter((x) => hasPassed || (hasPassed = !f(x)), xs);\n    });\n}\nexport function sortWith(f, xs) {\n    const ys = Array.from(xs);\n    return ofArray(ys.sort(f));\n}\nexport function sum(xs, adder) {\n    return fold((acc, x) => adder.Add(acc, x), adder.GetZero(), xs);\n}\nexport function sumBy(f, xs, adder) {\n    return fold((acc, x) => adder.Add(acc, f(x)), adder.GetZero(), xs);\n}\nexport function tail(xs) {\n    return skip(1, xs);\n}\nexport function take(n, xs, truncate = false) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        return unfold((i) => {\n            if (i < n) {\n                const cur = iter.next();\n                if (!cur.done) {\n                    return [cur.value, i + 1];\n                }\n                if (!truncate) {\n                    throw new Error(\"Seq has not enough elements\");\n                }\n            }\n            return undefined;\n        }, 0);\n    });\n}\nexport function truncate(n, xs) {\n    return take(n, xs, true);\n}\nexport function takeWhile(f, xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        return unfold(() => {\n            const cur = iter.next();\n            if (!cur.done && f(cur.value)) {\n                return [cur.value, undefined];\n            }\n            return undefined;\n        }, 0);\n    });\n}\nexport function tryFind(f, xs, defaultValue) {\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (f(cur.value, i)) {\n            return some(cur.value);\n        }\n    }\n    return defaultValue === void 0 ? undefined : some(defaultValue);\n}\nexport function find(f, xs) {\n    return __failIfNone(tryFind(f, xs));\n}\nexport function tryFindBack(f, xs, defaultValue) {\n    const arr = isArrayOrBufferView(xs) ? xs.slice(0) : Array.from(xs);\n    return tryFind(f, arr.reverse(), defaultValue);\n}\nexport function findBack(f, xs) {\n    return __failIfNone(tryFindBack(f, xs));\n}\nexport function tryFindIndex(f, xs) {\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (f(cur.value, i)) {\n            return i;\n        }\n    }\n    return undefined;\n}\nexport function findIndex(f, xs) {\n    return __failIfNone(tryFindIndex(f, xs));\n}\nexport function tryFindIndexBack(f, xs) {\n    const arr = isArrayOrBufferView(xs) ? xs.slice(0) : Array.from(xs);\n    for (let i = arr.length - 1; i >= 0; i--) {\n        if (f(arr[i], i)) {\n            return i;\n        }\n    }\n    return undefined;\n}\nexport function findIndexBack(f, xs) {\n    return __failIfNone(tryFindIndexBack(f, xs));\n}\nexport function tryPick(f, xs) {\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        const y = f(cur.value, i);\n        if (y != null) {\n            return y;\n        }\n    }\n    return undefined;\n}\nexport function pick(f, xs) {\n    return __failIfNone(tryPick(f, xs));\n}\nexport function unfold(f, fst) {\n    return makeSeq(() => {\n        // Capture a copy of the first value in the closure\n        // so the sequence is restarted every time, see #1230\n        let acc = fst;\n        const iter = {\n            next() {\n                const res = f(acc);\n                if (res != null) {\n                    const v = value(res);\n                    if (v != null) {\n                        acc = v[1];\n                        return { done: false, value: v[0] };\n                    }\n                }\n                return { done: true, value: undefined };\n            },\n        };\n        return iter;\n    });\n}\nexport function zip(xs, ys) {\n    return map2((x, y) => [x, y], xs, ys);\n}\nexport function zip3(xs, ys, zs) {\n    return map3((x, y, z) => [x, y, z], xs, ys, zs);\n}\nexport function windowed(windowSize, source) {\n    if (windowSize <= 0) {\n        throw new Error(\"windowSize must be positive\");\n    }\n    return makeSeq(() => {\n        let window = [];\n        const iter = source[Symbol.iterator]();\n        const iter2 = {\n            next() {\n                let cur;\n                while (window.length < windowSize) {\n                    if ((cur = iter.next()).done) {\n                        return { done: true, value: undefined };\n                    }\n                    window.push(cur.value);\n                }\n                const value = window;\n                window = window.slice(1);\n                return { done: false, value };\n            },\n        };\n        return iter2;\n    });\n}\nexport function transpose(source) {\n    return makeSeq(() => {\n        const iters = Array.from(source, (x) => x[Symbol.iterator]());\n        const iter = {\n            next() {\n                if (iters.length === 0) {\n                    return { done: true, value: undefined }; // empty sequence\n                }\n                const results = Array.from(iters, (iter) => iter.next());\n                if (results[0].done) {\n                    if (!results.every((x) => x.done)) {\n                        throw new Error(\"Sequences have different lengths\");\n                    }\n                    return { done: true, value: undefined };\n                }\n                else {\n                    if (!results.every((x) => !x.done)) {\n                        throw new Error(\"Sequences have different lengths\");\n                    }\n                    const values = results.map((x) => x.value);\n                    return { done: false, value: values };\n                }\n            },\n        };\n        return iter;\n    });\n}\n","import { equals } from \"./Util.js\";\nimport { Union } from \"./Types.js\";\nconst CaseRules = {\n    None: 0,\n    LowerFirst: 1,\n    SnakeCase: 2,\n    SnakeCaseAllCaps: 3,\n    KebabCase: 4,\n};\nfunction dashify(str, separator) {\n    return str.replace(/[a-z]?[A-Z]/g, (m) => m.length === 1\n        ? m.toLowerCase()\n        : m.charAt(0) + separator + m.charAt(1).toLowerCase());\n}\nfunction changeCase(str, caseRule) {\n    switch (caseRule) {\n        case CaseRules.LowerFirst:\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        case CaseRules.SnakeCase:\n            return dashify(str, \"_\");\n        case CaseRules.SnakeCaseAllCaps:\n            return dashify(str, \"_\").toUpperCase();\n        case CaseRules.KebabCase:\n            return dashify(str, \"-\");\n        case CaseRules.None:\n        default:\n            return str;\n    }\n}\nexport function keyValueList(fields, caseRule = CaseRules.None) {\n    const obj = {};\n    const definedCaseRule = caseRule;\n    function fail(kvPair) {\n        throw new Error(\"Cannot infer key and value of \" + String(kvPair));\n    }\n    function assign(key, caseRule, value) {\n        key = changeCase(key, caseRule);\n        obj[key] = value;\n    }\n    for (let kvPair of fields) {\n        let caseRule = CaseRules.None;\n        if (kvPair == null) {\n            fail(kvPair);\n        }\n        // Deflate unions and use the defined case rule\n        if (kvPair instanceof Union) {\n            const name = kvPair.cases()[kvPair.tag];\n            kvPair = kvPair.fields.length === 0 ? name : [name].concat(kvPair.fields);\n            caseRule = definedCaseRule;\n        }\n        if (Array.isArray(kvPair)) {\n            switch (kvPair.length) {\n                case 0:\n                    fail(kvPair);\n                    break;\n                case 1:\n                    assign(kvPair[0], caseRule, true);\n                    break;\n                case 2:\n                    const value = kvPair[1];\n                    assign(kvPair[0], caseRule, value);\n                    break;\n                default:\n                    assign(kvPair[0], caseRule, kvPair.slice(1));\n            }\n        }\n        else if (typeof kvPair === \"string\") {\n            assign(kvPair, caseRule, true);\n        }\n        else {\n            fail(kvPair);\n        }\n    }\n    return obj;\n}\n// TODO: Move these methods to Map and Set modules\nexport function containsValue(v, map) {\n    for (const kv of map) {\n        if (equals(v, kv[1])) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function tryGetValue(map, key, defaultValue) {\n    if (map.has(key)) {\n        defaultValue.contents = map.get(key);\n        return true;\n    }\n    return false;\n}\nexport function addToSet(v, set) {\n    if (set.has(v)) {\n        return false;\n    }\n    set.add(v);\n    return true;\n}\nexport function addToDict(dict, k, v) {\n    if (dict.has(k)) {\n        throw new Error(\"An item with the same key has already been added. Key: \" + k);\n    }\n    dict.set(k, v);\n}\nexport function getItemFromDict(map, key) {\n    if (map.has(key)) {\n        return map.get(key);\n    }\n    else {\n        throw new Error(`The given key '${key}' was not present in the dictionary.`);\n    }\n}\n","import { sumBy, iterate, map, iterateIndexed, toIterator, concat, getEnumerator } from \"./Seq.js\";\nimport { equals } from \"./Util.js\";\nimport { FSharpRef } from \"./Types.js\";\nimport { class_type } from \"./Reflection.js\";\nimport { getItemFromDict, tryGetValue } from \"./MapUtil.js\";\nimport { format } from \"./String.js\";\n\nexport class Dictionary {\n    constructor(pairs, comparer) {\n        const this$ = new FSharpRef(null);\n        this.comparer = comparer;\n        this$.contents = this;\n        this.hashMap = (new Map([]));\n        this[\"init@8-1\"] = 1;\n        const enumerator = getEnumerator(pairs);\n        try {\n            while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                const pair = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n                Dictionary__Add_5BDDA1(this$.contents, pair[0], pair[1]);\n            }\n        }\n        finally {\n            enumerator.Dispose();\n        }\n    }\n    get [Symbol.toStringTag]() {\n        return \"Dictionary\";\n    }\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\n        const this$ = this;\n        return getEnumerator(this$);\n    }\n    GetEnumerator() {\n        const this$ = this;\n        return getEnumerator(concat(this$.hashMap.values()));\n    }\n    [Symbol.iterator]() {\n        return toIterator(this.GetEnumerator());\n    }\n    [\"System.Collections.Generic.ICollection`1.Add2B595\"](item) {\n        const this$ = this;\n        Dictionary__Add_5BDDA1(this$, item[0], item[1]);\n    }\n    [\"System.Collections.Generic.ICollection`1.Clear\"]() {\n        const this$ = this;\n        Dictionary__Clear(this$);\n    }\n    [\"System.Collections.Generic.ICollection`1.Contains2B595\"](item) {\n        const this$ = this;\n        const matchValue = Dictionary__TryFind_2B595(this$, item[0]);\n        let pattern_matching_result;\n        if (matchValue != null) {\n            if (equals(matchValue[1], item[1])) {\n                pattern_matching_result = 0;\n            }\n            else {\n                pattern_matching_result = 1;\n            }\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return true;\n            }\n            case 1: {\n                return false;\n            }\n        }\n    }\n    [\"System.Collections.Generic.ICollection`1.CopyToZ2E171D71\"](array, arrayIndex) {\n        const this$ = this;\n        iterateIndexed((i, e) => {\n            array[arrayIndex + i] = e;\n        }, this$);\n    }\n    [\"System.Collections.Generic.ICollection`1.get_Count\"]() {\n        const this$ = this;\n        return Dictionary__get_Count(this$) | 0;\n    }\n    [\"System.Collections.Generic.ICollection`1.get_IsReadOnly\"]() {\n        return false;\n    }\n    [\"System.Collections.Generic.ICollection`1.Remove2B595\"](item) {\n        const this$ = this;\n        const matchValue = Dictionary__TryFind_2B595(this$, item[0]);\n        if (matchValue != null) {\n            if (equals(matchValue[1], item[1])) {\n                void Dictionary__Remove_2B595(this$, item[0]);\n            }\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    get size() {\n        const this$ = this;\n        return Dictionary__get_Count(this$) | 0;\n    }\n    clear() {\n        const this$ = this;\n        Dictionary__Clear(this$);\n    }\n    delete(k) {\n        const this$ = this;\n        return Dictionary__Remove_2B595(this$, k);\n    }\n    entries() {\n        const this$ = this;\n        return map((p) => [p[0], p[1]], this$);\n    }\n    get(k) {\n        const this$ = this;\n        return Dictionary__get_Item_2B595(this$, k);\n    }\n    has(k) {\n        const this$ = this;\n        return Dictionary__ContainsKey_2B595(this$, k);\n    }\n    keys() {\n        const this$ = this;\n        return map((p) => p[0], this$);\n    }\n    set(k, v) {\n        const this$ = this;\n        Dictionary__set_Item_5BDDA1(this$, k, v);\n        return this$;\n    }\n    values() {\n        const this$ = this;\n        return map((p) => p[1], this$);\n    }\n    forEach(f, thisArg) {\n        const this$ = this;\n        iterate((p) => {\n            f(p[1], p[0], this$);\n        }, this$);\n    }\n}\n\nexport function Dictionary$reflection(gen0, gen1) {\n    return class_type(\"Fable.Collections.Dictionary\", [gen0, gen1], Dictionary);\n}\n\nexport function Dictionary_$ctor_6623D9B3(pairs, comparer) {\n    return new Dictionary(pairs, comparer);\n}\n\nfunction Dictionary__TryFindIndex_2B595(this$, k) {\n    const h = this$.comparer.GetHashCode(k) | 0;\n    let matchValue;\n    let outArg = null;\n    matchValue = [tryGetValue(this$.hashMap, h, new FSharpRef(() => outArg, (v) => {\n        outArg = v;\n    })), outArg];\n    if (matchValue[0]) {\n        return [true, h, matchValue[1].findIndex((pair) => this$.comparer.Equals(k, pair[0]))];\n    }\n    else {\n        return [false, h, -1];\n    }\n}\n\nexport function Dictionary__TryFind_2B595(this$, k) {\n    const matchValue = Dictionary__TryFindIndex_2B595(this$, k);\n    let pattern_matching_result;\n    if (matchValue[0]) {\n        if (matchValue[2] > -1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return getItemFromDict(this$.hashMap, matchValue[1])[matchValue[2]];\n        }\n        case 1: {\n            return void 0;\n        }\n    }\n}\n\nexport function Dictionary__get_Comparer(this$) {\n    return this$.comparer;\n}\n\nexport function Dictionary__Clear(this$) {\n    this$.hashMap.clear();\n}\n\nexport function Dictionary__get_Count(this$) {\n    return sumBy((pairs) => pairs.length, this$.hashMap.values(), {\n        GetZero: () => 0,\n        Add: (x, y) => (x + y),\n    });\n}\n\nexport function Dictionary__get_Item_2B595(this$, k) {\n    const matchValue = Dictionary__TryFind_2B595(this$, k);\n    if (matchValue != null) {\n        return matchValue[1];\n    }\n    else {\n        throw (new Error(\"The item was not found in collection\"));\n    }\n}\n\nexport function Dictionary__set_Item_5BDDA1(this$, k, v) {\n    const matchValue = Dictionary__TryFindIndex_2B595(this$, k);\n    let pattern_matching_result;\n    if (matchValue[0]) {\n        if (matchValue[2] > -1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            getItemFromDict(this$.hashMap, matchValue[1])[matchValue[2]] = [k, v];\n            break;\n        }\n        case 1: {\n            if (matchValue[0]) {\n                const value = void (getItemFromDict(this$.hashMap, matchValue[1]).push([k, v]));\n            }\n            else {\n                this$.hashMap.set(matchValue[1], [[k, v]]);\n            }\n            break;\n        }\n    }\n}\n\nexport function Dictionary__Add_5BDDA1(this$, k, v) {\n    const matchValue = Dictionary__TryFindIndex_2B595(this$, k);\n    let pattern_matching_result;\n    if (matchValue[0]) {\n        if (matchValue[2] > -1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            const msg = format(\"An item with the same key has already been added. Key: {0}\", k);\n            throw (new Error(msg));\n            break;\n        }\n        case 1: {\n            if (matchValue[0]) {\n                const value = void (getItemFromDict(this$.hashMap, matchValue[1]).push([k, v]));\n            }\n            else {\n                this$.hashMap.set(matchValue[1], [[k, v]]);\n            }\n            break;\n        }\n    }\n}\n\nexport function Dictionary__ContainsKey_2B595(this$, k) {\n    const matchValue = Dictionary__TryFindIndex_2B595(this$, k);\n    let pattern_matching_result;\n    if (matchValue[0]) {\n        if (matchValue[2] > -1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return true;\n        }\n        case 1: {\n            return false;\n        }\n    }\n}\n\nexport function Dictionary__Remove_2B595(this$, k) {\n    const matchValue = Dictionary__TryFindIndex_2B595(this$, k);\n    let pattern_matching_result;\n    if (matchValue[0]) {\n        if (matchValue[2] > -1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            getItemFromDict(this$.hashMap, matchValue[1]).splice(matchValue[2], 1);\n            return true;\n        }\n        case 1: {\n            return false;\n        }\n    }\n}\n\n","import { sumBy, iterate, map, iterateIndexed, toIterator, concat, getEnumerator } from \"./Seq.js\";\nimport { FSharpRef } from \"./Types.js\";\nimport { class_type } from \"./Reflection.js\";\nimport { getItemFromDict, tryGetValue } from \"./MapUtil.js\";\nimport { some } from \"./Option.js\";\n\nexport class HashSet {\n    constructor(items, comparer) {\n        const this$ = new FSharpRef(null);\n        this.comparer = comparer;\n        this$.contents = this;\n        this.hashMap = (new Map([]));\n        this[\"init@8-2\"] = 1;\n        const enumerator = getEnumerator(items);\n        try {\n            while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                void HashSet__Add_2B595(this$.contents, enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n            }\n        }\n        finally {\n            enumerator.Dispose();\n        }\n    }\n    get [Symbol.toStringTag]() {\n        return \"HashSet\";\n    }\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\n        const this$ = this;\n        return getEnumerator(this$);\n    }\n    GetEnumerator() {\n        const this$ = this;\n        return getEnumerator(concat(this$.hashMap.values()));\n    }\n    [Symbol.iterator]() {\n        return toIterator(this.GetEnumerator());\n    }\n    [\"System.Collections.Generic.ICollection`1.Add2B595\"](item) {\n        const this$ = this;\n        void HashSet__Add_2B595(this$, item);\n    }\n    [\"System.Collections.Generic.ICollection`1.Clear\"]() {\n        const this$ = this;\n        HashSet__Clear(this$);\n    }\n    [\"System.Collections.Generic.ICollection`1.Contains2B595\"](item) {\n        const this$ = this;\n        return HashSet__Contains_2B595(this$, item);\n    }\n    [\"System.Collections.Generic.ICollection`1.CopyToZ2E171D71\"](array, arrayIndex) {\n        const this$ = this;\n        iterateIndexed((i, e) => {\n            array[arrayIndex + i] = e;\n        }, this$);\n    }\n    [\"System.Collections.Generic.ICollection`1.get_Count\"]() {\n        const this$ = this;\n        return HashSet__get_Count(this$) | 0;\n    }\n    [\"System.Collections.Generic.ICollection`1.get_IsReadOnly\"]() {\n        return false;\n    }\n    [\"System.Collections.Generic.ICollection`1.Remove2B595\"](item) {\n        const this$ = this;\n        return HashSet__Remove_2B595(this$, item);\n    }\n    get size() {\n        const this$ = this;\n        return HashSet__get_Count(this$) | 0;\n    }\n    add(k) {\n        const this$ = this;\n        void HashSet__Add_2B595(this$, k);\n        return this$;\n    }\n    clear() {\n        const this$ = this;\n        HashSet__Clear(this$);\n    }\n    delete(k) {\n        const this$ = this;\n        return HashSet__Remove_2B595(this$, k);\n    }\n    has(k) {\n        const this$ = this;\n        return HashSet__Contains_2B595(this$, k);\n    }\n    keys() {\n        const this$ = this;\n        return map((x) => x, this$);\n    }\n    values() {\n        const this$ = this;\n        return map((x) => x, this$);\n    }\n    entries() {\n        const this$ = this;\n        return map((v) => [v, v], this$);\n    }\n    forEach(f, thisArg) {\n        const this$ = this;\n        iterate((x) => {\n            f(x, x, this$);\n        }, this$);\n    }\n}\n\nexport function HashSet$reflection(gen0) {\n    return class_type(\"Fable.Collections.HashSet\", [gen0], HashSet);\n}\n\nexport function HashSet_$ctor_Z6150332D(items, comparer) {\n    return new HashSet(items, comparer);\n}\n\nfunction HashSet__TryFindIndex_2B595(this$, k) {\n    const h = this$.comparer.GetHashCode(k) | 0;\n    let matchValue;\n    let outArg = null;\n    matchValue = [tryGetValue(this$.hashMap, h, new FSharpRef(() => outArg, (v) => {\n        outArg = v;\n    })), outArg];\n    if (matchValue[0]) {\n        return [true, h, matchValue[1].findIndex((v_1) => this$.comparer.Equals(k, v_1))];\n    }\n    else {\n        return [false, h, -1];\n    }\n}\n\nfunction HashSet__TryFind_2B595(this$, k) {\n    const matchValue = HashSet__TryFindIndex_2B595(this$, k);\n    let pattern_matching_result;\n    if (matchValue[0]) {\n        if (matchValue[2] > -1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return some(getItemFromDict(this$.hashMap, matchValue[1])[matchValue[2]]);\n        }\n        case 1: {\n            return void 0;\n        }\n    }\n}\n\nexport function HashSet__get_Comparer(this$) {\n    return this$.comparer;\n}\n\nexport function HashSet__Clear(this$) {\n    this$.hashMap.clear();\n}\n\nexport function HashSet__get_Count(this$) {\n    return sumBy((pairs) => pairs.length, this$.hashMap.values(), {\n        GetZero: () => 0,\n        Add: (x, y) => (x + y),\n    });\n}\n\nexport function HashSet__Add_2B595(this$, k) {\n    const matchValue = HashSet__TryFindIndex_2B595(this$, k);\n    let pattern_matching_result;\n    if (matchValue[0]) {\n        if (matchValue[2] > -1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return false;\n        }\n        case 1: {\n            if (matchValue[0]) {\n                const value = void (getItemFromDict(this$.hashMap, matchValue[1]).push(k));\n                return true;\n            }\n            else {\n                this$.hashMap.set(matchValue[1], [k]);\n                return true;\n            }\n        }\n    }\n}\n\nexport function HashSet__Contains_2B595(this$, k) {\n    const matchValue = HashSet__TryFindIndex_2B595(this$, k);\n    let pattern_matching_result;\n    if (matchValue[0]) {\n        if (matchValue[2] > -1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return true;\n        }\n        case 1: {\n            return false;\n        }\n    }\n}\n\nexport function HashSet__Remove_2B595(this$, k) {\n    const matchValue = HashSet__TryFindIndex_2B595(this$, k);\n    let pattern_matching_result;\n    if (matchValue[0]) {\n        if (matchValue[2] > -1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            getItemFromDict(this$.hashMap, matchValue[1]).splice(matchValue[2], 1);\n            return true;\n        }\n        case 1: {\n            return false;\n        }\n    }\n}\n\n","import { value as value_2, defaultArg, some } from \"./Option.js\";\nimport { min as min_1, compare, comparePrimitives, max as max_1 } from \"./Util.js\";\nimport { Dictionary } from \"./MutableMap.js\";\nimport { addToDict, addToSet, getItemFromDict, tryGetValue } from \"./MapUtil.js\";\nimport { FSharpRef } from \"./Types.js\";\nimport { HashSet } from \"./MutableSet.js\";\nimport { iterate as iterate_1 } from \"./Seq.js\";\n\nexport function Helpers_allocateArrayFromCons(cons, len) {\n    if ((typeof cons) === \"function\") {\n        return new cons(len);\n    }\n    else {\n        return new Array(len);\n    }\n}\n\nfunction indexNotFound() {\n    throw (new Error(\"An index satisfying the predicate was not found in the collection.\"));\n}\n\nfunction differentLengths() {\n    throw (new Error(\"Arrays had different lengths\"));\n}\n\nexport function append(array1, array2, cons) {\n    const len1 = array1.length | 0;\n    const len2 = array2.length | 0;\n    const newArray = Helpers_allocateArrayFromCons(cons, len1 + len2);\n    for (let i = 0; i <= (len1 - 1); i++) {\n        newArray[i] = array1[i];\n    }\n    for (let i_1 = 0; i_1 <= (len2 - 1); i_1++) {\n        newArray[i_1 + len1] = array2[i_1];\n    }\n    return newArray;\n}\n\nexport function filter(predicate, array) {\n    return array.filter(predicate);\n}\n\nexport function fill(target, targetIndex, count, value) {\n    const start = targetIndex | 0;\n    return target.fill(value, start, (start + count));\n}\n\nexport function getSubArray(array, start, count) {\n    const start_1 = start | 0;\n    return array.slice(start_1, (start_1 + count));\n}\n\nexport function last(array) {\n    if (array.length === 0) {\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\n    }\n    return array[array.length - 1];\n}\n\nexport function tryLast(array) {\n    if (array.length === 0) {\n        return void 0;\n    }\n    else {\n        return some(array[array.length - 1]);\n    }\n}\n\nexport function mapIndexed(f, source, cons) {\n    const len = source.length | 0;\n    const target = Helpers_allocateArrayFromCons(cons, len);\n    for (let i = 0; i <= (len - 1); i++) {\n        target[i] = f(i, source[i]);\n    }\n    return target;\n}\n\nexport function map(f, source, cons) {\n    const len = source.length | 0;\n    const target = Helpers_allocateArrayFromCons(cons, len);\n    for (let i = 0; i <= (len - 1); i++) {\n        target[i] = f(source[i]);\n    }\n    return target;\n}\n\nexport function mapIndexed2(f, source1, source2, cons) {\n    if (source1.length !== source2.length) {\n        throw (new Error(\"Arrays had different lengths\"));\n    }\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\n    for (let i = 0; i <= (source1.length - 1); i++) {\n        result[i] = f(i, source1[i], source2[i]);\n    }\n    return result;\n}\n\nexport function map2(f, source1, source2, cons) {\n    if (source1.length !== source2.length) {\n        throw (new Error(\"Arrays had different lengths\"));\n    }\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\n    for (let i = 0; i <= (source1.length - 1); i++) {\n        result[i] = f(source1[i], source2[i]);\n    }\n    return result;\n}\n\nexport function mapIndexed3(f, source1, source2, source3, cons) {\n    if ((source1.length !== source2.length) ? true : (source2.length !== source3.length)) {\n        throw (new Error(\"Arrays had different lengths\"));\n    }\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\n    for (let i = 0; i <= (source1.length - 1); i++) {\n        result[i] = f(i, source1[i], source2[i], source3[i]);\n    }\n    return result;\n}\n\nexport function map3(f, source1, source2, source3, cons) {\n    if ((source1.length !== source2.length) ? true : (source2.length !== source3.length)) {\n        throw (new Error(\"Arrays had different lengths\"));\n    }\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\n    for (let i = 0; i <= (source1.length - 1); i++) {\n        result[i] = f(source1[i], source2[i], source3[i]);\n    }\n    return result;\n}\n\nexport function mapFold(mapping, state, array, cons) {\n    const matchValue = array.length | 0;\n    if (matchValue === 0) {\n        return [[], state];\n    }\n    else {\n        let acc = state;\n        const res = Helpers_allocateArrayFromCons(cons, matchValue);\n        for (let i = 0; i <= (array.length - 1); i++) {\n            const patternInput = mapping(acc, array[i]);\n            res[i] = patternInput[0];\n            acc = patternInput[1];\n        }\n        return [res, acc];\n    }\n}\n\nexport function mapFoldBack(mapping, array, state, cons) {\n    const matchValue = array.length | 0;\n    if (matchValue === 0) {\n        return [[], state];\n    }\n    else {\n        let acc = state;\n        const res = Helpers_allocateArrayFromCons(cons, matchValue);\n        for (let i = array.length - 1; i >= 0; i--) {\n            const patternInput = mapping(array[i], acc);\n            res[i] = patternInput[0];\n            acc = patternInput[1];\n        }\n        return [res, acc];\n    }\n}\n\nexport function indexed(source) {\n    const len = source.length | 0;\n    const target = new Array(len);\n    for (let i = 0; i <= (len - 1); i++) {\n        target[i] = [i, source[i]];\n    }\n    return target;\n}\n\nexport function truncate(count, array) {\n    const count_1 = max_1((x, y) => comparePrimitives(x, y), 0, count) | 0;\n    const start = 0;\n    return array.slice(start, (start + count_1));\n}\n\nexport function concat(arrays, cons) {\n    const arrays_1 = Array.isArray(arrays) ? arrays : (Array.from(arrays));\n    const matchValue = arrays_1.length | 0;\n    switch (matchValue) {\n        case 0: {\n            return Helpers_allocateArrayFromCons(cons, 0);\n        }\n        case 1: {\n            return arrays_1[0];\n        }\n        default: {\n            let totalIdx = 0;\n            let totalLength = 0;\n            for (let idx = 0; idx <= (arrays_1.length - 1); idx++) {\n                const arr_1 = arrays_1[idx];\n                totalLength = (totalLength + arr_1.length);\n            }\n            const result = Helpers_allocateArrayFromCons(cons, totalLength);\n            for (let idx_1 = 0; idx_1 <= (arrays_1.length - 1); idx_1++) {\n                const arr_2 = arrays_1[idx_1];\n                for (let j = 0; j <= (arr_2.length - 1); j++) {\n                    result[totalIdx] = arr_2[j];\n                    totalIdx = (totalIdx + 1);\n                }\n            }\n            return result;\n        }\n    }\n}\n\nexport function collect(mapping, array, cons) {\n    return concat(map(mapping, array, null), cons);\n}\n\nexport function countBy(projection, array, eq) {\n    const dict = new Dictionary([], eq);\n    const keys = [];\n    for (let idx = 0; idx <= (array.length - 1); idx++) {\n        const key = projection(array[idx]);\n        let matchValue;\n        let outArg = 0;\n        matchValue = [tryGetValue(dict, key, new FSharpRef(() => outArg, (v) => {\n            outArg = v;\n        })), outArg];\n        if (matchValue[0]) {\n            dict.set(key, matchValue[1] + 1);\n        }\n        else {\n            dict.set(key, 1);\n            void (keys.push(key));\n        }\n    }\n    return map((key_1) => [key_1, getItemFromDict(dict, key_1)], keys, null);\n}\n\nexport function distinctBy(projection, array, eq) {\n    const hashSet = new HashSet([], eq);\n    return filter((arg) => addToSet(projection(arg), hashSet), array);\n}\n\nexport function distinct(array, eq) {\n    return distinctBy((x) => x, array, eq);\n}\n\nexport function where(predicate, array) {\n    return array.filter(predicate);\n}\n\nexport function contains(value, array, eq) {\n    const loop = (i_mut) => {\n        loop:\n        while (true) {\n            const i = i_mut;\n            if (i >= array.length) {\n                return false;\n            }\n            else if (eq.Equals(value, array[i])) {\n                return true;\n            }\n            else {\n                i_mut = (i + 1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(0);\n}\n\nexport function except(itemsToExclude, array, eq) {\n    if (array.length === 0) {\n        return array;\n    }\n    else {\n        const cached = new HashSet(itemsToExclude, eq);\n        return array.filter(((arg00) => addToSet(arg00, cached)));\n    }\n}\n\nexport function groupBy(projection, array, eq) {\n    const dict = new Dictionary([], eq);\n    const keys = [];\n    for (let idx = 0; idx <= (array.length - 1); idx++) {\n        const v = array[idx];\n        const key = projection(v);\n        let matchValue;\n        let outArg = null;\n        matchValue = [tryGetValue(dict, key, new FSharpRef(() => outArg, (v_1) => {\n            outArg = v_1;\n        })), outArg];\n        if (matchValue[0]) {\n            void (matchValue[1].push(v));\n        }\n        else {\n            addToDict(dict, key, [v]);\n            void (keys.push(key));\n        }\n    }\n    return map((key_1) => [key_1, Array.from(getItemFromDict(dict, key_1))], keys, null);\n}\n\nexport function empty(cons) {\n    return Helpers_allocateArrayFromCons(cons, 0);\n}\n\nexport function singleton(value, cons) {\n    const ar = Helpers_allocateArrayFromCons(cons, 1);\n    ar[0] = value;\n    return ar;\n}\n\nexport function initialize(count, initializer, cons) {\n    if (count < 0) {\n        throw (new Error(\"The input must be non-negative\\\\nParameter name: count\"));\n    }\n    const result = Helpers_allocateArrayFromCons(cons, count);\n    for (let i = 0; i <= (count - 1); i++) {\n        result[i] = initializer(i);\n    }\n    return result;\n}\n\nexport function pairwise(array) {\n    if (array.length < 2) {\n        return [];\n    }\n    else {\n        const count = (array.length - 1) | 0;\n        const result = new Array(count);\n        for (let i = 0; i <= (count - 1); i++) {\n            result[i] = [array[i], array[i + 1]];\n        }\n        return result;\n    }\n}\n\nexport function replicate(count, initial, cons) {\n    if (count < 0) {\n        throw (new Error(\"The input must be non-negative\\\\nParameter name: count\"));\n    }\n    const result = Helpers_allocateArrayFromCons(cons, count);\n    for (let i = 0; i <= (result.length - 1); i++) {\n        result[i] = initial;\n    }\n    return result;\n}\n\nexport function copy(array) {\n    return array.slice();\n}\n\nexport function reverse(array) {\n    const array_2 = array.slice();\n    return array_2.reverse();\n}\n\nexport function scan(folder, state, array, cons) {\n    const res = Helpers_allocateArrayFromCons(cons, array.length + 1);\n    res[0] = state;\n    for (let i = 0; i <= (array.length - 1); i++) {\n        res[i + 1] = folder(res[i], array[i]);\n    }\n    return res;\n}\n\nexport function scanBack(folder, array, state, cons) {\n    const res = Helpers_allocateArrayFromCons(cons, array.length + 1);\n    res[array.length] = state;\n    for (let i = array.length - 1; i >= 0; i--) {\n        res[i] = folder(array[i], res[i + 1]);\n    }\n    return res;\n}\n\nexport function skip(count, array, cons) {\n    if (count > array.length) {\n        throw (new Error(\"count is greater than array length\\\\nParameter name: count\"));\n    }\n    if (count === array.length) {\n        return Helpers_allocateArrayFromCons(cons, 0);\n    }\n    else {\n        const count_1 = ((count < 0) ? 0 : count) | 0;\n        return array.slice(count_1);\n    }\n}\n\nexport function skipWhile(predicate, array, cons) {\n    let count = 0;\n    while ((count < array.length) ? predicate(array[count]) : false) {\n        count = (count + 1);\n    }\n    if (count === array.length) {\n        return Helpers_allocateArrayFromCons(cons, 0);\n    }\n    else {\n        const count_1 = count | 0;\n        return array.slice(count_1);\n    }\n}\n\nexport function take(count, array, cons) {\n    if (count < 0) {\n        throw (new Error(\"The input must be non-negative\\\\nParameter name: count\"));\n    }\n    if (count > array.length) {\n        throw (new Error(\"count is greater than array length\\\\nParameter name: count\"));\n    }\n    if (count === 0) {\n        return Helpers_allocateArrayFromCons(cons, 0);\n    }\n    else {\n        const start = 0;\n        return array.slice(start, (start + count));\n    }\n}\n\nexport function takeWhile(predicate, array, cons) {\n    let count = 0;\n    while ((count < array.length) ? predicate(array[count]) : false) {\n        count = (count + 1);\n    }\n    if (count === 0) {\n        return Helpers_allocateArrayFromCons(cons, 0);\n    }\n    else {\n        const start = 0;\n        const count_1 = count | 0;\n        return array.slice(start, (start + count_1));\n    }\n}\n\nexport function addInPlace(x, array) {\n    void (array.push(x));\n}\n\nexport function addRangeInPlace(range, array) {\n    iterate_1((x) => {\n        void (array.push(x));\n    }, range);\n}\n\nexport function removeInPlace(item_1, array) {\n    const i = array.indexOf(item_1, 0);\n    if (i > -1) {\n        void (array.splice(i, 1));\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nexport function removeAllInPlace(predicate, array) {\n    const countRemoveAll = (count) => {\n        const i = array.findIndex(predicate);\n        if (i > -1) {\n            void (array.splice(i, 1));\n            return (countRemoveAll(count) + 1) | 0;\n        }\n        else {\n            return count | 0;\n        }\n    };\n    return countRemoveAll(0) | 0;\n}\n\nexport function copyTo(source, sourceIndex, target, targetIndex, count) {\n    const diff = (targetIndex - sourceIndex) | 0;\n    for (let i = sourceIndex; i <= ((sourceIndex + count) - 1); i++) {\n        target[i + diff] = source[i];\n    }\n}\n\nexport function copyToTypedArray(source, sourceIndex, target, targetIndex, count) {\n    try {\n        target.set(source.subarray(sourceIndex, sourceIndex + count), targetIndex);\n    }\n    catch (matchValue) {\n        copyTo(source, sourceIndex, target, targetIndex, count);\n    }\n}\n\nexport function indexOf(array, item_1, start, count) {\n    const start_1 = defaultArg(start, 0) | 0;\n    const i = array.indexOf(item_1, start_1);\n    if ((count != null) ? (i >= (start_1 + value_2(count))) : false) {\n        return -1;\n    }\n    else {\n        return i | 0;\n    }\n}\n\nexport function partition(f, source, cons) {\n    const len = source.length | 0;\n    const res1 = Helpers_allocateArrayFromCons(cons, len);\n    const res2 = Helpers_allocateArrayFromCons(cons, len);\n    let iTrue = 0;\n    let iFalse = 0;\n    for (let i = 0; i <= (len - 1); i++) {\n        if (f(source[i])) {\n            res1[iTrue] = source[i];\n            iTrue = (iTrue + 1);\n        }\n        else {\n            res2[iFalse] = source[i];\n            iFalse = (iFalse + 1);\n        }\n    }\n    return [truncate(iTrue, res1), truncate(iFalse, res2)];\n}\n\nexport function find(predicate, array) {\n    const matchValue = array.find(predicate);\n    if (matchValue == null) {\n        return indexNotFound();\n    }\n    else {\n        return value_2(matchValue);\n    }\n}\n\nexport function tryFind(predicate, array) {\n    return array.find(predicate);\n}\n\nexport function findIndex(predicate, array) {\n    const matchValue = array.findIndex(predicate);\n    if (matchValue > -1) {\n        return matchValue | 0;\n    }\n    else {\n        return indexNotFound();\n    }\n}\n\nexport function tryFindIndex(predicate, array) {\n    const matchValue = array.findIndex(predicate);\n    if (matchValue > -1) {\n        return matchValue;\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function pick(chooser, array) {\n    const loop = (i_mut) => {\n        loop:\n        while (true) {\n            const i = i_mut;\n            if (i >= array.length) {\n                return indexNotFound();\n            }\n            else {\n                const matchValue = chooser(array[i]);\n                if (matchValue != null) {\n                    return value_2(matchValue);\n                }\n                else {\n                    i_mut = (i + 1);\n                    continue loop;\n                }\n            }\n            break;\n        }\n    };\n    return loop(0);\n}\n\nexport function tryPick(chooser, array) {\n    const loop = (i_mut) => {\n        loop:\n        while (true) {\n            const i = i_mut;\n            if (i >= array.length) {\n                return void 0;\n            }\n            else {\n                const matchValue = chooser(array[i]);\n                if (matchValue == null) {\n                    i_mut = (i + 1);\n                    continue loop;\n                }\n                else {\n                    return matchValue;\n                }\n            }\n            break;\n        }\n    };\n    return loop(0);\n}\n\nexport function findBack(predicate, array) {\n    const loop = (i_mut) => {\n        loop:\n        while (true) {\n            const i = i_mut;\n            if (i < 0) {\n                return indexNotFound();\n            }\n            else if (predicate(array[i])) {\n                return array[i];\n            }\n            else {\n                i_mut = (i - 1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(array.length - 1);\n}\n\nexport function tryFindBack(predicate, array) {\n    const loop = (i_mut) => {\n        loop:\n        while (true) {\n            const i = i_mut;\n            if (i < 0) {\n                return void 0;\n            }\n            else if (predicate(array[i])) {\n                return some(array[i]);\n            }\n            else {\n                i_mut = (i - 1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(array.length - 1);\n}\n\nexport function findLastIndex(predicate, array) {\n    const loop = (i_mut) => {\n        loop:\n        while (true) {\n            const i = i_mut;\n            if (i < 0) {\n                return -1;\n            }\n            else if (predicate(array[i])) {\n                return i | 0;\n            }\n            else {\n                i_mut = (i - 1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(array.length - 1) | 0;\n}\n\nexport function findIndexBack(predicate, array) {\n    const loop = (i_mut) => {\n        loop:\n        while (true) {\n            const i = i_mut;\n            if (i < 0) {\n                return indexNotFound();\n            }\n            else if (predicate(array[i])) {\n                return i | 0;\n            }\n            else {\n                i_mut = (i - 1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(array.length - 1) | 0;\n}\n\nexport function tryFindIndexBack(predicate, array) {\n    const loop = (i_mut) => {\n        loop:\n        while (true) {\n            const i = i_mut;\n            if (i < 0) {\n                return void 0;\n            }\n            else if (predicate(array[i])) {\n                return i;\n            }\n            else {\n                i_mut = (i - 1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(array.length - 1);\n}\n\nexport function choose(chooser, array, cons) {\n    return map((x_1) => value_2(chooser(x_1)), array.filter(((x) => (chooser(x) != null))), cons);\n}\n\nexport function foldIndexed(folder, state, array) {\n    return array.reduce(((delegateArg0, delegateArg1, delegateArg2) => folder(delegateArg2, delegateArg0, delegateArg1)), state);\n}\n\nexport function fold(folder, state, array) {\n    return array.reduce(((delegateArg0, delegateArg1) => folder(delegateArg0, delegateArg1)), state);\n}\n\nexport function iterate(action, array) {\n    for (let i = 0; i <= (array.length - 1); i++) {\n        action(array[i]);\n    }\n}\n\nexport function iterateIndexed(action, array) {\n    for (let i = 0; i <= (array.length - 1); i++) {\n        action(i, array[i]);\n    }\n}\n\nexport function iterate2(action, array1, array2) {\n    if (array1.length !== array2.length) {\n        differentLengths();\n    }\n    for (let i = 0; i <= (array1.length - 1); i++) {\n        action(array1[i], array2[i]);\n    }\n}\n\nexport function iterateIndexed2(action, array1, array2) {\n    if (array1.length !== array2.length) {\n        differentLengths();\n    }\n    for (let i = 0; i <= (array1.length - 1); i++) {\n        action(i, array1[i], array2[i]);\n    }\n}\n\nexport function isEmpty(array) {\n    return array.length === 0;\n}\n\nexport function forAll(predicate, array) {\n    return array.every(predicate);\n}\n\nexport function permute(f, array) {\n    const size = array.length | 0;\n    const res = array.slice();\n    const checkFlags = new Array(size);\n    iterateIndexed((i, x) => {\n        const j = f(i) | 0;\n        if ((j < 0) ? true : (j >= size)) {\n            throw (new Error(\"Not a valid permutation\"));\n        }\n        res[j] = x;\n        checkFlags[j] = 1;\n    }, array);\n    if (!(checkFlags.every(((y) => (1 === y))))) {\n        throw (new Error(\"Not a valid permutation\"));\n    }\n    return res;\n}\n\nexport function setSlice(target, lower, upper, source) {\n    const lower_1 = defaultArg(lower, 0) | 0;\n    const upper_1 = defaultArg(upper, 0) | 0;\n    const length = (((upper_1 > 0) ? upper_1 : (target.length - 1)) - lower_1) | 0;\n    for (let i = 0; i <= length; i++) {\n        target[i + lower_1] = source[i];\n    }\n}\n\nexport function sortInPlaceBy(projection, xs, comparer) {\n    xs.sort(((x, y) => comparer.Compare(projection(x), projection(y))));\n}\n\nexport function sortInPlace(xs, comparer) {\n    xs.sort(((x, y) => comparer.Compare(x, y)));\n}\n\nexport function sort(xs, comparer) {\n    const xs_1 = xs.slice();\n    xs_1.sort(((x, y) => comparer.Compare(x, y)));\n    return xs_1;\n}\n\nexport function sortBy(projection, xs, comparer) {\n    const xs_1 = xs.slice();\n    xs_1.sort(((x, y) => comparer.Compare(projection(x), projection(y))));\n    return xs_1;\n}\n\nexport function sortDescending(xs, comparer) {\n    const xs_1 = xs.slice();\n    xs_1.sort(((x, y) => (comparer.Compare(x, y) * -1)));\n    return xs_1;\n}\n\nexport function sortByDescending(projection, xs, comparer) {\n    const xs_1 = xs.slice();\n    xs_1.sort(((x, y) => (comparer.Compare(projection(x), projection(y)) * -1)));\n    return xs_1;\n}\n\nexport function sortWith(comparer, xs) {\n    const comparer_1 = comparer;\n    const xs_1 = xs.slice();\n    xs_1.sort(comparer_1);\n    return xs_1;\n}\n\nexport function unfold(generator, state) {\n    const res = [];\n    const loop = (state_1_mut) => {\n        loop:\n        while (true) {\n            const state_1 = state_1_mut;\n            const matchValue = generator(state_1);\n            if (matchValue != null) {\n                const x = matchValue[0];\n                const s = matchValue[1];\n                void (res.push(x));\n                state_1_mut = s;\n                continue loop;\n            }\n            break;\n        }\n    };\n    loop(state);\n    return res;\n}\n\nexport function unzip(array) {\n    const len = array.length | 0;\n    const res1 = new Array(len);\n    const res2 = new Array(len);\n    iterateIndexed((i, tupledArg) => {\n        res1[i] = tupledArg[0];\n        res2[i] = tupledArg[1];\n    }, array);\n    return [res1, res2];\n}\n\nexport function unzip3(array) {\n    const len = array.length | 0;\n    const res1 = new Array(len);\n    const res2 = new Array(len);\n    const res3 = new Array(len);\n    iterateIndexed((i, tupledArg) => {\n        res1[i] = tupledArg[0];\n        res2[i] = tupledArg[1];\n        res3[i] = tupledArg[2];\n    }, array);\n    return [res1, res2, res3];\n}\n\nexport function zip(array1, array2) {\n    if (array1.length !== array2.length) {\n        differentLengths();\n    }\n    const result = new Array(array1.length);\n    for (let i = 0; i <= (array1.length - 1); i++) {\n        result[i] = [array1[i], array2[i]];\n    }\n    return result;\n}\n\nexport function zip3(array1, array2, array3) {\n    if ((array1.length !== array2.length) ? true : (array2.length !== array3.length)) {\n        differentLengths();\n    }\n    const result = new Array(array1.length);\n    for (let i = 0; i <= (array1.length - 1); i++) {\n        result[i] = [array1[i], array2[i], array3[i]];\n    }\n    return result;\n}\n\nexport function chunkBySize(chunkSize, array) {\n    if (chunkSize < 1) {\n        throw (new Error(\"The input must be positive.\\\\nParameter name: size\"));\n    }\n    if (array.length === 0) {\n        return [[]];\n    }\n    else {\n        const result = [];\n        for (let x = 0; x <= ((~(~Math.ceil(array.length / chunkSize))) - 1); x++) {\n            let slice;\n            const start_1 = (x * chunkSize) | 0;\n            slice = (array.slice(start_1, (start_1 + chunkSize)));\n            void (result.push(slice));\n        }\n        return result;\n    }\n}\n\nexport function splitAt(index, array) {\n    let start;\n    if (index < 0) {\n        throw (new Error(\"The input must be non-negative\\\\nParameter name: index\"));\n    }\n    if (index > array.length) {\n        throw (new Error(\"The input sequence has an insufficient number of elements.\\\\nParameter name: index\"));\n    }\n    return [(start = 0, array.slice(start, (start + index))), array.slice(index)];\n}\n\nexport function compareWith(comparer, array1, array2) {\n    if (array1 == null) {\n        if (array2 == null) {\n            return 0;\n        }\n        else {\n            return -1;\n        }\n    }\n    else if (array2 == null) {\n        return 1;\n    }\n    else {\n        let i = 0;\n        let result = 0;\n        const length1 = array1.length | 0;\n        const length2 = array2.length | 0;\n        if (length1 > length2) {\n            return 1;\n        }\n        else if (length1 < length2) {\n            return -1;\n        }\n        else {\n            while ((i < length1) ? (result === 0) : false) {\n                result = comparer(array1[i], array2[i]);\n                i = (i + 1);\n            }\n            return result | 0;\n        }\n    }\n}\n\nexport function equalsWith(comparer, array1, array2) {\n    return compareWith((e1, e2) => compare(e1, e2), array1, array2) === 0;\n}\n\nexport function exactlyOne(array) {\n    if (array.length === 1) {\n        return array[0];\n    }\n    else if (array.length === 0) {\n        throw (new Error(\"The input sequence was empty\\\\nParameter name: array\"));\n    }\n    else {\n        throw (new Error(\"Input array too long\\\\nParameter name: array\"));\n    }\n}\n\nexport function head(array) {\n    if (array.length === 0) {\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\n    }\n    else {\n        return array[0];\n    }\n}\n\nexport function tryHead(array) {\n    if (array.length === 0) {\n        return void 0;\n    }\n    else {\n        return some(array[0]);\n    }\n}\n\nexport function tail(array) {\n    if (array.length === 0) {\n        throw (new Error(\"Not enough elements\\\\nParameter name: array\"));\n    }\n    return array.slice(1);\n}\n\nexport function item(index, array) {\n    return array[index];\n}\n\nexport function tryItem(index, array) {\n    if ((index < 0) ? true : (index >= array.length)) {\n        return void 0;\n    }\n    else {\n        return some(array[index]);\n    }\n}\n\nexport function foldBackIndexed(folder, array, state) {\n    return array.reduceRight(((delegateArg0, delegateArg1, delegateArg2) => folder(delegateArg2, delegateArg1, delegateArg0)), state);\n}\n\nexport function foldBack(folder, array, state) {\n    return array.reduceRight(((delegateArg0, delegateArg1) => folder(delegateArg1, delegateArg0)), state);\n}\n\nexport function foldIndexed2(folder, state, array1, array2) {\n    let acc = state;\n    if (array1.length !== array2.length) {\n        throw (new Error(\"Arrays have different lengths\"));\n    }\n    for (let i = 0; i <= (array1.length - 1); i++) {\n        acc = folder(i, acc, array1[i], array2[i]);\n    }\n    return acc;\n}\n\nexport function fold2(folder, state, array1, array2) {\n    return foldIndexed2((_arg1, acc, x, y) => folder(acc, x, y), state, array1, array2);\n}\n\nexport function foldBackIndexed2(folder, array1, array2, state) {\n    let acc = state;\n    if (array1.length !== array2.length) {\n        differentLengths();\n    }\n    const size = array1.length | 0;\n    for (let i = 1; i <= size; i++) {\n        acc = folder(i - 1, array1[size - i], array2[size - i], acc);\n    }\n    return acc;\n}\n\nexport function foldBack2(f, array1, array2, state) {\n    return foldBackIndexed2((_arg1, x, y, acc) => f(x, y, acc), array1, array2, state);\n}\n\nexport function reduce(reduction, array) {\n    if (array.length === 0) {\n        throw (new Error(\"The input array was empty\"));\n    }\n    const reduction_1 = reduction;\n    return array.reduce(reduction_1);\n}\n\nexport function reduceBack(reduction, array) {\n    if (array.length === 0) {\n        throw (new Error(\"The input array was empty\"));\n    }\n    const reduction_1 = reduction;\n    return array.reduceRight(reduction_1);\n}\n\nexport function forAll2(predicate, array1, array2) {\n    return fold2((acc, x, y) => (acc ? predicate(x, y) : false), true, array1, array2);\n}\n\nexport function existsOffset(predicate_mut, array_mut, index_mut) {\n    existsOffset:\n    while (true) {\n        const predicate = predicate_mut, array = array_mut, index = index_mut;\n        if (index === array.length) {\n            return false;\n        }\n        else if (predicate(array[index])) {\n            return true;\n        }\n        else {\n            predicate_mut = predicate;\n            array_mut = array;\n            index_mut = (index + 1);\n            continue existsOffset;\n        }\n        break;\n    }\n}\n\nexport function exists(predicate, array) {\n    return existsOffset(predicate, array, 0);\n}\n\nexport function existsOffset2(predicate_mut, array1_mut, array2_mut, index_mut) {\n    existsOffset2:\n    while (true) {\n        const predicate = predicate_mut, array1 = array1_mut, array2 = array2_mut, index = index_mut;\n        if (index === array1.length) {\n            return false;\n        }\n        else if (predicate(array1[index], array2[index])) {\n            return true;\n        }\n        else {\n            predicate_mut = predicate;\n            array1_mut = array1;\n            array2_mut = array2;\n            index_mut = (index + 1);\n            continue existsOffset2;\n        }\n        break;\n    }\n}\n\nexport function exists2(predicate, array1, array2) {\n    if (array1.length !== array2.length) {\n        differentLengths();\n    }\n    return existsOffset2(predicate, array1, array2, 0);\n}\n\nexport function sum(array, adder) {\n    let acc = adder.GetZero();\n    for (let i = 0; i <= (array.length - 1); i++) {\n        acc = adder.Add(acc, array[i]);\n    }\n    return acc;\n}\n\nexport function sumBy(projection, array, adder) {\n    let acc = adder.GetZero();\n    for (let i = 0; i <= (array.length - 1); i++) {\n        acc = adder.Add(acc, projection(array[i]));\n    }\n    return acc;\n}\n\nexport function maxBy(projection, xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? y : x), xs);\n}\n\nexport function max(xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? y : x), xs);\n}\n\nexport function minBy(projection, xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? x : y), xs);\n}\n\nexport function min(xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? x : y), xs);\n}\n\nexport function average(array, averager) {\n    if (array.length === 0) {\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\n    }\n    let total = averager.GetZero();\n    for (let i = 0; i <= (array.length - 1); i++) {\n        total = averager.Add(total, array[i]);\n    }\n    return averager.DivideByInt(total, array.length);\n}\n\nexport function averageBy(projection, array, averager) {\n    if (array.length === 0) {\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\n    }\n    let total = averager.GetZero();\n    for (let i = 0; i <= (array.length - 1); i++) {\n        total = averager.Add(total, projection(array[i]));\n    }\n    return averager.DivideByInt(total, array.length);\n}\n\nexport function windowed(windowSize, source) {\n    if (windowSize <= 0) {\n        throw (new Error(\"windowSize must be positive\"));\n    }\n    let res;\n    const len = max_1((x, y) => comparePrimitives(x, y), 0, source.length - windowSize) | 0;\n    res = (new Array(len));\n    for (let i = windowSize; i <= source.length; i++) {\n        res[i - windowSize] = source.slice(i - windowSize, (i - 1) + 1);\n    }\n    return res;\n}\n\nexport function splitInto(chunks, array) {\n    if (chunks < 1) {\n        throw (new Error(\"The input must be positive.\\\\nParameter name: chunks\"));\n    }\n    if (array.length === 0) {\n        return [[]];\n    }\n    else {\n        const result = [];\n        const chunks_1 = min_1((x, y) => comparePrimitives(x, y), chunks, array.length) | 0;\n        const minChunkSize = (~(~(array.length / chunks_1))) | 0;\n        const chunksWithExtraItem = (array.length % chunks_1) | 0;\n        for (let i = 0; i <= (chunks_1 - 1); i++) {\n            const chunkSize = ((i < chunksWithExtraItem) ? (minChunkSize + 1) : minChunkSize) | 0;\n            let slice;\n            const start_1 = ((i * minChunkSize) + min_1((x_1, y_1) => comparePrimitives(x_1, y_1), chunksWithExtraItem, i)) | 0;\n            slice = (array.slice(start_1, (start_1 + chunkSize)));\n            void (result.push(slice));\n        }\n        return result;\n    }\n}\n\nexport function transpose(arrays, cons) {\n    const arrays_1 = Array.isArray(arrays) ? arrays : (Array.from(arrays));\n    const len = arrays_1.length | 0;\n    if (len === 0) {\n        return new Array(0);\n    }\n    else {\n        const lenInner = arrays_1[0].length | 0;\n        if (!forAll((a) => (a.length === lenInner), arrays_1)) {\n            differentLengths();\n        }\n        const result = new Array(lenInner);\n        for (let i = 0; i <= (lenInner - 1); i++) {\n            result[i] = Helpers_allocateArrayFromCons(cons, len);\n            for (let j = 0; j <= (len - 1); j++) {\n                result[i][j] = arrays_1[j][i];\n            }\n        }\n        return result;\n    }\n}\n\n","import { List } from \"./Types.js\";\nimport { defaultArg, value as value_1, some } from \"./Option.js\";\nimport { FSharpRef, List as List_1 } from \"./Types.js\";\nimport { transpose as transpose_1, pairwise as pairwise_1, collect as collect_1, scanBack as scanBack_1, scan as scan_1, foldBack2 as foldBack2_1, fold2 as fold2_1, fold as fold_1, map as map_1 } from \"./Seq.js\";\nimport { uncurry, count } from \"./Util.js\";\nimport { splitInto as splitInto_1, chunkBySize as chunkBySize_1, permute as permute_1, findIndexBack as findIndexBack_1, tryFindIndexBack as tryFindIndexBack_1 } from \"./Array.js\";\nimport { HashSet } from \"./MutableSet.js\";\nimport { getItemFromDict, addToDict, tryGetValue, addToSet } from \"./MapUtil.js\";\nimport { Dictionary } from \"./MutableMap.js\";\n\nexport function empty() {\n    return new List();\n}\n\nexport function singleton(x) {\n    return new List(x, empty());\n}\n\nexport function cons(x, xs) {\n    return new List(x, xs);\n}\n\nexport function head(_arg1) {\n    if (_arg1.tail != null) {\n        return _arg1.head;\n    }\n    else {\n        throw (new Error(\"List was empty\"));\n    }\n}\n\nexport function tryHead(_arg1) {\n    if (_arg1.tail != null) {\n        return some(_arg1.head);\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function tail(_arg1) {\n    if (_arg1.tail != null) {\n        return _arg1.tail;\n    }\n    else {\n        throw (new Error(\"List was empty\"));\n    }\n}\n\nexport function last(_arg1_mut) {\n    last:\n    while (true) {\n        const _arg1 = _arg1_mut;\n        if (_arg1.tail != null) {\n            if (_arg1.tail.tail == null) {\n                return _arg1.head;\n            }\n            else {\n                _arg1_mut = _arg1.tail;\n                continue last;\n            }\n        }\n        else {\n            throw (new Error(\"List was empty\"));\n        }\n        break;\n    }\n}\n\nexport function tryLast(_arg1_mut) {\n    tryLast:\n    while (true) {\n        const _arg1 = _arg1_mut;\n        if (_arg1.tail != null) {\n            if (_arg1.tail.tail == null) {\n                return some(_arg1.head);\n            }\n            else {\n                _arg1_mut = _arg1.tail;\n                continue tryLast;\n            }\n        }\n        else {\n            return void 0;\n        }\n        break;\n    }\n}\n\nexport function compareWith(comparer, xs, ys) {\n    if (xs === ys) {\n        return 0;\n    }\n    else {\n        const loop = (xs_1_mut, ys_1_mut) => {\n            loop:\n            while (true) {\n                const xs_1 = xs_1_mut, ys_1 = ys_1_mut;\n                const matchValue = [xs_1, ys_1];\n                if (matchValue[0].tail != null) {\n                    if (matchValue[1].tail != null) {\n                        const matchValue_1 = comparer(matchValue[0].head, matchValue[1].head) | 0;\n                        if (matchValue_1 === 0) {\n                            xs_1_mut = matchValue[0].tail;\n                            ys_1_mut = matchValue[1].tail;\n                            continue loop;\n                        }\n                        else {\n                            return matchValue_1 | 0;\n                        }\n                    }\n                    else {\n                        return 1;\n                    }\n                }\n                else if (matchValue[1].tail == null) {\n                    return 0;\n                }\n                else {\n                    return -1;\n                }\n                break;\n            }\n        };\n        return loop(xs, ys) | 0;\n    }\n}\n\nexport function foldIndexedAux(f_mut, i_mut, acc_mut, _arg1_mut) {\n    foldIndexedAux:\n    while (true) {\n        const f = f_mut, i = i_mut, acc = acc_mut, _arg1 = _arg1_mut;\n        if (_arg1.tail != null) {\n            f_mut = f;\n            i_mut = (i + 1);\n            acc_mut = f(i, acc, _arg1.head);\n            _arg1_mut = _arg1.tail;\n            continue foldIndexedAux;\n        }\n        else {\n            return acc;\n        }\n        break;\n    }\n}\n\nexport function foldIndexed(f, state, xs) {\n    return foldIndexedAux(f, 0, state, xs);\n}\n\nexport function fold(f_mut, state_mut, xs_mut) {\n    fold:\n    while (true) {\n        const f = f_mut, state = state_mut, xs = xs_mut;\n        if (xs.tail != null) {\n            f_mut = f;\n            state_mut = f(state, xs.head);\n            xs_mut = xs.tail;\n            continue fold;\n        }\n        else {\n            return state;\n        }\n        break;\n    }\n}\n\nexport function reverse(xs) {\n    return fold((acc, x) => (new List_1(x, acc)), new List_1(), xs);\n}\n\nexport function foldBack(f, xs, state) {\n    return fold((acc, x) => f(x, acc), state, reverse(xs));\n}\n\nexport function toSeq(xs) {\n    return map_1((x) => x, xs);\n}\n\nexport function ofSeq(xs) {\n    return reverse(fold_1((acc, x) => (new List_1(x, acc)), new List_1(), xs));\n}\n\nexport function concat(lists) {\n    return reverse(fold_1((state, xs) => fold((acc, x) => (new List_1(x, acc)), state, xs), new List_1(), lists));\n}\n\nexport function foldIndexed2Aux(f_mut, i_mut, acc_mut, bs_mut, cs_mut) {\n    foldIndexed2Aux:\n    while (true) {\n        const f = f_mut, i = i_mut, acc = acc_mut, bs = bs_mut, cs = cs_mut;\n        const matchValue = [bs, cs];\n        let pattern_matching_result, x, xs, y, ys;\n        if (matchValue[0].tail != null) {\n            if (matchValue[1].tail != null) {\n                pattern_matching_result = 1;\n                x = matchValue[0].head;\n                xs = matchValue[0].tail;\n                y = matchValue[1].head;\n                ys = matchValue[1].tail;\n            }\n            else {\n                pattern_matching_result = 2;\n            }\n        }\n        else if (matchValue[1].tail == null) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 2;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return acc;\n            }\n            case 1: {\n                f_mut = f;\n                i_mut = (i + 1);\n                acc_mut = f(i, acc, x, y);\n                bs_mut = xs;\n                cs_mut = ys;\n                continue foldIndexed2Aux;\n            }\n            case 2: {\n                throw (new Error(\"Lists had different lengths\"));\n            }\n        }\n        break;\n    }\n}\n\nexport function foldIndexed2(f, state, xs, ys) {\n    return foldIndexed2Aux(f, 0, state, xs, ys);\n}\n\nexport function fold2(f, state, xs, ys) {\n    return fold2_1(f, state, xs, ys);\n}\n\nexport function foldBack2(f, xs, ys, state) {\n    return foldBack2_1(f, xs, ys, state);\n}\n\nexport function unfold(f, state) {\n    const unfoldInner = (acc_mut, state_1_mut) => {\n        unfoldInner:\n        while (true) {\n            const acc = acc_mut, state_1 = state_1_mut;\n            const matchValue = f(state_1);\n            if (matchValue != null) {\n                acc_mut = (new List_1(matchValue[0], acc));\n                state_1_mut = matchValue[1];\n                continue unfoldInner;\n            }\n            else {\n                return reverse(acc);\n            }\n            break;\n        }\n    };\n    return unfoldInner(new List_1(), state);\n}\n\nexport function foldIndexed3Aux(f_mut, i_mut, acc_mut, bs_mut, cs_mut, ds_mut) {\n    foldIndexed3Aux:\n    while (true) {\n        const f = f_mut, i = i_mut, acc = acc_mut, bs = bs_mut, cs = cs_mut, ds = ds_mut;\n        const matchValue = [bs, cs, ds];\n        let pattern_matching_result, x, xs, y, ys, z, zs;\n        if (matchValue[0].tail != null) {\n            if (matchValue[1].tail != null) {\n                if (matchValue[2].tail != null) {\n                    pattern_matching_result = 1;\n                    x = matchValue[0].head;\n                    xs = matchValue[0].tail;\n                    y = matchValue[1].head;\n                    ys = matchValue[1].tail;\n                    z = matchValue[2].head;\n                    zs = matchValue[2].tail;\n                }\n                else {\n                    pattern_matching_result = 2;\n                }\n            }\n            else {\n                pattern_matching_result = 2;\n            }\n        }\n        else if (matchValue[1].tail == null) {\n            if (matchValue[2].tail == null) {\n                pattern_matching_result = 0;\n            }\n            else {\n                pattern_matching_result = 2;\n            }\n        }\n        else {\n            pattern_matching_result = 2;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return acc;\n            }\n            case 1: {\n                f_mut = f;\n                i_mut = (i + 1);\n                acc_mut = f(i, acc, x, y, z);\n                bs_mut = xs;\n                cs_mut = ys;\n                ds_mut = zs;\n                continue foldIndexed3Aux;\n            }\n            case 2: {\n                throw (new Error(\"Lists had different lengths\"));\n            }\n        }\n        break;\n    }\n}\n\nexport function foldIndexed3(f, seed, xs, ys, zs) {\n    return foldIndexed3Aux(f, 0, seed, xs, ys, zs);\n}\n\nexport function fold3(f, state, xs, ys, zs) {\n    return foldIndexed3((_arg1, acc, x, y, z) => f(acc, x, y, z), state, xs, ys, zs);\n}\n\nexport function scan(f, state, xs) {\n    return ofSeq(scan_1(f, state, xs));\n}\n\nexport function scanBack(f, xs, state) {\n    return ofSeq(scanBack_1(f, xs, state));\n}\n\nexport function length(xs) {\n    return fold((acc, _arg1) => (acc + 1), 0, xs);\n}\n\nexport function append(xs, ys) {\n    return fold((acc, x) => (new List_1(x, acc)), ys, reverse(xs));\n}\n\nexport function collect(f, xs) {\n    return ofSeq(collect_1(f, xs));\n}\n\nexport function map(f, xs) {\n    return reverse(fold((acc, x) => (new List_1(f(x), acc)), new List_1(), xs));\n}\n\nexport function mapIndexed(f, xs) {\n    return reverse(foldIndexed((i, acc, x) => (new List_1(f(i, x), acc)), new List_1(), xs));\n}\n\nexport function indexed(xs) {\n    return mapIndexed((i, x) => [i, x], xs);\n}\n\nexport function map2(f, xs, ys) {\n    return reverse(fold2((acc, x, y) => (new List_1(f(x, y), acc)), new List_1(), xs, ys));\n}\n\nexport function mapIndexed2(f, xs, ys) {\n    return reverse(foldIndexed2((i, acc, x, y) => (new List_1(f(i, x, y), acc)), new List_1(), xs, ys));\n}\n\nexport function map3(f, xs, ys, zs) {\n    return reverse(fold3((acc, x, y, z) => (new List_1(f(x, y, z), acc)), new List_1(), xs, ys, zs));\n}\n\nexport function mapIndexed3(f, xs, ys, zs) {\n    return reverse(foldIndexed3((i, acc, x, y, z) => (new List_1(f(i, x, y, z), acc)), new List_1(), xs, ys, zs));\n}\n\nexport function mapFold(f, s, xs) {\n    const patternInput_1 = fold((tupledArg, x) => {\n        const patternInput = f(tupledArg[1], x);\n        return [new List_1(patternInput[0], tupledArg[0]), patternInput[1]];\n    }, [new List_1(), s], xs);\n    return [reverse(patternInput_1[0]), patternInput_1[1]];\n}\n\nexport function mapFoldBack(f, xs, s) {\n    return mapFold((s_1, v) => f(v, s_1), s, reverse(xs));\n}\n\nexport function iterate(f, xs) {\n    return fold((unitVar0, x) => {\n        f(x);\n    }, void 0, xs);\n}\n\nexport function iterate2(f, xs, ys) {\n    return fold2((unitVar0, x, y) => {\n        f(x, y);\n    }, void 0, xs, ys);\n}\n\nexport function iterateIndexed(f, xs) {\n    return foldIndexed((i, unitVar1, x) => {\n        f(i, x);\n    }, void 0, xs);\n}\n\nexport function iterateIndexed2(f, xs, ys) {\n    return foldIndexed2((i, unitVar1, x, y) => {\n        f(i, x, y);\n    }, void 0, xs, ys);\n}\n\nexport function ofArrayWithTail(xs, tail_1) {\n    let res = tail_1;\n    for (let i = count(xs) - 1; i >= 0; i--) {\n        res = (new List_1(xs[i], res));\n    }\n    return res;\n}\n\nexport function ofArray(xs) {\n    return ofArrayWithTail(xs, new List_1());\n}\n\nexport function isEmpty(_arg1) {\n    if (_arg1.tail == null) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nexport function tryPickIndexedAux(f_mut, i_mut, _arg1_mut) {\n    tryPickIndexedAux:\n    while (true) {\n        const f = f_mut, i = i_mut, _arg1 = _arg1_mut;\n        if (_arg1.tail != null) {\n            const result = f(i, _arg1.head);\n            if (result == null) {\n                f_mut = f;\n                i_mut = (i + 1);\n                _arg1_mut = _arg1.tail;\n                continue tryPickIndexedAux;\n            }\n            else {\n                return result;\n            }\n        }\n        else {\n            return void 0;\n        }\n        break;\n    }\n}\n\nexport function tryPickIndexed(f, xs) {\n    return tryPickIndexedAux(f, 0, xs);\n}\n\nexport function tryPick(f, xs) {\n    return tryPickIndexed((_arg1, x) => f(x), xs);\n}\n\nexport function pick(f, xs) {\n    const matchValue = tryPick(f, xs);\n    if (matchValue != null) {\n        return value_1(matchValue);\n    }\n    else {\n        throw (new Error(\"List did not contain any matching elements\"));\n    }\n}\n\nexport function tryFindIndexed(f, xs) {\n    return tryPickIndexed((i, x) => (f(i, x) ? some(x) : (void 0)), xs);\n}\n\nexport function tryFind(f, xs) {\n    return tryPickIndexed((_arg1, x) => (f(x) ? some(x) : (void 0)), xs);\n}\n\nexport function findIndexed(f, xs) {\n    const matchValue = tryFindIndexed(f, xs);\n    if (matchValue != null) {\n        return value_1(matchValue);\n    }\n    else {\n        throw (new Error(\"List did not contain any matching elements\"));\n    }\n}\n\nexport function find(f, xs) {\n    return findIndexed((_arg1, x) => f(x), xs);\n}\n\nexport function findBack(f, xs) {\n    return find(f, reverse(xs));\n}\n\nexport function tryFindBack(f, xs) {\n    return tryFind(f, reverse(xs));\n}\n\nexport function tryFindIndex(f, xs) {\n    return tryPickIndexed((i, x) => (f(x) ? i : (void 0)), xs);\n}\n\nexport function tryFindIndexBack(f, xs) {\n    return tryFindIndexBack_1(f, Array.from(xs));\n}\n\nexport function findIndex(f, xs) {\n    const matchValue = tryFindIndex(f, xs);\n    if (matchValue != null) {\n        return matchValue | 0;\n    }\n    else {\n        throw (new Error(\"List did not contain any matching elements\"));\n    }\n}\n\nexport function findIndexBack(f, xs) {\n    return findIndexBack_1(f, Array.from(xs));\n}\n\nexport function item(n, xs) {\n    return findIndexed((i, _arg1) => (n === i), xs);\n}\n\nexport function tryItem(n, xs) {\n    return tryFindIndexed((i, _arg1) => (n === i), xs);\n}\n\nexport function filter(f, xs) {\n    return reverse(fold((acc, x) => (f(x) ? (new List_1(x, acc)) : acc), new List_1(), xs));\n}\n\nexport function partition(f, xs) {\n    return fold(uncurry(2, (tupledArg) => {\n        const lacc = tupledArg[0];\n        const racc = tupledArg[1];\n        return (x) => (f(x) ? [new List_1(x, lacc), racc] : [lacc, new List_1(x, racc)]);\n    }), [new List_1(), new List_1()], reverse(xs));\n}\n\nexport function choose(f, xs) {\n    return reverse(fold((acc, x) => {\n        const matchValue = f(x);\n        return (matchValue == null) ? acc : (new List_1(value_1(matchValue), acc));\n    }, new List_1(), xs));\n}\n\nexport function contains(value, list, eq) {\n    const loop = (xs_mut) => {\n        loop:\n        while (true) {\n            const xs = xs_mut;\n            if (xs.tail != null) {\n                if (eq.Equals(value, xs.head)) {\n                    return true;\n                }\n                else {\n                    xs_mut = xs.tail;\n                    continue loop;\n                }\n            }\n            else {\n                return false;\n            }\n            break;\n        }\n    };\n    return loop(list);\n}\n\nexport function except(itemsToExclude, array, eq) {\n    if (isEmpty(array)) {\n        return array;\n    }\n    else {\n        const cached = new HashSet(itemsToExclude, eq);\n        return filter((arg00) => addToSet(arg00, cached), array);\n    }\n}\n\nexport function initialize(n, f) {\n    let xs = new List_1();\n    for (let i = 0; i <= (n - 1); i++) {\n        xs = (new List_1(f(i), xs));\n    }\n    return reverse(xs);\n}\n\nexport function replicate(n, x) {\n    return initialize(n, (_arg1) => x);\n}\n\nexport function reduce(f, _arg1) {\n    if (_arg1.tail != null) {\n        return fold(f, _arg1.head, _arg1.tail);\n    }\n    else {\n        throw (new Error(\"List was empty\"));\n    }\n}\n\nexport function reduceBack(f, _arg1) {\n    if (_arg1.tail != null) {\n        return foldBack(f, _arg1.tail, _arg1.head);\n    }\n    else {\n        throw (new Error(\"List was empty\"));\n    }\n}\n\nexport function forAll(f, xs) {\n    return fold((acc, x) => (acc ? f(x) : false), true, xs);\n}\n\nexport function forAll2(f, xs, ys) {\n    return fold2((acc, x, y) => (acc ? f(x, y) : false), true, xs, ys);\n}\n\nexport function exists(f_mut, _arg1_mut) {\n    exists:\n    while (true) {\n        const f = f_mut, _arg1 = _arg1_mut;\n        if (_arg1.tail != null) {\n            if (f(_arg1.head)) {\n                return true;\n            }\n            else {\n                f_mut = f;\n                _arg1_mut = _arg1.tail;\n                continue exists;\n            }\n        }\n        else {\n            return false;\n        }\n        break;\n    }\n}\n\nexport function exists2(f_mut, bs_mut, cs_mut) {\n    exists2:\n    while (true) {\n        const f = f_mut, bs = bs_mut, cs = cs_mut;\n        const matchValue = [bs, cs];\n        let pattern_matching_result, x, xs, y, ys;\n        if (matchValue[0].tail != null) {\n            if (matchValue[1].tail != null) {\n                pattern_matching_result = 1;\n                x = matchValue[0].head;\n                xs = matchValue[0].tail;\n                y = matchValue[1].head;\n                ys = matchValue[1].tail;\n            }\n            else {\n                pattern_matching_result = 2;\n            }\n        }\n        else if (matchValue[1].tail == null) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 2;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return false;\n            }\n            case 1: {\n                if (f(x, y)) {\n                    return true;\n                }\n                else {\n                    f_mut = f;\n                    bs_mut = xs;\n                    cs_mut = ys;\n                    continue exists2;\n                }\n            }\n            case 2: {\n                throw (new Error(\"Lists had different lengths\"));\n            }\n        }\n        break;\n    }\n}\n\nexport function unzip(xs) {\n    return foldBack((tupledArg, tupledArg_1) => [new List_1(tupledArg[0], tupledArg_1[0]), new List_1(tupledArg[1], tupledArg_1[1])], xs, [new List_1(), new List_1()]);\n}\n\nexport function unzip3(xs) {\n    return foldBack((tupledArg, tupledArg_1) => [new List_1(tupledArg[0], tupledArg_1[0]), new List_1(tupledArg[1], tupledArg_1[1]), new List_1(tupledArg[2], tupledArg_1[2])], xs, [new List_1(), new List_1(), new List_1()]);\n}\n\nexport function zip(xs, ys) {\n    return map2((x, y) => [x, y], xs, ys);\n}\n\nexport function zip3(xs, ys, zs) {\n    return map3((x, y, z) => [x, y, z], xs, ys, zs);\n}\n\nexport function sort(xs, comparer) {\n    let xs_1;\n    return ofArray((xs_1 = Array.from(xs), (xs_1.sort(((x, y) => comparer.Compare(x, y))), xs_1)));\n}\n\nexport function sortBy(projection, xs, comparer) {\n    let xs_1;\n    return ofArray((xs_1 = Array.from(xs), (xs_1.sort(((x, y) => comparer.Compare(projection(x), projection(y)))), xs_1)));\n}\n\nexport function sortDescending(xs, comparer) {\n    let xs_1;\n    return ofArray((xs_1 = Array.from(xs), (xs_1.sort(((x, y) => (comparer.Compare(x, y) * -1))), xs_1)));\n}\n\nexport function sortByDescending(projection, xs, comparer) {\n    let xs_1;\n    return ofArray((xs_1 = Array.from(xs), (xs_1.sort(((x, y) => (comparer.Compare(projection(x), projection(y)) * -1))), xs_1)));\n}\n\nexport function sortWith(comparer, xs) {\n    let comparer_1, xs_1;\n    return ofArray((comparer_1 = comparer, (xs_1 = Array.from(xs), (xs_1.sort(comparer_1), xs_1))));\n}\n\nexport function sum(xs, adder) {\n    return fold((acc, x) => adder.Add(acc, x), adder.GetZero(), xs);\n}\n\nexport function sumBy(f, xs, adder) {\n    return fold((acc, x) => adder.Add(acc, f(x)), adder.GetZero(), xs);\n}\n\nexport function maxBy(projection, xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? y : x), xs);\n}\n\nexport function max(li, comparer) {\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? y : x), li);\n}\n\nexport function minBy(projection, xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? x : y), xs);\n}\n\nexport function min(xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? x : y), xs);\n}\n\nexport function average(xs, averager) {\n    return averager.DivideByInt(fold((acc, x) => averager.Add(acc, x), averager.GetZero(), xs), length(xs));\n}\n\nexport function averageBy(f, xs, averager) {\n    return averager.DivideByInt(fold((acc, x) => averager.Add(acc, f(x)), averager.GetZero(), xs), length(xs));\n}\n\nexport function permute(f, xs) {\n    return ofArray(permute_1(f, Array.from(xs)));\n}\n\nexport function chunkBySize(chunkSize, xs) {\n    return map((xs_2) => ofArray(xs_2), ofArray(chunkBySize_1(chunkSize, Array.from(xs))));\n}\n\nexport function skip(i, xs) {\n    const skipInner = (i_1_mut, xs_1_mut) => {\n        skipInner:\n        while (true) {\n            const i_1 = i_1_mut, xs_1 = xs_1_mut;\n            const matchValue = [i_1, xs_1];\n            if (matchValue[0] === 0) {\n                return xs_1;\n            }\n            else if (matchValue[1].tail != null) {\n                i_1_mut = (i_1 - 1);\n                xs_1_mut = matchValue[1].tail;\n                continue skipInner;\n            }\n            else {\n                throw (new Error(\"The input sequence has an insufficient number of elements.\"));\n            }\n            break;\n        }\n    };\n    const matchValue_1 = [i, xs];\n    if (matchValue_1[0] < 0) {\n        throw (new Error(\"The input must be non-negative.\"));\n    }\n    else {\n        let pattern_matching_result, i_4, xs_4;\n        if (matchValue_1[0] === 0) {\n            pattern_matching_result = 0;\n        }\n        else if (matchValue_1[0] === 1) {\n            if (matchValue_1[1].tail != null) {\n                pattern_matching_result = 1;\n            }\n            else {\n                pattern_matching_result = 2;\n                i_4 = matchValue_1[0];\n                xs_4 = matchValue_1[1];\n            }\n        }\n        else {\n            pattern_matching_result = 2;\n            i_4 = matchValue_1[0];\n            xs_4 = matchValue_1[1];\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return xs;\n            }\n            case 1: {\n                return matchValue_1[1].tail;\n            }\n            case 2: {\n                return skipInner(i_4, xs_4);\n            }\n        }\n    }\n}\n\nexport function skipWhile(predicate_mut, xs_mut) {\n    skipWhile:\n    while (true) {\n        const predicate = predicate_mut, xs = xs_mut;\n        let pattern_matching_result, h_1, t_1;\n        if (xs.tail != null) {\n            if (predicate(xs.head)) {\n                pattern_matching_result = 0;\n                h_1 = xs.head;\n                t_1 = xs.tail;\n            }\n            else {\n                pattern_matching_result = 1;\n            }\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                predicate_mut = predicate;\n                xs_mut = t_1;\n                continue skipWhile;\n            }\n            case 1: {\n                return xs;\n            }\n        }\n        break;\n    }\n}\n\nexport function takeSplitAux(error_mut, i_mut, acc_mut, xs_mut) {\n    takeSplitAux:\n    while (true) {\n        const error = error_mut, i = i_mut, acc = acc_mut, xs = xs_mut;\n        const matchValue = [i, xs];\n        if (matchValue[0] === 0) {\n            return [reverse(acc), xs];\n        }\n        else if (matchValue[1].tail != null) {\n            error_mut = error;\n            i_mut = (i - 1);\n            acc_mut = (new List_1(matchValue[1].head, acc));\n            xs_mut = matchValue[1].tail;\n            continue takeSplitAux;\n        }\n        else if (error) {\n            throw (new Error(\"The input sequence has an insufficient number of elements.\"));\n        }\n        else {\n            return [reverse(acc), xs];\n        }\n        break;\n    }\n}\n\nexport function take(i, xs) {\n    const matchValue = [i, xs];\n    if (matchValue[0] < 0) {\n        throw (new Error(\"The input must be non-negative.\"));\n    }\n    else {\n        let pattern_matching_result, i_3, xs_1;\n        if (matchValue[0] === 0) {\n            pattern_matching_result = 0;\n        }\n        else if (matchValue[0] === 1) {\n            if (matchValue[1].tail != null) {\n                pattern_matching_result = 1;\n            }\n            else {\n                pattern_matching_result = 2;\n                i_3 = matchValue[0];\n                xs_1 = matchValue[1];\n            }\n        }\n        else {\n            pattern_matching_result = 2;\n            i_3 = matchValue[0];\n            xs_1 = matchValue[1];\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return new List_1();\n            }\n            case 1: {\n                return new List_1(matchValue[1].head, new List_1());\n            }\n            case 2: {\n                return takeSplitAux(true, i_3, new List_1(), xs_1)[0];\n            }\n        }\n    }\n}\n\nexport function takeWhile(predicate, xs) {\n    if (xs.tail != null) {\n        if (xs.tail.tail == null) {\n            if (predicate(xs.head)) {\n                return xs;\n            }\n            else {\n                return xs.tail;\n            }\n        }\n        else if (!predicate(xs.head)) {\n            return new List_1();\n        }\n        else {\n            return new List_1(xs.head, takeWhile(predicate, xs.tail));\n        }\n    }\n    else {\n        return xs;\n    }\n}\n\nexport function truncate(i, xs) {\n    const matchValue = [i, xs];\n    if (matchValue[0] < 0) {\n        throw (new Error(\"The input must be non-negative.\"));\n    }\n    else {\n        let pattern_matching_result, i_3, xs_1;\n        if (matchValue[0] === 0) {\n            pattern_matching_result = 0;\n        }\n        else if (matchValue[0] === 1) {\n            if (matchValue[1].tail != null) {\n                pattern_matching_result = 1;\n            }\n            else {\n                pattern_matching_result = 2;\n                i_3 = matchValue[0];\n                xs_1 = matchValue[1];\n            }\n        }\n        else {\n            pattern_matching_result = 2;\n            i_3 = matchValue[0];\n            xs_1 = matchValue[1];\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return new List_1();\n            }\n            case 1: {\n                return new List_1(matchValue[1].head, new List_1());\n            }\n            case 2: {\n                return takeSplitAux(false, i_3, new List_1(), xs_1)[0];\n            }\n        }\n    }\n}\n\nexport function splitAt(i, xs) {\n    const matchValue = [i, xs];\n    if (matchValue[0] < 0) {\n        throw (new Error(\"The input must be non-negative.\"));\n    }\n    else {\n        let pattern_matching_result, i_3, xs_2;\n        if (matchValue[0] === 0) {\n            pattern_matching_result = 0;\n        }\n        else if (matchValue[0] === 1) {\n            if (matchValue[1].tail != null) {\n                pattern_matching_result = 1;\n            }\n            else {\n                pattern_matching_result = 2;\n                i_3 = matchValue[0];\n                xs_2 = matchValue[1];\n            }\n        }\n        else {\n            pattern_matching_result = 2;\n            i_3 = matchValue[0];\n            xs_2 = matchValue[1];\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return [new List_1(), xs];\n            }\n            case 1: {\n                return [new List_1(matchValue[1].head, new List_1()), matchValue[1].tail];\n            }\n            case 2: {\n                return takeSplitAux(true, i_3, new List_1(), xs_2);\n            }\n        }\n    }\n}\n\nexport function outOfRange() {\n    throw (new Error(\"Index out of range\"));\n}\n\nexport function getSlice(lower, upper, xs) {\n    const lower_1 = defaultArg(lower, 0) | 0;\n    const hasUpper = upper != null;\n    if (lower_1 < 0) {\n        return outOfRange();\n    }\n    else if (hasUpper ? (value_1(upper) < lower_1) : false) {\n        return new List_1();\n    }\n    else {\n        let lastIndex = -1;\n        const res = foldIndexed((i, acc, x) => {\n            lastIndex = i;\n            if ((lower_1 <= i) ? ((!hasUpper) ? true : (i <= value_1(upper))) : false) {\n                return new List_1(x, acc);\n            }\n            else {\n                return acc;\n            }\n        }, new List_1(), xs);\n        if ((lower_1 > (lastIndex + 1)) ? true : (hasUpper ? (value_1(upper) > lastIndex) : false)) {\n            outOfRange();\n        }\n        return reverse(res);\n    }\n}\n\nexport function distinctBy(projection, xs, eq) {\n    const hashSet = new HashSet([], eq);\n    return filter((arg) => addToSet(projection(arg), hashSet), xs);\n}\n\nexport function distinct(xs, eq) {\n    return distinctBy((x) => x, xs, eq);\n}\n\nexport function exactlyOne(xs) {\n    if (xs.tail != null) {\n        if (xs.tail.tail != null) {\n            throw (new Error(\"Input list too long\\\\nParameter name: list\"));\n        }\n        else {\n            return xs.head;\n        }\n    }\n    else {\n        throw (new Error(\"The input sequence was empty\\\\nParameter name: list\"));\n    }\n}\n\nexport function groupBy(projection, xs, eq) {\n    const dict = new Dictionary([], eq);\n    let keys = new List_1();\n    iterate((v) => {\n        const key = projection(v);\n        let matchValue;\n        let outArg = null;\n        matchValue = [tryGetValue(dict, key, new FSharpRef(() => outArg, (v_1) => {\n            outArg = v_1;\n        })), outArg];\n        if (matchValue[0]) {\n            dict.set(key, new List_1(v, matchValue[1]));\n        }\n        else {\n            addToDict(dict, key, new List_1(v, new List_1()));\n            keys = (new List_1(key, keys));\n        }\n    }, xs);\n    let result = new List_1();\n    iterate((key_1) => {\n        result = (new List_1([key_1, reverse(getItemFromDict(dict, key_1))], result));\n    }, keys);\n    return result;\n}\n\nexport function countBy(projection, xs, eq) {\n    const dict = new Dictionary([], eq);\n    let keys = new List_1();\n    iterate((v) => {\n        const key = projection(v);\n        let matchValue;\n        let outArg = 0;\n        matchValue = [tryGetValue(dict, key, new FSharpRef(() => outArg, (v_1) => {\n            outArg = v_1;\n        })), outArg];\n        if (matchValue[0]) {\n            dict.set(key, matchValue[1] + 1);\n        }\n        else {\n            dict.set(key, 1);\n            keys = (new List_1(key, keys));\n        }\n    }, xs);\n    let result = new List_1();\n    iterate((key_1) => {\n        result = (new List_1([key_1, getItemFromDict(dict, key_1)], result));\n    }, keys);\n    return result;\n}\n\nexport function where(predicate, source) {\n    return filter(predicate, source);\n}\n\nexport function pairwise(source) {\n    return ofSeq(pairwise_1(source));\n}\n\nexport function windowed(windowSize, source) {\n    if (windowSize <= 0) {\n        throw (new Error(\"windowSize must be positive\"));\n    }\n    let res = new List_1();\n    for (let i = length(source); i >= windowSize; i--) {\n        res = (new List_1(getSlice(i - windowSize, i - 1, source), res));\n    }\n    return res;\n}\n\nexport function splitInto(chunks, source) {\n    return map((xs_1) => ofArray(xs_1), ofArray(splitInto_1(chunks, Array.from(source))));\n}\n\nexport function transpose(lists) {\n    return ofSeq(map_1((xs) => ofSeq(xs), transpose_1(lists)));\n}\n\n","import { Record } from \"../fable-library.3.1.5/Types.js\";\nimport { string_type, record_type, int32_type } from \"../fable-library.3.1.5/Reflection.js\";\nimport { some } from \"../fable-library.3.1.5/Option.js\";\nimport { seq, noneOf, optWhitespace, whitespace, oneOf, string, takeWhile, test, fail, all, any, digit, lookahead, succeed, eof, letters, letter, lazy, index } from \"./Parsimmon.js\";\nimport { join } from \"../fable-library.3.1.5/String.js\";\nimport { reduce } from \"../fable-library.3.1.5/List.js\";\n\nexport class TokenPosition extends Record {\n    constructor(offset, line, column) {\n        super();\n        this.offset = (offset | 0);\n        this.line = (line | 0);\n        this.column = (column | 0);\n    }\n}\n\nexport function TokenPosition$reflection() {\n    return record_type(\"Fable.Parsimmon.TokenPosition\", [], TokenPosition, () => [[\"offset\", int32_type], [\"line\", int32_type], [\"column\", int32_type]]);\n}\n\nexport class NodeResult$1 extends Record {\n    constructor(name, value, start, end) {\n        super();\n        this.name = name;\n        this.value = value;\n        this.start = start;\n        this.end = end;\n    }\n}\n\nexport function NodeResult$1$reflection(gen0) {\n    return record_type(\"Fable.Parsimmon.NodeResult`1\", [gen0], NodeResult$1, () => [[\"name\", string_type], [\"value\", gen0], [\"start\", TokenPosition$reflection()], [\"end\", TokenPosition$reflection()]]);\n}\n\nexport function Parsimmon_parseRaw(input, parser) {\n    return parser.parse(input);\n}\n\nexport function Parsimmon_parse(input, parser) {\n    const result = parser.parse(input);\n    if (result.status) {\n        return some(result.value);\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport const Parsimmon_index = index;\n\nexport function Parsimmon_orTry(otherParser, parser) {\n    return parser.or(otherParser);\n}\n\nexport function Parsimmon_times(n, parser) {\n    return parser.times(n);\n}\n\nexport function Parsimmon_atLeast(n, parser) {\n    return parser.atLeast(n);\n}\n\nexport function Parsimmon_atMost(n, parser) {\n    return parser.atMost(n);\n}\n\nexport function Parsimmon_skip(skipped, keep) {\n    return keep.skip(skipped);\n}\n\nexport function Parsimmon_many(parser) {\n    return parser.many();\n}\n\nexport const Parsimmon_ofLazy = lazy;\n\nexport function Parsimmon_seperateByAtLeastOne(seperator, parser) {\n    return parser.sepBy1(seperator);\n}\n\nexport function Parsimmon_chain(after, before) {\n    return before.then(after);\n}\n\nexport function Parsimmon_bind(f, p) {\n    return p.chain(f);\n}\n\nexport const Parsimmon_letter = letter;\n\nexport function Parsimmon_timesBetween(min, max, parser) {\n    return parser.times(min, max);\n}\n\nexport const Parsimmon_letters = letters;\n\nexport const Parsimmon_endOfFile = eof;\n\nexport function Parsimmon_notFollowedBy(p, before) {\n    return before.notFollowedBy(p);\n}\n\nexport const Parsimmon_succeed = succeed;\n\nexport const Parsimmon_lookahead = lookahead;\n\nexport const Parsimmon_digit = digit;\n\nexport const Parsimmon_digits = Parsimmon_many(Parsimmon_digit);\n\nexport function Parsimmon_fallback(value, parser) {\n    return parser.fallback(value);\n}\n\nexport function Parsimmon_seperateBy(content, others) {\n    return others.sepBy(content);\n}\n\nexport function Parsimmon_between(left, right, middle) {\n    return Parsimmon_skip(right, Parsimmon_chain(middle, left));\n}\n\nexport function Parsimmon_map(f, parser) {\n    return parser.map(f);\n}\n\nexport function Parsimmon_tie(parser) {\n    return Parsimmon_map((strings) => join(\"\", strings), parser);\n}\n\nexport const Parsimmon_any = any;\n\nexport function Parsimmon_choose(ps) {\n    return reduce((acc, parser) => (acc.or(parser)), ps);\n}\n\nexport const Parsimmon_all = all;\n\nexport const Parsimmon_fail = fail;\n\nexport const Parsimmon_satisfy = test;\n\nexport const Parsimmon_takeWhile = takeWhile;\n\nexport const Parsimmon_str = string;\n\nexport const Parsimmon_oneOf = oneOf;\n\nexport const Parsimmon_whitespace = whitespace;\n\nexport const Parsimmon_optionalWhitespace = optWhitespace;\n\nexport function Parsimmon_atLeastOneOrMany(parser) {\n    return Parsimmon_atLeast(1, parser);\n}\n\nexport function Parsimmon_stringReturn(input, value) {\n    return Parsimmon_map((_arg1) => value, Parsimmon_str(input));\n}\n\nexport const Parsimmon_noneOf = noneOf;\n\nexport const Parsimmon_seq2 = seq;\n\nexport function Parsimmon_trim(trimmed, p) {\n    return p.trim(trimmed);\n}\n\nexport function Parsimmon_concat(parser) {\n    return parser.map((strings) => join(\"\", strings));\n}\n\nexport const Parsimmon_seq3 = seq;\n\nexport const Parsimmon_seq4 = seq;\n\nexport const Parsimmon_seq5 = seq;\n\nexport function Parsimmon_node(description, p) {\n    return p.node(description);\n}\n\n","import { FSharpRef } from \"./Types.js\";\nexport function tryParse(str, defValue) {\n    // TODO: test if value is valid and in range\n    if (str != null && /\\S/.test(str)) {\n        const v = +str.replace(\"_\", \"\");\n        if (!Number.isNaN(v)) {\n            defValue.contents = v;\n            return true;\n        }\n    }\n    return false;\n}\nexport function parse(str) {\n    const defValue = new FSharpRef(0);\n    if (tryParse(str, defValue)) {\n        return defValue.contents;\n    }\n    else {\n        throw new Error(\"Input string was not in a correct format.\");\n    }\n}\n// JS Number.isFinite function evals false for NaN\nexport function isInfinity(x) {\n    return x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY;\n}\n","import { Union } from \"../fable-library.3.1.5/Types.js\";\nimport { union_type, class_type, list_type, bool_type, string_type, float64_type } from \"../fable-library.3.1.5/Reflection.js\";\n\nexport class Json extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"JNumber\", \"JString\", \"JBool\", \"JNull\", \"JArray\", \"JObject\"];\n    }\n}\n\nexport function Json$reflection() {\n    return union_type(\"Fable.SimpleJson.Json\", [], Json, () => [[[\"Item\", float64_type]], [[\"Item\", string_type]], [[\"Item\", bool_type]], [], [[\"Item\", list_type(Json$reflection())]], [[\"Item\", class_type(\"Microsoft.FSharp.Collections.FSharpMap`2\", [string_type, Json$reflection()])]]]);\n}\n\n","import { structuralHash, equals } from \"./Util.js\";\nimport { HashIdentity_Structural, ComparisonIdentity_Structural } from \"./FSharp.Collections.js\";\nimport { StringBuilder__Append_Z721C83C5 } from \"./System.Text.js\";\n\nexport const LanguagePrimitives_GenericEqualityComparer = {\n    [\"System.Collections.IEqualityComparer.Equals541DA560\"](x, y) {\n        return equals(x, y);\n    },\n    [\"System.Collections.IEqualityComparer.GetHashCode4E60E31B\"](x_1) {\n        return structuralHash(x_1);\n    },\n};\n\nexport const LanguagePrimitives_GenericEqualityERComparer = {\n    [\"System.Collections.IEqualityComparer.Equals541DA560\"](x, y) {\n        return equals(x, y);\n    },\n    [\"System.Collections.IEqualityComparer.GetHashCode4E60E31B\"](x_1) {\n        return structuralHash(x_1);\n    },\n};\n\nexport function LanguagePrimitives_FastGenericComparer() {\n    return ComparisonIdentity_Structural();\n}\n\nexport function LanguagePrimitives_FastGenericComparerFromTable() {\n    return ComparisonIdentity_Structural();\n}\n\nexport function LanguagePrimitives_FastGenericEqualityComparer() {\n    return HashIdentity_Structural();\n}\n\nexport function LanguagePrimitives_FastGenericEqualityComparerFromTable() {\n    return HashIdentity_Structural();\n}\n\nexport function Operators_Failure(message) {\n    return new Error(message);\n}\n\nexport function Operators_FailurePattern(exn) {\n    return exn.message;\n}\n\nexport function Operators_NullArg(x) {\n    throw (new Error(x));\n}\n\nexport function Operators_Using(resource, action) {\n    try {\n        return action(resource);\n    }\n    finally {\n        if (equals(resource, null)) {\n        }\n        else {\n            resource.Dispose();\n        }\n    }\n}\n\nexport function Operators_Lock(_lockObj, action) {\n    return action();\n}\n\nexport function ExtraTopLevelOperators_LazyPattern(input) {\n    return input.Value;\n}\n\nexport function PrintfModule_PrintFormatToStringBuilderThen(continuation, builder, format) {\n    return format.cont((s) => {\n        void StringBuilder__Append_Z721C83C5(builder, s);\n        return continuation();\n    });\n}\n\nexport function PrintfModule_PrintFormatToStringBuilder(builder, format) {\n    return PrintfModule_PrintFormatToStringBuilderThen(() => {\n    }, builder, format);\n}\n\n","import { compare, physicalHash, equals, structuralHash } from \"./Util.js\";\n\nexport function HashIdentity_FromFunctions(hash, eq) {\n    return {\n        Equals(x, y) {\n            return eq(x, y);\n        },\n        GetHashCode(x_1) {\n            return hash(x_1);\n        },\n    };\n}\n\nexport function HashIdentity_Structural() {\n    return HashIdentity_FromFunctions((obj) => structuralHash(obj), (e1, e2) => equals(e1, e2));\n}\n\nexport function HashIdentity_Reference() {\n    return HashIdentity_FromFunctions((obj) => physicalHash(obj), (e1, e2) => (e1 === e2));\n}\n\nexport function ComparisonIdentity_FromFunction(comparer) {\n    return {\n        Compare(x, y) {\n            return comparer(x, y);\n        },\n    };\n}\n\nexport function ComparisonIdentity_Structural() {\n    return ComparisonIdentity_FromFunction((e1, e2) => compare(e1, e2));\n}\n\n","import { record_type, bool_type, list_type, option_type, class_type } from \"./Reflection.js\";\nimport { some, value as value_2 } from \"./Option.js\";\nimport { Record, List } from \"./Types.js\";\nimport { fold as fold_1 } from \"./List.js\";\nimport { structuralHash, compare, equals, isArrayLike } from \"./Util.js\";\nimport { empty as empty_1, tryPick as tryPick_1, pick as pick_1, iterate as iterate_1, compareWith, toIterator, map as map_2, unfold, getEnumerator } from \"./Seq.js\";\nimport { format, join } from \"./String.js\";\nimport { LanguagePrimitives_FastGenericComparer } from \"./FSharp.Core.js\";\nimport { Dictionary_$ctor_6623D9B3 } from \"./MutableMap.js\";\n\nexport class MapTreeLeaf$2 {\n    constructor(k, v) {\n        this.k = k;\n        this.v = v;\n    }\n}\n\nexport function MapTreeLeaf$2$reflection(gen0, gen1) {\n    return class_type(\"Map.MapTreeLeaf`2\", [gen0, gen1], MapTreeLeaf$2);\n}\n\nexport function MapTreeLeaf$2_$ctor_5BDDA1(k, v) {\n    return new MapTreeLeaf$2(k, v);\n}\n\nexport function MapTreeLeaf$2__get_Key(_) {\n    return _.k;\n}\n\nexport function MapTreeLeaf$2__get_Value(_) {\n    return _.v;\n}\n\nexport class MapTreeNode$2 extends MapTreeLeaf$2 {\n    constructor(k, v, left, right, h) {\n        super(k, v);\n        this.left = left;\n        this.right = right;\n        this.h = h;\n    }\n}\n\nexport function MapTreeNode$2$reflection(gen0, gen1) {\n    return class_type(\"Map.MapTreeNode`2\", [gen0, gen1], MapTreeNode$2, MapTreeLeaf$2$reflection(gen0, gen1));\n}\n\nexport function MapTreeNode$2_$ctor_499A11FD(k, v, left, right, h) {\n    return new MapTreeNode$2(k, v, left, right, h);\n}\n\nexport function MapTreeNode$2__get_Left(_) {\n    return _.left;\n}\n\nexport function MapTreeNode$2__get_Right(_) {\n    return _.right;\n}\n\nexport function MapTreeNode$2__get_Height(_) {\n    return _.h;\n}\n\nexport function MapTreeModule_empty() {\n    return void 0;\n}\n\nexport function MapTreeModule_sizeAux(acc_mut, m_mut) {\n    MapTreeModule_sizeAux:\n    while (true) {\n        const acc = acc_mut, m = m_mut;\n        if (m != null) {\n            const m2 = m;\n            if (m2 instanceof MapTreeNode$2) {\n                acc_mut = MapTreeModule_sizeAux(acc + 1, MapTreeNode$2__get_Left(m2));\n                m_mut = MapTreeNode$2__get_Right(m2);\n                continue MapTreeModule_sizeAux;\n            }\n            else {\n                return (acc + 1) | 0;\n            }\n        }\n        else {\n            return acc | 0;\n        }\n        break;\n    }\n}\n\nexport function MapTreeModule_size(x) {\n    return MapTreeModule_sizeAux(0, x);\n}\n\nexport function MapTreeModule_mk(l, k, v, r) {\n    let hl;\n    const m = l;\n    if (m != null) {\n        const m2 = m;\n        hl = ((m2 instanceof MapTreeNode$2) ? MapTreeNode$2__get_Height(m2) : 1);\n    }\n    else {\n        hl = 0;\n    }\n    let hr;\n    const m_1 = r;\n    if (m_1 != null) {\n        const m2_1 = m_1;\n        hr = ((m2_1 instanceof MapTreeNode$2) ? MapTreeNode$2__get_Height(m2_1) : 1);\n    }\n    else {\n        hr = 0;\n    }\n    const m_2 = ((hl < hr) ? hr : hl) | 0;\n    if (m_2 === 0) {\n        return MapTreeLeaf$2_$ctor_5BDDA1(k, v);\n    }\n    else {\n        return MapTreeNode$2_$ctor_499A11FD(k, v, l, r, m_2 + 1);\n    }\n}\n\nexport function MapTreeModule_rebalance(t1, k, v, t2) {\n    let m_2, m2_2, m_3, m2_3;\n    let t1h;\n    const m = t1;\n    if (m != null) {\n        const m2 = m;\n        t1h = ((m2 instanceof MapTreeNode$2) ? MapTreeNode$2__get_Height(m2) : 1);\n    }\n    else {\n        t1h = 0;\n    }\n    let t2h;\n    const m_1 = t2;\n    if (m_1 != null) {\n        const m2_1 = m_1;\n        t2h = ((m2_1 instanceof MapTreeNode$2) ? MapTreeNode$2__get_Height(m2_1) : 1);\n    }\n    else {\n        t2h = 0;\n    }\n    if (t2h > (t1h + 2)) {\n        const matchValue = value_2(t2);\n        if (matchValue instanceof MapTreeNode$2) {\n            if ((m_2 = MapTreeNode$2__get_Left(matchValue), (m_2 != null) ? (m2_2 = m_2, (m2_2 instanceof MapTreeNode$2) ? MapTreeNode$2__get_Height(m2_2) : 1) : 0) > (t1h + 1)) {\n                const matchValue_1 = value_2(MapTreeNode$2__get_Left(matchValue));\n                if (matchValue_1 instanceof MapTreeNode$2) {\n                    return MapTreeModule_mk(MapTreeModule_mk(t1, k, v, MapTreeNode$2__get_Left(matchValue_1)), MapTreeLeaf$2__get_Key(matchValue_1), MapTreeLeaf$2__get_Value(matchValue_1), MapTreeModule_mk(MapTreeNode$2__get_Right(matchValue_1), MapTreeLeaf$2__get_Key(matchValue), MapTreeLeaf$2__get_Value(matchValue), MapTreeNode$2__get_Right(matchValue)));\n                }\n                else {\n                    throw (new Error(\"internal error: Map.rebalance\"));\n                }\n            }\n            else {\n                return MapTreeModule_mk(MapTreeModule_mk(t1, k, v, MapTreeNode$2__get_Left(matchValue)), MapTreeLeaf$2__get_Key(matchValue), MapTreeLeaf$2__get_Value(matchValue), MapTreeNode$2__get_Right(matchValue));\n            }\n        }\n        else {\n            throw (new Error(\"internal error: Map.rebalance\"));\n        }\n    }\n    else if (t1h > (t2h + 2)) {\n        const matchValue_2 = value_2(t1);\n        if (matchValue_2 instanceof MapTreeNode$2) {\n            if ((m_3 = MapTreeNode$2__get_Right(matchValue_2), (m_3 != null) ? (m2_3 = m_3, (m2_3 instanceof MapTreeNode$2) ? MapTreeNode$2__get_Height(m2_3) : 1) : 0) > (t2h + 1)) {\n                const matchValue_3 = value_2(MapTreeNode$2__get_Right(matchValue_2));\n                if (matchValue_3 instanceof MapTreeNode$2) {\n                    return MapTreeModule_mk(MapTreeModule_mk(MapTreeNode$2__get_Left(matchValue_2), MapTreeLeaf$2__get_Key(matchValue_2), MapTreeLeaf$2__get_Value(matchValue_2), MapTreeNode$2__get_Left(matchValue_3)), MapTreeLeaf$2__get_Key(matchValue_3), MapTreeLeaf$2__get_Value(matchValue_3), MapTreeModule_mk(MapTreeNode$2__get_Right(matchValue_3), k, v, t2));\n                }\n                else {\n                    throw (new Error(\"internal error: Map.rebalance\"));\n                }\n            }\n            else {\n                return MapTreeModule_mk(MapTreeNode$2__get_Left(matchValue_2), MapTreeLeaf$2__get_Key(matchValue_2), MapTreeLeaf$2__get_Value(matchValue_2), MapTreeModule_mk(MapTreeNode$2__get_Right(matchValue_2), k, v, t2));\n            }\n        }\n        else {\n            throw (new Error(\"internal error: Map.rebalance\"));\n        }\n    }\n    else {\n        return MapTreeModule_mk(t1, k, v, t2);\n    }\n}\n\nexport function MapTreeModule_add(comparer, k, v, m) {\n    if (m != null) {\n        const m2 = m;\n        const c = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;\n        if (m2 instanceof MapTreeNode$2) {\n            if (c < 0) {\n                return MapTreeModule_rebalance(MapTreeModule_add(comparer, k, v, MapTreeNode$2__get_Left(m2)), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeNode$2__get_Right(m2));\n            }\n            else if (c === 0) {\n                return MapTreeNode$2_$ctor_499A11FD(k, v, MapTreeNode$2__get_Left(m2), MapTreeNode$2__get_Right(m2), MapTreeNode$2__get_Height(m2));\n            }\n            else {\n                return MapTreeModule_rebalance(MapTreeNode$2__get_Left(m2), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeModule_add(comparer, k, v, MapTreeNode$2__get_Right(m2)));\n            }\n        }\n        else if (c < 0) {\n            return MapTreeNode$2_$ctor_499A11FD(k, v, MapTreeModule_empty(), m, 2);\n        }\n        else if (c === 0) {\n            return MapTreeLeaf$2_$ctor_5BDDA1(k, v);\n        }\n        else {\n            return MapTreeNode$2_$ctor_499A11FD(k, v, m, MapTreeModule_empty(), 2);\n        }\n    }\n    else {\n        return MapTreeLeaf$2_$ctor_5BDDA1(k, v);\n    }\n}\n\nexport function MapTreeModule_tryFind(comparer_mut, k_mut, m_mut) {\n    MapTreeModule_tryFind:\n    while (true) {\n        const comparer = comparer_mut, k = k_mut, m = m_mut;\n        if (m != null) {\n            const m2 = m;\n            const c = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;\n            if (c === 0) {\n                return some(MapTreeLeaf$2__get_Value(m2));\n            }\n            else if (m2 instanceof MapTreeNode$2) {\n                comparer_mut = comparer;\n                k_mut = k;\n                m_mut = ((c < 0) ? MapTreeNode$2__get_Left(m2) : MapTreeNode$2__get_Right(m2));\n                continue MapTreeModule_tryFind;\n            }\n            else {\n                return void 0;\n            }\n        }\n        else {\n            return void 0;\n        }\n        break;\n    }\n}\n\nexport function MapTreeModule_find(comparer, k, m) {\n    const matchValue = MapTreeModule_tryFind(comparer, k, m);\n    if (matchValue == null) {\n        throw (new Error());\n    }\n    else {\n        return value_2(matchValue);\n    }\n}\n\nexport function MapTreeModule_partition1(comparer, f, k, v, acc1, acc2) {\n    if (f(k, v)) {\n        return [MapTreeModule_add(comparer, k, v, acc1), acc2];\n    }\n    else {\n        return [acc1, MapTreeModule_add(comparer, k, v, acc2)];\n    }\n}\n\nexport function MapTreeModule_partitionAux(comparer_mut, f_mut, m_mut, acc_0_mut, acc_1_mut) {\n    MapTreeModule_partitionAux:\n    while (true) {\n        const comparer = comparer_mut, f = f_mut, m = m_mut, acc_0 = acc_0_mut, acc_1 = acc_1_mut;\n        const acc = [acc_0, acc_1];\n        if (m != null) {\n            const m2 = m;\n            if (m2 instanceof MapTreeNode$2) {\n                const acc_2 = MapTreeModule_partitionAux(comparer, f, MapTreeNode$2__get_Right(m2), acc[0], acc[1]);\n                const acc_3 = MapTreeModule_partition1(comparer, f, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), acc_2[0], acc_2[1]);\n                comparer_mut = comparer;\n                f_mut = f;\n                m_mut = MapTreeNode$2__get_Left(m2);\n                acc_0_mut = acc_3[0];\n                acc_1_mut = acc_3[1];\n                continue MapTreeModule_partitionAux;\n            }\n            else {\n                return MapTreeModule_partition1(comparer, f, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), acc[0], acc[1]);\n            }\n        }\n        else {\n            return acc;\n        }\n        break;\n    }\n}\n\nexport function MapTreeModule_partition(comparer, f, m) {\n    return MapTreeModule_partitionAux(comparer, f, m, MapTreeModule_empty(), MapTreeModule_empty());\n}\n\nexport function MapTreeModule_filter1(comparer, f, k, v, acc) {\n    if (f(k, v)) {\n        return MapTreeModule_add(comparer, k, v, acc);\n    }\n    else {\n        return acc;\n    }\n}\n\nexport function MapTreeModule_filterAux(comparer_mut, f_mut, m_mut, acc_mut) {\n    MapTreeModule_filterAux:\n    while (true) {\n        const comparer = comparer_mut, f = f_mut, m = m_mut, acc = acc_mut;\n        if (m != null) {\n            const m2 = m;\n            if (m2 instanceof MapTreeNode$2) {\n                const acc_1 = MapTreeModule_filterAux(comparer, f, MapTreeNode$2__get_Left(m2), acc);\n                const acc_2 = MapTreeModule_filter1(comparer, f, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), acc_1);\n                comparer_mut = comparer;\n                f_mut = f;\n                m_mut = MapTreeNode$2__get_Right(m2);\n                acc_mut = acc_2;\n                continue MapTreeModule_filterAux;\n            }\n            else {\n                return MapTreeModule_filter1(comparer, f, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), acc);\n            }\n        }\n        else {\n            return acc;\n        }\n        break;\n    }\n}\n\nexport function MapTreeModule_filter(comparer, f, m) {\n    return MapTreeModule_filterAux(comparer, f, m, MapTreeModule_empty());\n}\n\nexport function MapTreeModule_spliceOutSuccessor(m) {\n    if (m != null) {\n        const m2 = m;\n        if (m2 instanceof MapTreeNode$2) {\n            if (MapTreeNode$2__get_Left(m2) == null) {\n                return [MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeNode$2__get_Right(m2)];\n            }\n            else {\n                const patternInput = MapTreeModule_spliceOutSuccessor(MapTreeNode$2__get_Left(m2));\n                return [patternInput[0], patternInput[1], MapTreeModule_mk(patternInput[2], MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeNode$2__get_Right(m2))];\n            }\n        }\n        else {\n            return [MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeModule_empty()];\n        }\n    }\n    else {\n        throw (new Error(\"internal error: Map.spliceOutSuccessor\"));\n    }\n}\n\nexport function MapTreeModule_remove(comparer, k, m) {\n    if (m != null) {\n        const m2 = m;\n        const c = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;\n        if (m2 instanceof MapTreeNode$2) {\n            if (c < 0) {\n                return MapTreeModule_rebalance(MapTreeModule_remove(comparer, k, MapTreeNode$2__get_Left(m2)), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeNode$2__get_Right(m2));\n            }\n            else if (c === 0) {\n                if (MapTreeNode$2__get_Left(m2) == null) {\n                    return MapTreeNode$2__get_Right(m2);\n                }\n                else if (MapTreeNode$2__get_Right(m2) == null) {\n                    return MapTreeNode$2__get_Left(m2);\n                }\n                else {\n                    const patternInput = MapTreeModule_spliceOutSuccessor(MapTreeNode$2__get_Right(m2));\n                    return MapTreeModule_mk(MapTreeNode$2__get_Left(m2), patternInput[0], patternInput[1], patternInput[2]);\n                }\n            }\n            else {\n                return MapTreeModule_rebalance(MapTreeNode$2__get_Left(m2), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeModule_remove(comparer, k, MapTreeNode$2__get_Right(m2)));\n            }\n        }\n        else if (c === 0) {\n            return MapTreeModule_empty();\n        }\n        else {\n            return m;\n        }\n    }\n    else {\n        return MapTreeModule_empty();\n    }\n}\n\nexport function MapTreeModule_change(comparer, k, u, m) {\n    if (m != null) {\n        const m2 = m;\n        if (m2 instanceof MapTreeNode$2) {\n            const c = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;\n            if (c < 0) {\n                return MapTreeModule_rebalance(MapTreeModule_change(comparer, k, u, MapTreeNode$2__get_Left(m2)), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeNode$2__get_Right(m2));\n            }\n            else if (c === 0) {\n                const matchValue_1 = u(some(MapTreeLeaf$2__get_Value(m2)));\n                if (matchValue_1 != null) {\n                    return MapTreeNode$2_$ctor_499A11FD(k, value_2(matchValue_1), MapTreeNode$2__get_Left(m2), MapTreeNode$2__get_Right(m2), MapTreeNode$2__get_Height(m2));\n                }\n                else if (MapTreeNode$2__get_Left(m2) == null) {\n                    return MapTreeNode$2__get_Right(m2);\n                }\n                else if (MapTreeNode$2__get_Right(m2) == null) {\n                    return MapTreeNode$2__get_Left(m2);\n                }\n                else {\n                    const patternInput = MapTreeModule_spliceOutSuccessor(MapTreeNode$2__get_Right(m2));\n                    return MapTreeModule_mk(MapTreeNode$2__get_Left(m2), patternInput[0], patternInput[1], patternInput[2]);\n                }\n            }\n            else {\n                return MapTreeModule_rebalance(MapTreeNode$2__get_Left(m2), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeModule_change(comparer, k, u, MapTreeNode$2__get_Right(m2)));\n            }\n        }\n        else {\n            const c_1 = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;\n            if (c_1 < 0) {\n                const matchValue_2 = u(void 0);\n                if (matchValue_2 != null) {\n                    return MapTreeNode$2_$ctor_499A11FD(k, value_2(matchValue_2), MapTreeModule_empty(), m, 2);\n                }\n                else {\n                    return m;\n                }\n            }\n            else if (c_1 === 0) {\n                const matchValue_3 = u(some(MapTreeLeaf$2__get_Value(m2)));\n                if (matchValue_3 != null) {\n                    return MapTreeLeaf$2_$ctor_5BDDA1(k, value_2(matchValue_3));\n                }\n                else {\n                    return MapTreeModule_empty();\n                }\n            }\n            else {\n                const matchValue_4 = u(void 0);\n                if (matchValue_4 != null) {\n                    return MapTreeNode$2_$ctor_499A11FD(k, value_2(matchValue_4), m, MapTreeModule_empty(), 2);\n                }\n                else {\n                    return m;\n                }\n            }\n        }\n    }\n    else {\n        const matchValue = u(void 0);\n        if (matchValue != null) {\n            return MapTreeLeaf$2_$ctor_5BDDA1(k, value_2(matchValue));\n        }\n        else {\n            return m;\n        }\n    }\n}\n\nexport function MapTreeModule_mem(comparer_mut, k_mut, m_mut) {\n    MapTreeModule_mem:\n    while (true) {\n        const comparer = comparer_mut, k = k_mut, m = m_mut;\n        if (m != null) {\n            const m2 = m;\n            const c = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;\n            if (m2 instanceof MapTreeNode$2) {\n                if (c < 0) {\n                    comparer_mut = comparer;\n                    k_mut = k;\n                    m_mut = MapTreeNode$2__get_Left(m2);\n                    continue MapTreeModule_mem;\n                }\n                else if (c === 0) {\n                    return true;\n                }\n                else {\n                    comparer_mut = comparer;\n                    k_mut = k;\n                    m_mut = MapTreeNode$2__get_Right(m2);\n                    continue MapTreeModule_mem;\n                }\n            }\n            else {\n                return c === 0;\n            }\n        }\n        else {\n            return false;\n        }\n        break;\n    }\n}\n\nexport function MapTreeModule_iterOpt(f_mut, m_mut) {\n    MapTreeModule_iterOpt:\n    while (true) {\n        const f = f_mut, m = m_mut;\n        if (m != null) {\n            const m2 = m;\n            if (m2 instanceof MapTreeNode$2) {\n                MapTreeModule_iterOpt(f, MapTreeNode$2__get_Left(m2));\n                f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\n                f_mut = f;\n                m_mut = MapTreeNode$2__get_Right(m2);\n                continue MapTreeModule_iterOpt;\n            }\n            else {\n                f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\n            }\n        }\n        break;\n    }\n}\n\nexport function MapTreeModule_iter(f, m) {\n    MapTreeModule_iterOpt(f, m);\n}\n\nexport function MapTreeModule_tryPickOpt(f_mut, m_mut) {\n    MapTreeModule_tryPickOpt:\n    while (true) {\n        const f = f_mut, m = m_mut;\n        if (m != null) {\n            const m2 = m;\n            if (m2 instanceof MapTreeNode$2) {\n                const matchValue = MapTreeModule_tryPickOpt(f, MapTreeNode$2__get_Left(m2));\n                if (matchValue == null) {\n                    const matchValue_1 = f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\n                    if (matchValue_1 == null) {\n                        f_mut = f;\n                        m_mut = MapTreeNode$2__get_Right(m2);\n                        continue MapTreeModule_tryPickOpt;\n                    }\n                    else {\n                        return matchValue_1;\n                    }\n                }\n                else {\n                    return matchValue;\n                }\n            }\n            else {\n                return f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\n            }\n        }\n        else {\n            return void 0;\n        }\n        break;\n    }\n}\n\nexport function MapTreeModule_tryPick(f, m) {\n    return MapTreeModule_tryPickOpt(f, m);\n}\n\nexport function MapTreeModule_existsOpt(f_mut, m_mut) {\n    MapTreeModule_existsOpt:\n    while (true) {\n        const f = f_mut, m = m_mut;\n        if (m != null) {\n            const m2 = m;\n            if (m2 instanceof MapTreeNode$2) {\n                if (MapTreeModule_existsOpt(f, MapTreeNode$2__get_Left(m2)) ? true : f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2))) {\n                    return true;\n                }\n                else {\n                    f_mut = f;\n                    m_mut = MapTreeNode$2__get_Right(m2);\n                    continue MapTreeModule_existsOpt;\n                }\n            }\n            else {\n                return f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\n            }\n        }\n        else {\n            return false;\n        }\n        break;\n    }\n}\n\nexport function MapTreeModule_exists(f, m) {\n    return MapTreeModule_existsOpt(f, m);\n}\n\nexport function MapTreeModule_forallOpt(f_mut, m_mut) {\n    MapTreeModule_forallOpt:\n    while (true) {\n        const f = f_mut, m = m_mut;\n        if (m != null) {\n            const m2 = m;\n            if (m2 instanceof MapTreeNode$2) {\n                if (MapTreeModule_forallOpt(f, MapTreeNode$2__get_Left(m2)) ? f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2)) : false) {\n                    f_mut = f;\n                    m_mut = MapTreeNode$2__get_Right(m2);\n                    continue MapTreeModule_forallOpt;\n                }\n                else {\n                    return false;\n                }\n            }\n            else {\n                return f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\n            }\n        }\n        else {\n            return true;\n        }\n        break;\n    }\n}\n\nexport function MapTreeModule_forall(f, m) {\n    return MapTreeModule_forallOpt(f, m);\n}\n\nexport function MapTreeModule_map(f, m) {\n    if (m != null) {\n        const m2 = m;\n        if (m2 instanceof MapTreeNode$2) {\n            const l2 = MapTreeModule_map(f, MapTreeNode$2__get_Left(m2));\n            const v2 = f(MapTreeLeaf$2__get_Value(m2));\n            const r2 = MapTreeModule_map(f, MapTreeNode$2__get_Right(m2));\n            return MapTreeNode$2_$ctor_499A11FD(MapTreeLeaf$2__get_Key(m2), v2, l2, r2, MapTreeNode$2__get_Height(m2));\n        }\n        else {\n            return MapTreeLeaf$2_$ctor_5BDDA1(MapTreeLeaf$2__get_Key(m2), f(MapTreeLeaf$2__get_Value(m2)));\n        }\n    }\n    else {\n        return MapTreeModule_empty();\n    }\n}\n\nexport function MapTreeModule_mapiOpt(f, m) {\n    if (m != null) {\n        const m2 = m;\n        if (m2 instanceof MapTreeNode$2) {\n            const l2 = MapTreeModule_mapiOpt(f, MapTreeNode$2__get_Left(m2));\n            const v2 = f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\n            const r2 = MapTreeModule_mapiOpt(f, MapTreeNode$2__get_Right(m2));\n            return MapTreeNode$2_$ctor_499A11FD(MapTreeLeaf$2__get_Key(m2), v2, l2, r2, MapTreeNode$2__get_Height(m2));\n        }\n        else {\n            return MapTreeLeaf$2_$ctor_5BDDA1(MapTreeLeaf$2__get_Key(m2), f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2)));\n        }\n    }\n    else {\n        return MapTreeModule_empty();\n    }\n}\n\nexport function MapTreeModule_mapi(f, m) {\n    return MapTreeModule_mapiOpt(f, m);\n}\n\nexport function MapTreeModule_foldBackOpt(f_mut, m_mut, x_mut) {\n    MapTreeModule_foldBackOpt:\n    while (true) {\n        const f = f_mut, m = m_mut, x = x_mut;\n        if (m != null) {\n            const m2 = m;\n            if (m2 instanceof MapTreeNode$2) {\n                const x_1 = MapTreeModule_foldBackOpt(f, MapTreeNode$2__get_Right(m2), x);\n                const x_2 = f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), x_1);\n                f_mut = f;\n                m_mut = MapTreeNode$2__get_Left(m2);\n                x_mut = x_2;\n                continue MapTreeModule_foldBackOpt;\n            }\n            else {\n                return f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), x);\n            }\n        }\n        else {\n            return x;\n        }\n        break;\n    }\n}\n\nexport function MapTreeModule_foldBack(f, m, x) {\n    return MapTreeModule_foldBackOpt(f, m, x);\n}\n\nexport function MapTreeModule_foldOpt(f_mut, x_mut, m_mut) {\n    MapTreeModule_foldOpt:\n    while (true) {\n        const f = f_mut, x = x_mut, m = m_mut;\n        if (m != null) {\n            const m2 = m;\n            if (m2 instanceof MapTreeNode$2) {\n                f_mut = f;\n                x_mut = f(MapTreeModule_foldOpt(f, x, MapTreeNode$2__get_Left(m2)), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\n                m_mut = MapTreeNode$2__get_Right(m2);\n                continue MapTreeModule_foldOpt;\n            }\n            else {\n                return f(x, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\n            }\n        }\n        else {\n            return x;\n        }\n        break;\n    }\n}\n\nexport function MapTreeModule_fold(f, x, m) {\n    return MapTreeModule_foldOpt(f, x, m);\n}\n\nexport function MapTreeModule_foldSectionOpt(comparer, lo, hi, f, m, x) {\n    const foldFromTo = (f_1_mut, m_1_mut, x_1_mut) => {\n        foldFromTo:\n        while (true) {\n            const f_1 = f_1_mut, m_1 = m_1_mut, x_1 = x_1_mut;\n            if (m_1 != null) {\n                const m2 = m_1;\n                if (m2 instanceof MapTreeNode$2) {\n                    const cLoKey = comparer.Compare(lo, MapTreeLeaf$2__get_Key(m2)) | 0;\n                    const cKeyHi = comparer.Compare(MapTreeLeaf$2__get_Key(m2), hi) | 0;\n                    const x_2 = (cLoKey < 0) ? foldFromTo(f_1, MapTreeNode$2__get_Left(m2), x_1) : x_1;\n                    const x_3 = ((cLoKey <= 0) ? (cKeyHi <= 0) : false) ? f_1(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), x_2) : x_2;\n                    if (cKeyHi < 0) {\n                        f_1_mut = f_1;\n                        m_1_mut = MapTreeNode$2__get_Right(m2);\n                        x_1_mut = x_3;\n                        continue foldFromTo;\n                    }\n                    else {\n                        return x_3;\n                    }\n                }\n                else if ((comparer.Compare(lo, MapTreeLeaf$2__get_Key(m2)) <= 0) ? (comparer.Compare(MapTreeLeaf$2__get_Key(m2), hi) <= 0) : false) {\n                    return f_1(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), x_1);\n                }\n                else {\n                    return x_1;\n                }\n            }\n            else {\n                return x_1;\n            }\n            break;\n        }\n    };\n    if (comparer.Compare(lo, hi) === 1) {\n        return x;\n    }\n    else {\n        return foldFromTo(f, m, x);\n    }\n}\n\nexport function MapTreeModule_foldSection(comparer, lo, hi, f, m, x) {\n    return MapTreeModule_foldSectionOpt(comparer, lo, hi, f, m, x);\n}\n\nexport function MapTreeModule_toList(m) {\n    const loop = (m_1_mut, acc_mut) => {\n        loop:\n        while (true) {\n            const m_1 = m_1_mut, acc = acc_mut;\n            if (m_1 != null) {\n                const m2 = m_1;\n                if (m2 instanceof MapTreeNode$2) {\n                    m_1_mut = MapTreeNode$2__get_Left(m2);\n                    acc_mut = (new List([MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2)], loop(MapTreeNode$2__get_Right(m2), acc)));\n                    continue loop;\n                }\n                else {\n                    return new List([MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2)], acc);\n                }\n            }\n            else {\n                return acc;\n            }\n            break;\n        }\n    };\n    return loop(m, new List());\n}\n\nexport function MapTreeModule_toArray(m) {\n    return Array.from(MapTreeModule_toList(m));\n}\n\nexport function MapTreeModule_ofList(comparer, l) {\n    return fold_1((acc, tupledArg) => MapTreeModule_add(comparer, tupledArg[0], tupledArg[1], acc), MapTreeModule_empty(), l);\n}\n\nexport function MapTreeModule_mkFromEnumerator(comparer_mut, acc_mut, e_mut) {\n    MapTreeModule_mkFromEnumerator:\n    while (true) {\n        const comparer = comparer_mut, acc = acc_mut, e = e_mut;\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            const patternInput = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n            comparer_mut = comparer;\n            acc_mut = MapTreeModule_add(comparer, patternInput[0], patternInput[1], acc);\n            e_mut = e;\n            continue MapTreeModule_mkFromEnumerator;\n        }\n        else {\n            return acc;\n        }\n        break;\n    }\n}\n\nexport function MapTreeModule_ofArray(comparer, arr) {\n    let res = MapTreeModule_empty();\n    for (let idx = 0; idx <= (arr.length - 1); idx++) {\n        const forLoopVar = arr[idx];\n        res = MapTreeModule_add(comparer, forLoopVar[0], forLoopVar[1], res);\n    }\n    return res;\n}\n\nexport function MapTreeModule_ofSeq(comparer, c) {\n    if (isArrayLike(c)) {\n        return MapTreeModule_ofArray(comparer, c);\n    }\n    else if (c instanceof List) {\n        return MapTreeModule_ofList(comparer, c);\n    }\n    else {\n        const ie = getEnumerator(c);\n        try {\n            return MapTreeModule_mkFromEnumerator(comparer, MapTreeModule_empty(), ie);\n        }\n        finally {\n            ie.Dispose();\n        }\n    }\n}\n\nexport function MapTreeModule_copyToArray(m, arr, i) {\n    let j = i | 0;\n    MapTreeModule_iter((x, y) => {\n        arr[j] = [x, y];\n        j = (j + 1);\n    }, m);\n}\n\nexport class MapTreeModule_MapIterator$2 extends Record {\n    constructor(stack, started) {\n        super();\n        this.stack = stack;\n        this.started = started;\n    }\n}\n\nexport function MapTreeModule_MapIterator$2$reflection(gen0, gen1) {\n    return record_type(\"Map.MapTreeModule.MapIterator`2\", [gen0, gen1], MapTreeModule_MapIterator$2, () => [[\"stack\", list_type(option_type(MapTreeLeaf$2$reflection(gen0, gen1)))], [\"started\", bool_type]]);\n}\n\nexport function MapTreeModule_collapseLHS(stack_mut) {\n    MapTreeModule_collapseLHS:\n    while (true) {\n        const stack = stack_mut;\n        if (stack.tail != null) {\n            const rest = stack.tail;\n            const m = stack.head;\n            if (m != null) {\n                const m2 = m;\n                if (m2 instanceof MapTreeNode$2) {\n                    stack_mut = (new List(MapTreeNode$2__get_Left(m2), new List(MapTreeLeaf$2_$ctor_5BDDA1(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2)), new List(MapTreeNode$2__get_Right(m2), rest))));\n                    continue MapTreeModule_collapseLHS;\n                }\n                else {\n                    return stack;\n                }\n            }\n            else {\n                stack_mut = rest;\n                continue MapTreeModule_collapseLHS;\n            }\n        }\n        else {\n            return new List();\n        }\n        break;\n    }\n}\n\nexport function MapTreeModule_mkIterator(m) {\n    return new MapTreeModule_MapIterator$2(MapTreeModule_collapseLHS(new List(m, new List())), false);\n}\n\nexport function MapTreeModule_notStarted() {\n    throw (new Error(\"enumeration not started\"));\n}\n\nexport function MapTreeModule_alreadyFinished() {\n    throw (new Error(\"enumeration already finished\"));\n}\n\nexport function MapTreeModule_current(i) {\n    if (i.started) {\n        const matchValue = i.stack;\n        if (matchValue.tail != null) {\n            if (matchValue.head != null) {\n                const m = matchValue.head;\n                if (m instanceof MapTreeNode$2) {\n                    throw (new Error(\"Please report error: Map iterator, unexpected stack for current\"));\n                }\n                else {\n                    return [MapTreeLeaf$2__get_Key(m), MapTreeLeaf$2__get_Value(m)];\n                }\n            }\n            else {\n                throw (new Error(\"Please report error: Map iterator, unexpected stack for current\"));\n            }\n        }\n        else {\n            return MapTreeModule_alreadyFinished();\n        }\n    }\n    else {\n        return MapTreeModule_notStarted();\n    }\n}\n\nexport function MapTreeModule_moveNext(i) {\n    if (i.started) {\n        const matchValue = i.stack;\n        if (matchValue.tail != null) {\n            if (matchValue.head != null) {\n                const m = matchValue.head;\n                if (m instanceof MapTreeNode$2) {\n                    throw (new Error(\"Please report error: Map iterator, unexpected stack for moveNext\"));\n                }\n                else {\n                    i.stack = MapTreeModule_collapseLHS(matchValue.tail);\n                    return !(i.stack.tail == null);\n                }\n            }\n            else {\n                throw (new Error(\"Please report error: Map iterator, unexpected stack for moveNext\"));\n            }\n        }\n        else {\n            return false;\n        }\n    }\n    else {\n        i.started = true;\n        return !(i.stack.tail == null);\n    }\n}\n\nexport function MapTreeModule_mkIEnumerator(m) {\n    let i = MapTreeModule_mkIterator(m);\n    return {\n        [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\n            return MapTreeModule_current(i);\n        },\n        [\"System.Collections.IEnumerator.get_Current\"]() {\n            return MapTreeModule_current(i);\n        },\n        [\"System.Collections.IEnumerator.MoveNext\"]() {\n            return MapTreeModule_moveNext(i);\n        },\n        [\"System.Collections.IEnumerator.Reset\"]() {\n            i = MapTreeModule_mkIterator(m);\n        },\n        Dispose() {\n        },\n    };\n}\n\nexport function MapTreeModule_toSeq(s) {\n    return unfold((en_1) => {\n        if (en_1[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            return [en_1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), en_1];\n        }\n        else {\n            return void 0;\n        }\n    }, MapTreeModule_mkIEnumerator(s));\n}\n\nexport class FSharpMap {\n    constructor(comparer, tree) {\n        this.comparer = comparer;\n        this.tree = tree;\n    }\n    GetHashCode() {\n        const this$ = this;\n        return FSharpMap__ComputeHashCode(this$) | 0;\n    }\n    Equals(that) {\n        const this$ = this;\n        if (that instanceof FSharpMap) {\n            const e1 = getEnumerator(this$);\n            try {\n                const e2 = getEnumerator(that);\n                try {\n                    const loop = () => {\n                        const m1 = e1[\"System.Collections.IEnumerator.MoveNext\"]();\n                        if (m1 === e2[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                            if (!m1) {\n                                return true;\n                            }\n                            else {\n                                const e1c = e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n                                const e2c = e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n                                if (equals(e1c[0], e2c[0]) ? equals(e1c[1], e2c[1]) : false) {\n                                    return loop();\n                                }\n                                else {\n                                    return false;\n                                }\n                            }\n                        }\n                        else {\n                            return false;\n                        }\n                    };\n                    return loop();\n                }\n                finally {\n                    e2.Dispose();\n                }\n            }\n            finally {\n                e1.Dispose();\n            }\n        }\n        else {\n            return false;\n        }\n    }\n    toString() {\n        const this$ = this;\n        return (\"map [\" + join(\"; \", map_2((kv) => format(\"({0}, {1})\", kv[0], kv[1]), this$))) + \"]\";\n    }\n    get [Symbol.toStringTag]() {\n        return \"FSharpMap\";\n    }\n    GetEnumerator() {\n        const __ = this;\n        return MapTreeModule_mkIEnumerator(__.tree);\n    }\n    [Symbol.iterator]() {\n        return toIterator(this.GetEnumerator());\n    }\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\n        const __ = this;\n        return MapTreeModule_mkIEnumerator(__.tree);\n    }\n    CompareTo(obj) {\n        const m = this;\n        if (obj instanceof FSharpMap) {\n            return compareWith((kvp1, kvp2) => {\n                const c = m.comparer.Compare(kvp1[0], kvp2[0]) | 0;\n                return ((c !== 0) ? c : compare(kvp1[1], kvp2[1])) | 0;\n            }, m, obj) | 0;\n        }\n        else {\n            throw (new Error(\"not comparable\\\\nParameter name: obj\"));\n        }\n    }\n    [\"System.Collections.Generic.ICollection`1.Add2B595\"](x) {\n        throw (new Error(\"Map cannot be mutated\"));\n    }\n    [\"System.Collections.Generic.ICollection`1.Clear\"]() {\n        throw (new Error(\"Map cannot be mutated\"));\n    }\n    [\"System.Collections.Generic.ICollection`1.Remove2B595\"](x) {\n        throw (new Error(\"Map cannot be mutated\"));\n    }\n    [\"System.Collections.Generic.ICollection`1.Contains2B595\"](x) {\n        const m = this;\n        return FSharpMap__ContainsKey(m, x[0]) ? equals(FSharpMap__get_Item(m, x[0]), x[1]) : false;\n    }\n    [\"System.Collections.Generic.ICollection`1.CopyToZ2E171D71\"](arr, i) {\n        const m = this;\n        MapTreeModule_copyToArray(m.tree, arr, i);\n    }\n    [\"System.Collections.Generic.ICollection`1.get_IsReadOnly\"]() {\n        return true;\n    }\n    [\"System.Collections.Generic.ICollection`1.get_Count\"]() {\n        const m = this;\n        return FSharpMap__get_Count(m) | 0;\n    }\n    [\"System.Collections.Generic.IReadOnlyCollection`1.get_Count\"]() {\n        const m = this;\n        return FSharpMap__get_Count(m) | 0;\n    }\n    get size() {\n        const m = this;\n        return FSharpMap__get_Count(m) | 0;\n    }\n    clear() {\n        throw (new Error(\"Map cannot be mutated\"));\n    }\n    delete(_arg1) {\n        throw (new Error(\"Map cannot be mutated\"));\n        return false;\n    }\n    entries() {\n        const m = this;\n        return map_2((p) => [p[0], p[1]], m);\n    }\n    get(k) {\n        const m = this;\n        return FSharpMap__get_Item(m, k);\n    }\n    has(k) {\n        const m = this;\n        return FSharpMap__ContainsKey(m, k);\n    }\n    keys() {\n        const m = this;\n        return map_2((p) => p[0], m);\n    }\n    set(k, v) {\n        const m = this;\n        throw (new Error(\"Map cannot be mutated\"));\n        return m;\n    }\n    values() {\n        const m = this;\n        return map_2((p) => p[1], m);\n    }\n    forEach(f, thisArg) {\n        const m = this;\n        iterate_1((p) => {\n            f(p[1], p[0], m);\n        }, m);\n    }\n}\n\nexport function FSharpMap$reflection(gen0, gen1) {\n    return class_type(\"Map.FSharpMap\", [gen0, gen1], FSharpMap);\n}\n\nexport function FSharpMap_$ctor(comparer, tree) {\n    return new FSharpMap(comparer, tree);\n}\n\n(() => {\n    FSharpMap.empty = FSharpMap_$ctor(LanguagePrimitives_FastGenericComparer(), MapTreeModule_empty());\n})();\n\nexport function FSharpMap_get_Empty() {\n    return FSharpMap.empty;\n}\n\nexport function FSharpMap_Create(ie) {\n    const comparer = LanguagePrimitives_FastGenericComparer();\n    return FSharpMap_$ctor(comparer, MapTreeModule_ofSeq(comparer, ie));\n}\n\nexport function FSharpMap__get_Comparer(m) {\n    return m.comparer;\n}\n\nexport function FSharpMap__get_Tree(m) {\n    return m.tree;\n}\n\nexport function FSharpMap__Add(m, key, value) {\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_add(m.comparer, key, value, m.tree));\n}\n\nexport function FSharpMap__Change(m, key, f) {\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_change(m.comparer, key, f, m.tree));\n}\n\nexport function FSharpMap__get_IsEmpty(m) {\n    return m.tree == null;\n}\n\nexport function FSharpMap__get_Item(m, key) {\n    return MapTreeModule_find(m.comparer, key, m.tree);\n}\n\nexport function FSharpMap__TryPick(m, f) {\n    return MapTreeModule_tryPick(f, m.tree);\n}\n\nexport function FSharpMap__Exists(m, predicate) {\n    return MapTreeModule_exists(predicate, m.tree);\n}\n\nexport function FSharpMap__Filter(m, predicate) {\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_filter(m.comparer, predicate, m.tree));\n}\n\nexport function FSharpMap__ForAll(m, predicate) {\n    return MapTreeModule_forall(predicate, m.tree);\n}\n\nexport function FSharpMap__Fold(m, f, acc) {\n    return MapTreeModule_foldBack(f, m.tree, acc);\n}\n\nexport function FSharpMap__FoldSection(m, lo, hi, f, acc) {\n    return MapTreeModule_foldSection(m.comparer, lo, hi, f, m.tree, acc);\n}\n\nexport function FSharpMap__Iterate(m, f) {\n    MapTreeModule_iter(f, m.tree);\n}\n\nexport function FSharpMap__MapRange(m, f) {\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_map(f, m.tree));\n}\n\nexport function FSharpMap__Map(m, f) {\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_mapi(f, m.tree));\n}\n\nexport function FSharpMap__Partition(m, predicate) {\n    const patternInput = MapTreeModule_partition(m.comparer, predicate, m.tree);\n    return [FSharpMap_$ctor(m.comparer, patternInput[0]), FSharpMap_$ctor(m.comparer, patternInput[1])];\n}\n\nexport function FSharpMap__get_Count(m) {\n    return MapTreeModule_size(m.tree);\n}\n\nexport function FSharpMap__ContainsKey(m, key) {\n    return MapTreeModule_mem(m.comparer, key, m.tree);\n}\n\nexport function FSharpMap__Remove(m, key) {\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_remove(m.comparer, key, m.tree));\n}\n\nexport function FSharpMap__TryGetValue(__, key, value) {\n    const matchValue = MapTreeModule_tryFind(__.comparer, key, __.tree);\n    if (matchValue == null) {\n        return false;\n    }\n    else {\n        const v = value_2(matchValue);\n        value.contents = v;\n        return true;\n    }\n}\n\nexport function FSharpMap__TryFind(m, key) {\n    return MapTreeModule_tryFind(m.comparer, key, m.tree);\n}\n\nexport function FSharpMap__ToList(m) {\n    return MapTreeModule_toList(m.tree);\n}\n\nexport function FSharpMap__ToArray(m) {\n    return MapTreeModule_toArray(m.tree);\n}\n\nexport function FSharpMap__ComputeHashCode(this$) {\n    const combineHash = (x, y) => (((x << 1) + y) + 631);\n    let res = 0;\n    const enumerator = getEnumerator(this$);\n    try {\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            const activePatternResult4293 = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n            res = combineHash(res, structuralHash(activePatternResult4293[0]));\n            res = combineHash(res, structuralHash(activePatternResult4293[1]));\n        }\n    }\n    finally {\n        enumerator.Dispose();\n    }\n    return res | 0;\n}\n\nexport function isEmpty(table) {\n    return FSharpMap__get_IsEmpty(table);\n}\n\nexport function add(key, value, table) {\n    return FSharpMap__Add(table, key, value);\n}\n\nexport function change(key, f, table) {\n    return FSharpMap__Change(table, key, f);\n}\n\nexport function find(key, table) {\n    return FSharpMap__get_Item(table, key);\n}\n\nexport function tryFind(key, table) {\n    return FSharpMap__TryFind(table, key);\n}\n\nexport function remove(key, table) {\n    return FSharpMap__Remove(table, key);\n}\n\nexport function containsKey(key, table) {\n    return FSharpMap__ContainsKey(table, key);\n}\n\nexport function iterate(action, table) {\n    FSharpMap__Iterate(table, action);\n}\n\nexport function tryPick(chooser, table) {\n    return FSharpMap__TryPick(table, chooser);\n}\n\nexport function pick(chooser, table) {\n    const matchValue = tryPick(chooser, table);\n    if (matchValue != null) {\n        return value_2(matchValue);\n    }\n    else {\n        throw (new Error());\n    }\n}\n\nexport function exists(predicate, table) {\n    return FSharpMap__Exists(table, predicate);\n}\n\nexport function filter(predicate, table) {\n    return FSharpMap__Filter(table, predicate);\n}\n\nexport function partition(predicate, table) {\n    return FSharpMap__Partition(table, predicate);\n}\n\nexport function forAll(predicate, table) {\n    return FSharpMap__ForAll(table, predicate);\n}\n\nexport function map(mapping, table) {\n    return FSharpMap__Map(table, mapping);\n}\n\nexport function fold(folder, state, table) {\n    return MapTreeModule_fold(folder, state, FSharpMap__get_Tree(table));\n}\n\nexport function foldBack(folder, table, state) {\n    return MapTreeModule_foldBack(folder, FSharpMap__get_Tree(table), state);\n}\n\nexport function toSeq(table) {\n    return map_2((kvp) => [kvp[0], kvp[1]], table);\n}\n\nexport function findKey(predicate, table) {\n    return pick_1((kvp) => {\n        const k = kvp[0];\n        if (predicate(k, kvp[1])) {\n            return some(k);\n        }\n        else {\n            return void 0;\n        }\n    }, table);\n}\n\nexport function tryFindKey(predicate, table) {\n    return tryPick_1((kvp) => {\n        const k = kvp[0];\n        if (predicate(k, kvp[1])) {\n            return some(k);\n        }\n        else {\n            return void 0;\n        }\n    }, table);\n}\n\nexport function ofList(elements) {\n    return FSharpMap_Create(elements);\n}\n\nexport function ofSeq(elements) {\n    return FSharpMap_Create(elements);\n}\n\nexport function ofArray(elements) {\n    const comparer = LanguagePrimitives_FastGenericComparer();\n    return FSharpMap_$ctor(comparer, MapTreeModule_ofArray(comparer, elements));\n}\n\nexport function toList(table) {\n    return FSharpMap__ToList(table);\n}\n\nexport function toArray(table) {\n    return FSharpMap__ToArray(table);\n}\n\nexport function empty() {\n    return FSharpMap_get_Empty();\n}\n\nexport function createMutable(source, comparer) {\n    return Dictionary_$ctor_6623D9B3(source, comparer);\n}\n\nexport function groupBy(projection, xs, comparer) {\n    const dict = createMutable(empty_1(), comparer);\n    const enumerator = getEnumerator(xs);\n    try {\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            const v = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n            const key = projection(v);\n            if (dict.has(key)) {\n                void (dict.get(key).push(v));\n            }\n            else {\n                void dict.set(key, [v]);\n            }\n        }\n    }\n    finally {\n        enumerator.Dispose();\n    }\n    return map_2((tupledArg) => [tupledArg[0], tupledArg[1]], dict.entries());\n}\n\nexport function countBy(projection, xs, comparer) {\n    const dict = createMutable(empty_1(), comparer);\n    const enumerator = getEnumerator(xs);\n    try {\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            const key = projection(enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n            void (dict.has(key) ? dict.set(key, dict.get(key) + 1) : dict.set(key, 1));\n        }\n    }\n    finally {\n        enumerator.Dispose();\n    }\n    return dict.entries();\n}\n\nexport function count(table) {\n    return FSharpMap__get_Count(table);\n}\n\n","import { Parsimmon_seperateBy, Parsimmon_ofLazy, Parsimmon_optionalWhitespace, Parsimmon_between, Parsimmon_satisfy, Parsimmon_orTry, Parsimmon_oneOf, Parsimmon_stringReturn, Parsimmon_choose, Parsimmon_many, Parsimmon_seq3, Parsimmon_str, Parsimmon_seq2, Parsimmon_map, Parsimmon_digit, Parsimmon_atLeastOneOrMany, Parsimmon_concat } from \"../Fable.Parsimmon.4.0.0/Parsimmon.fs.js\";\nimport { parse } from \"../fable-library.3.1.5/Double.js\";\nimport { join } from \"../fable-library.3.1.5/String.js\";\nimport { Json } from \"./Json.fs.js\";\nimport { map, ofArray } from \"../fable-library.3.1.5/List.js\";\nimport { ofList } from \"../fable-library.3.1.5/Map.js\";\nimport { Lazy } from \"../fable-library.3.1.5/Util.js\";\n\nexport const digits = Parsimmon_concat(Parsimmon_atLeastOneOrMany(Parsimmon_digit));\n\nexport const jint = Parsimmon_map((value) => parse(value), digits);\n\nexport const negJint = Parsimmon_map((tupledArg) => (-tupledArg[1]), Parsimmon_seq2(Parsimmon_str(\"-\"), jint));\n\nexport const jfloat = Parsimmon_map((tupledArg) => {\n    const digitsLeft = tupledArg[0];\n    return parse(join(\"\", [(digitsLeft === \"\") ? \"0\" : digitsLeft, tupledArg[1], tupledArg[2]]));\n}, Parsimmon_seq3(Parsimmon_concat(Parsimmon_many(Parsimmon_digit)), Parsimmon_str(\".\"), Parsimmon_concat(Parsimmon_atLeastOneOrMany(Parsimmon_digit))));\n\nexport const negativeJFloat = Parsimmon_map((tupledArg) => (-tupledArg[1]), Parsimmon_seq2(Parsimmon_str(\"-\"), jfloat));\n\nexport const jnumber = Parsimmon_map((arg0) => (new Json(0, arg0)), Parsimmon_choose(ofArray([jfloat, negativeJFloat, jint, negJint])));\n\nexport const jbool = Parsimmon_choose(ofArray([Parsimmon_stringReturn(\"true\", new Json(2, true)), Parsimmon_stringReturn(\"false\", new Json(2, false))]));\n\nexport const jnull = Parsimmon_stringReturn(\"null\", new Json(3));\n\nexport const stringLiteral = (() => {\n    const escape = Parsimmon_map((_arg1) => {\n        switch (_arg1) {\n            case \"b\": {\n                return \"\\b\";\n            }\n            case \"f\": {\n                return \"\\f\";\n            }\n            case \"n\": {\n                return \"\\n\";\n            }\n            case \"r\": {\n                return \"\\r\";\n            }\n            case \"t\": {\n                return \"\\t\";\n            }\n            default: {\n                return _arg1;\n            }\n        }\n    }, Parsimmon_oneOf(\"\\\"\\\\/bfnrt\"));\n    const anyCharSnippet = Parsimmon_concat(Parsimmon_many(Parsimmon_orTry(Parsimmon_map((tuple) => tuple[1], Parsimmon_seq2(Parsimmon_str(\"\\\\\"), escape)), Parsimmon_satisfy((c_1) => ((c_1 !== \"\\\"\") ? (c_1 !== \"\\\\\") : false)))));\n    return Parsimmon_between(Parsimmon_str(\"\\\"\"), Parsimmon_str(\"\\\"\"), anyCharSnippet);\n})();\n\nexport const jstring = stringLiteral.map((arg0) => (new Json(1, arg0)));\n\nexport function withWhitespace(p) {\n    return Parsimmon_between(Parsimmon_optionalWhitespace, Parsimmon_optionalWhitespace, p);\n}\n\nexport const jvalue = Parsimmon_choose(map((p) => withWhitespace(p), ofArray([jnull, jbool, jnumber, jstring])));\n\nexport const comma = withWhitespace(Parsimmon_str(\",\"));\n\nfunction json$004099() {\n    return Parsimmon_ofLazy(() => Parsimmon_choose(ofArray([jvalue, Parsimmon_map((arg) => (new Json(4, ofArray(arg))), Parsimmon_between(withWhitespace(Parsimmon_str(\"[\")), withWhitespace(Parsimmon_str(\"]\")), Parsimmon_seperateBy(comma, json$004099$002D1.Value))), Parsimmon_map((arg_2) => (new Json(5, ofList(ofArray(arg_2)))), Parsimmon_between(withWhitespace(Parsimmon_str(\"{\")), withWhitespace(Parsimmon_str(\"}\")), Parsimmon_seperateBy(comma, Parsimmon_map((tupledArg) => [tupledArg[0], tupledArg[2]], Parsimmon_seq3(withWhitespace(stringLiteral), withWhitespace(Parsimmon_str(\":\")), withWhitespace(json$004099$002D1.Value))))))])));\n}\n\nconst json$004099$002D1 = new Lazy(json$004099);\n\nexport const json = json$004099$002D1.Value;\n\nexport const jsonParser = withWhitespace(json);\n\n","import { List, Record } from \"../Types.js\";\nimport { record_type, array_type, int32_type } from \"../Reflection.js\";\nimport { op_LeftShift, op_BitwiseAnd, op_Addition, compare, op_Subtraction, op_Division, equals, fromInteger, op_Multiply, op_Modulus, toInt, fromBits } from \"../Long.js\";\nimport { copy, initialize, map, fill } from \"../Array.js\";\nimport { int32ToString } from \"../Util.js\";\nimport { isNullOrEmpty, join } from \"../String.js\";\n\nexport class BigNat extends Record {\n    constructor(bound, digits) {\n        super();\n        this.bound = (bound | 0);\n        this.digits = digits;\n    }\n}\n\nexport function BigNat$reflection() {\n    return record_type(\"BigInt.BigNat\", [], BigNat, () => [[\"bound\", int32_type], [\"digits\", array_type(int32_type)]]);\n}\n\nexport function BigNatModule_FFT_pow32(x_mut, n_mut) {\n    BigNatModule_FFT_pow32:\n    while (true) {\n        const x = x_mut, n = n_mut;\n        if (n === 0) {\n            return 1;\n        }\n        else if ((n % 2) === 0) {\n            x_mut = (x * x);\n            n_mut = (~(~(n / 2)));\n            continue BigNatModule_FFT_pow32;\n        }\n        else {\n            return (x * BigNatModule_FFT_pow32(x * x, ~(~(n / 2)))) | 0;\n        }\n        break;\n    }\n}\n\nexport function BigNatModule_FFT_leastBounding2Power(b) {\n    const findBounding2Power = (b_1_mut, tp_mut, i_mut) => {\n        findBounding2Power:\n        while (true) {\n            const b_1 = b_1_mut, tp = tp_mut, i = i_mut;\n            if (b_1 <= tp) {\n                return [tp, i];\n            }\n            else {\n                b_1_mut = b_1;\n                tp_mut = (tp * 2);\n                i_mut = (i + 1);\n                continue findBounding2Power;\n            }\n            break;\n        }\n    };\n    return findBounding2Power(b, 1, 0);\n}\n\nexport const BigNatModule_FFT_p = fromBits(2013265921, 0, false);\n\nconst BigNatModule_FFT_patternInput$004075 = [27, 15, 31, 440564289];\n\nexport const BigNatModule_FFT_w = BigNatModule_FFT_patternInput$004075[3];\n\nexport const BigNatModule_FFT_m = BigNatModule_FFT_patternInput$004075[1];\n\nexport const BigNatModule_FFT_k = BigNatModule_FFT_patternInput$004075[0];\n\nexport const BigNatModule_FFT_g = BigNatModule_FFT_patternInput$004075[2];\n\nexport const BigNatModule_FFT_primeP = BigNatModule_FFT_p;\n\nexport const BigNatModule_FFT_maxBitsInsideFp = 30;\n\nexport const BigNatModule_FFT_Fp_p = 2013265921;\n\nexport const BigNatModule_FFT_Fp_p64 = fromBits(2013265921, 0, true);\n\nexport function BigNatModule_FFT_Fp_toInt(x) {\n    return ~(~x);\n}\n\nexport function BigNatModule_FFT_Fp_ofInt32(x) {\n    return x >>> 0;\n}\n\nexport const BigNatModule_FFT_Fp_mzero = 0;\n\nexport const BigNatModule_FFT_Fp_mone = 1;\n\nexport const BigNatModule_FFT_Fp_mtwo = 2;\n\nexport function BigNatModule_FFT_Fp_mpow(x_mut, n_mut) {\n    BigNatModule_FFT_Fp_mpow:\n    while (true) {\n        const x = x_mut, n = n_mut;\n        if (n === 0) {\n            return BigNatModule_FFT_Fp_mone;\n        }\n        else if ((n % 2) === 0) {\n            x_mut = (toInt(op_Modulus(op_Multiply(fromInteger(x, true, 6), fromInteger(x, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0);\n            n_mut = (~(~(n / 2)));\n            continue BigNatModule_FFT_Fp_mpow;\n        }\n        else {\n            const y_2 = BigNatModule_FFT_Fp_mpow(toInt(op_Modulus(op_Multiply(fromInteger(x, true, 6), fromInteger(x, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0, ~(~(n / 2)));\n            return toInt(op_Modulus(op_Multiply(fromInteger(x, true, 6), fromInteger(y_2, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0;\n        }\n        break;\n    }\n}\n\nexport function BigNatModule_FFT_Fp_mpowL(x_mut, n_mut) {\n    BigNatModule_FFT_Fp_mpowL:\n    while (true) {\n        const x = x_mut, n = n_mut;\n        if (equals(n, fromBits(0, 0, false))) {\n            return BigNatModule_FFT_Fp_mone;\n        }\n        else if (equals(op_Modulus(n, fromBits(2, 0, false)), fromBits(0, 0, false))) {\n            x_mut = (toInt(op_Modulus(op_Multiply(fromInteger(x, true, 6), fromInteger(x, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0);\n            n_mut = op_Division(n, fromBits(2, 0, false));\n            continue BigNatModule_FFT_Fp_mpowL;\n        }\n        else {\n            const y_2 = BigNatModule_FFT_Fp_mpowL(toInt(op_Modulus(op_Multiply(fromInteger(x, true, 6), fromInteger(x, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0, op_Division(n, fromBits(2, 0, false)));\n            return toInt(op_Modulus(op_Multiply(fromInteger(x, true, 6), fromInteger(y_2, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0;\n        }\n        break;\n    }\n}\n\nexport function BigNatModule_FFT_Fp_m2PowNthRoot(n) {\n    return BigNatModule_FFT_Fp_mpow(BigNatModule_FFT_w >>> 0, BigNatModule_FFT_pow32(2, BigNatModule_FFT_k - n));\n}\n\nexport function BigNatModule_FFT_Fp_minv(x) {\n    return BigNatModule_FFT_Fp_mpowL(x, op_Subtraction(BigNatModule_FFT_primeP, fromBits(2, 0, false)));\n}\n\nexport function BigNatModule_FFT_computeFFT(lambda, mu, n, w, u, res, offset) {\n    let x_1, x_3;\n    if (n === 1) {\n        res[offset] = u[mu];\n    }\n    else {\n        const halfN = (~(~(n / 2))) | 0;\n        const ww = toInt(op_Modulus(op_Multiply(fromInteger(w, true, 6), fromInteger(w, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0;\n        const offsetHalfN = (offset + halfN) | 0;\n        BigNatModule_FFT_computeFFT(lambda * 2, mu, halfN, ww, u, res, offset);\n        BigNatModule_FFT_computeFFT(lambda * 2, lambda + mu, halfN, ww, u, res, offsetHalfN);\n        let wj = BigNatModule_FFT_Fp_mone;\n        for (let j = 0; j <= (halfN - 1); j++) {\n            const even = res[offset + j];\n            const odd = res[offsetHalfN + j];\n            res[offset + j] = ((even + (x_1 = wj, toInt(op_Modulus(op_Multiply(fromInteger(x_1, true, 6), fromInteger(odd, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0)) % BigNatModule_FFT_Fp_p);\n            res[offsetHalfN + j] = (((even + BigNatModule_FFT_Fp_p) - (x_3 = wj, toInt(op_Modulus(op_Multiply(fromInteger(x_3, true, 6), fromInteger(odd, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0)) % BigNatModule_FFT_Fp_p);\n            const y_5 = wj;\n            wj = (toInt(op_Modulus(op_Multiply(fromInteger(w, true, 6), fromInteger(y_5, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0);\n        }\n    }\n}\n\nexport function BigNatModule_FFT_computFftInPlace(n, w, u) {\n    const res = fill(new Uint32Array(n), 0, n, BigNatModule_FFT_Fp_mzero);\n    BigNatModule_FFT_computeFFT(1, 0, n, w, u, res, 0);\n    return res;\n}\n\nexport function BigNatModule_FFT_computeInverseFftInPlace(n, w, uT) {\n    const bigKInv = BigNatModule_FFT_Fp_minv(n >>> 0);\n    return map((y) => (toInt(op_Modulus(op_Multiply(fromInteger(bigKInv, true, 6), fromInteger(y, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0), BigNatModule_FFT_computFftInPlace(n, BigNatModule_FFT_Fp_minv(w), uT), Uint32Array);\n}\n\nexport const BigNatModule_FFT_maxTwoPower = 29;\n\nexport const BigNatModule_FFT_twoPowerTable = initialize(BigNatModule_FFT_maxTwoPower - 1, (i) => BigNatModule_FFT_pow32(2, i), Int32Array);\n\nexport function BigNatModule_FFT_computeFftPaddedPolynomialProduct(bigK, k, u, v) {\n    const w = BigNatModule_FFT_Fp_m2PowNthRoot(k);\n    const n = bigK | 0;\n    const uT = BigNatModule_FFT_computFftInPlace(n, w, u);\n    const vT = BigNatModule_FFT_computFftInPlace(n, w, v);\n    return BigNatModule_FFT_computeInverseFftInPlace(n, w, initialize(n, (i) => {\n        const x = uT[i];\n        const y = vT[i];\n        return toInt(op_Modulus(op_Multiply(fromInteger(x, true, 6), fromInteger(y, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0;\n    }, Uint32Array));\n}\n\nexport function BigNatModule_FFT_padTo(n, u) {\n    const uBound = u.length | 0;\n    return initialize(n, (i) => ((i < uBound) ? BigNatModule_FFT_Fp_ofInt32(u[i]) : BigNatModule_FFT_Fp_mzero), Uint32Array);\n}\n\nexport function BigNatModule_FFT_computeFftPolynomialProduct(degu, u, degv, v) {\n    const patternInput = BigNatModule_FFT_leastBounding2Power((degu + degv) + 1);\n    const bigK = patternInput[0] | 0;\n    const w = BigNatModule_FFT_Fp_m2PowNthRoot(patternInput[1]);\n    const u_1 = BigNatModule_FFT_padTo(bigK, u);\n    const v_1 = BigNatModule_FFT_padTo(bigK, v);\n    const n = bigK | 0;\n    const uT = BigNatModule_FFT_computFftInPlace(n, w, u_1);\n    const vT = BigNatModule_FFT_computFftInPlace(n, w, v_1);\n    return map((x_1) => BigNatModule_FFT_Fp_toInt(x_1), BigNatModule_FFT_computeInverseFftInPlace(n, w, initialize(n, (i) => {\n        const x = uT[i];\n        const y = vT[i];\n        return toInt(op_Modulus(op_Multiply(fromInteger(x, true, 6), fromInteger(y, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0;\n    }, Uint32Array)), Int32Array);\n}\n\nexport const BigNatModule_FFT_mzero = BigNatModule_FFT_Fp_mzero;\n\nexport const BigNatModule_FFT_mone = BigNatModule_FFT_Fp_mone;\n\nexport const BigNatModule_FFT_maxFp = ((BigNatModule_FFT_Fp_p + BigNatModule_FFT_Fp_p) - BigNatModule_FFT_mone) % BigNatModule_FFT_Fp_p;\n\nexport function BigNatModule_bound(n) {\n    return n.bound;\n}\n\nexport function BigNatModule_setBound(n, v) {\n    n.bound = v;\n}\n\nexport function BigNatModule_coeff(n, i) {\n    return n.digits[i];\n}\n\nexport function BigNatModule_coeff64(n, i) {\n    return fromInteger(BigNatModule_coeff(n, i), false, 2);\n}\n\nexport function BigNatModule_setCoeff(n, i, v) {\n    n.digits[i] = v;\n}\n\nexport function BigNatModule_pow64(x_mut, n_mut) {\n    BigNatModule_pow64:\n    while (true) {\n        const x = x_mut, n = n_mut;\n        if (n === 0) {\n            return fromBits(1, 0, false);\n        }\n        else if ((n % 2) === 0) {\n            x_mut = op_Multiply(x, x);\n            n_mut = (~(~(n / 2)));\n            continue BigNatModule_pow64;\n        }\n        else {\n            return op_Multiply(x, BigNatModule_pow64(op_Multiply(x, x), ~(~(n / 2))));\n        }\n        break;\n    }\n}\n\nexport function BigNatModule_pow32(x_mut, n_mut) {\n    BigNatModule_pow32:\n    while (true) {\n        const x = x_mut, n = n_mut;\n        if (n === 0) {\n            return 1;\n        }\n        else if ((n % 2) === 0) {\n            x_mut = (x * x);\n            n_mut = (~(~(n / 2)));\n            continue BigNatModule_pow32;\n        }\n        else {\n            return (x * BigNatModule_pow32(x * x, ~(~(n / 2)))) | 0;\n        }\n        break;\n    }\n}\n\nexport function BigNatModule_hash(n) {\n    let res = 0;\n    for (let i = 0; i <= (n.bound - 1); i++) {\n        res = (n.digits[i] + (res << 3));\n    }\n    return res | 0;\n}\n\nexport function BigNatModule_maxInt(a, b) {\n    if (a < b) {\n        return b | 0;\n    }\n    else {\n        return a | 0;\n    }\n}\n\nexport function BigNatModule_minInt(a, b) {\n    if (a < b) {\n        return a | 0;\n    }\n    else {\n        return b | 0;\n    }\n}\n\nexport const BigNatModule_baseBits = 24;\n\nexport const BigNatModule_baseN = 16777216;\n\nexport const BigNatModule_baseMask = 16777215;\n\nexport const BigNatModule_baseNi64 = fromBits(16777216, 0, false);\n\nexport const BigNatModule_baseMaski64 = fromBits(16777215, 0, false);\n\nexport const BigNatModule_baseMaskU = fromBits(16777215, 0, true);\n\nexport const BigNatModule_baseMask32A = 16777215;\n\nexport const BigNatModule_baseMask32B = 255;\n\nexport const BigNatModule_baseShift32B = 24;\n\nexport const BigNatModule_baseMask64A = 16777215;\n\nexport const BigNatModule_baseMask64B = 16777215;\n\nexport const BigNatModule_baseMask64C = 65535;\n\nexport const BigNatModule_baseShift64B = 24;\n\nexport const BigNatModule_baseShift64C = 48;\n\nexport function BigNatModule_divbase(x) {\n    return ~(~((x >>> 0) >>> BigNatModule_baseBits));\n}\n\nexport function BigNatModule_modbase(x) {\n    return x & BigNatModule_baseMask;\n}\n\nexport function BigNatModule_createN(b) {\n    return new BigNat(b, new Int32Array(b));\n}\n\nexport function BigNatModule_copyN(x) {\n    return new BigNat(x.bound, copy(x.digits));\n}\n\nexport function BigNatModule_normN(n) {\n    const findLeastBound = (na_mut, i_mut) => {\n        findLeastBound:\n        while (true) {\n            const na = na_mut, i = i_mut;\n            if ((i === -1) ? true : (na[i] !== 0)) {\n                return (i + 1) | 0;\n            }\n            else {\n                na_mut = na;\n                i_mut = (i - 1);\n                continue findLeastBound;\n            }\n            break;\n        }\n    };\n    const bound = findLeastBound(n.digits, n.bound - 1) | 0;\n    n.bound = bound;\n    return n;\n}\n\nexport const BigNatModule_boundInt = 2;\n\nexport const BigNatModule_boundInt64 = 3;\n\nexport const BigNatModule_boundBase = 1;\n\nexport function BigNatModule_embed(x) {\n    const x_1 = ((x < 0) ? 0 : x) | 0;\n    if (x_1 < BigNatModule_baseN) {\n        const r = BigNatModule_createN(1);\n        r.digits[0] = x_1;\n        return BigNatModule_normN(r);\n    }\n    else {\n        const r_1 = BigNatModule_createN(BigNatModule_boundInt);\n        for (let i = 0; i <= (BigNatModule_boundInt - 1); i++) {\n            r_1.digits[i] = ((~(~(x_1 / BigNatModule_pow32(BigNatModule_baseN, i)))) % BigNatModule_baseN);\n        }\n        return BigNatModule_normN(r_1);\n    }\n}\n\nexport function BigNatModule_embed64(x) {\n    const x_1 = (compare(x, fromBits(0, 0, false)) < 0) ? fromBits(0, 0, false) : x;\n    const r = BigNatModule_createN(BigNatModule_boundInt64);\n    for (let i = 0; i <= (BigNatModule_boundInt64 - 1); i++) {\n        r.digits[i] = (~(~toInt(op_Modulus(op_Division(x_1, BigNatModule_pow64(BigNatModule_baseNi64, i)), BigNatModule_baseNi64))));\n    }\n    return BigNatModule_normN(r);\n}\n\nexport function BigNatModule_eval32(n) {\n    if (n.bound === 1) {\n        return n.digits[0] | 0;\n    }\n    else {\n        let acc = 0;\n        for (let i = n.bound - 1; i >= 0; i--) {\n            acc = (n.digits[i] + (BigNatModule_baseN * acc));\n        }\n        return acc | 0;\n    }\n}\n\nexport function BigNatModule_eval64(n) {\n    if (n.bound === 1) {\n        return fromInteger(n.digits[0], false, 2);\n    }\n    else {\n        let acc = fromBits(0, 0, false);\n        for (let i = n.bound - 1; i >= 0; i--) {\n            acc = op_Addition(fromInteger(n.digits[i], false, 2), op_Multiply(BigNatModule_baseNi64, acc));\n        }\n        return acc;\n    }\n}\n\nexport const BigNatModule_one = BigNatModule_embed(1);\n\nexport const BigNatModule_zero = BigNatModule_embed(0);\n\nexport function BigNatModule_restrictTo(d, n) {\n    return new BigNat(BigNatModule_minInt(d, n.bound), n.digits);\n}\n\nexport function BigNatModule_shiftUp(d, n) {\n    const m = BigNatModule_createN(n.bound + d);\n    for (let i = 0; i <= (n.bound - 1); i++) {\n        m.digits[i + d] = n.digits[i];\n    }\n    return m;\n}\n\nexport function BigNatModule_shiftDown(d, n) {\n    if ((n.bound - d) <= 0) {\n        return BigNatModule_zero;\n    }\n    else {\n        const m = BigNatModule_createN(n.bound - d);\n        for (let i = 0; i <= (m.bound - 1); i++) {\n            m.digits[i] = n.digits[i + d];\n        }\n        return m;\n    }\n}\n\nexport function BigNatModule_degree(n) {\n    return n.bound - 1;\n}\n\nexport function BigNatModule_addP(i_mut, n_mut, c_mut, p_mut, q_mut, r_mut) {\n    let z, i_1, z_1, i_2;\n    BigNatModule_addP:\n    while (true) {\n        const i = i_mut, n = n_mut, c = c_mut, p = p_mut, q = q_mut, r = r_mut;\n        if (i < n) {\n            const x = (((z = p, (i_1 = (i | 0), (i_1 < z.bound) ? z.digits[i_1] : 0)) + (z_1 = q, (i_2 = (i | 0), (i_2 < z_1.bound) ? z_1.digits[i_2] : 0))) + c) | 0;\n            r.digits[i] = BigNatModule_modbase(x);\n            i_mut = (i + 1);\n            n_mut = n;\n            c_mut = BigNatModule_divbase(x);\n            p_mut = p;\n            q_mut = q;\n            r_mut = r;\n            continue BigNatModule_addP;\n        }\n        break;\n    }\n}\n\nexport function BigNatModule_add(p, q) {\n    const rbound = (1 + BigNatModule_maxInt(p.bound, q.bound)) | 0;\n    const r = BigNatModule_createN(rbound);\n    BigNatModule_addP(0, rbound, 0, p, q, r);\n    return BigNatModule_normN(r);\n}\n\nexport function BigNatModule_subP(i_mut, n_mut, c_mut, p_mut, q_mut, r_mut) {\n    let z, i_1, z_1, i_2;\n    BigNatModule_subP:\n    while (true) {\n        const i = i_mut, n = n_mut, c = c_mut, p = p_mut, q = q_mut, r = r_mut;\n        if (i < n) {\n            const x = (((z = p, (i_1 = (i | 0), (i_1 < z.bound) ? z.digits[i_1] : 0)) - (z_1 = q, (i_2 = (i | 0), (i_2 < z_1.bound) ? z_1.digits[i_2] : 0))) + c) | 0;\n            if (x > 0) {\n                r.digits[i] = BigNatModule_modbase(x);\n                i_mut = (i + 1);\n                n_mut = n;\n                c_mut = BigNatModule_divbase(x);\n                p_mut = p;\n                q_mut = q;\n                r_mut = r;\n                continue BigNatModule_subP;\n            }\n            else {\n                const x_1 = (x + BigNatModule_baseN) | 0;\n                r.digits[i] = BigNatModule_modbase(x_1);\n                i_mut = (i + 1);\n                n_mut = n;\n                c_mut = (BigNatModule_divbase(x_1) - 1);\n                p_mut = p;\n                q_mut = q;\n                r_mut = r;\n                continue BigNatModule_subP;\n            }\n        }\n        else {\n            return c !== 0;\n        }\n        break;\n    }\n}\n\nexport function BigNatModule_sub(p, q) {\n    const rbound = BigNatModule_maxInt(p.bound, q.bound) | 0;\n    const r = BigNatModule_createN(rbound);\n    if (BigNatModule_subP(0, rbound, 0, p, q, r)) {\n        return BigNatModule_embed(0);\n    }\n    else {\n        return BigNatModule_normN(r);\n    }\n}\n\nexport function BigNatModule_isZero(p) {\n    return p.bound === 0;\n}\n\nexport function BigNatModule_IsZero(p) {\n    return BigNatModule_isZero(p);\n}\n\nexport function BigNatModule_isOne(p) {\n    if (p.bound === 1) {\n        return p.digits[0] === 1;\n    }\n    else {\n        return false;\n    }\n}\n\nexport function BigNatModule_equal(p, q) {\n    if (p.bound === q.bound) {\n        const check = (pa_mut, qa_mut, i_mut) => {\n            check:\n            while (true) {\n                const pa = pa_mut, qa = qa_mut, i = i_mut;\n                if (i === -1) {\n                    return true;\n                }\n                else if (pa[i] === qa[i]) {\n                    pa_mut = pa;\n                    qa_mut = qa;\n                    i_mut = (i - 1);\n                    continue check;\n                }\n                else {\n                    return false;\n                }\n                break;\n            }\n        };\n        return check(p.digits, q.digits, p.bound - 1);\n    }\n    else {\n        return false;\n    }\n}\n\nexport function BigNatModule_shiftCompare(p, pn, q, qn) {\n    if ((p.bound + pn) < (q.bound + qn)) {\n        return -1;\n    }\n    else if ((p.bound + pn) > (q.bound + pn)) {\n        return 1;\n    }\n    else {\n        const check = (pa_mut, qa_mut, i_mut) => {\n            check:\n            while (true) {\n                const pa = pa_mut, qa = qa_mut, i = i_mut;\n                if (i === -1) {\n                    return 0;\n                }\n                else {\n                    const pai = ((i < pn) ? 0 : pa[i - pn]) | 0;\n                    const qai = ((i < qn) ? 0 : qa[i - qn]) | 0;\n                    if (pai === qai) {\n                        pa_mut = pa;\n                        qa_mut = qa;\n                        i_mut = (i - 1);\n                        continue check;\n                    }\n                    else if (pai < qai) {\n                        return -1;\n                    }\n                    else {\n                        return 1;\n                    }\n                }\n                break;\n            }\n        };\n        return check(p.digits, q.digits, (p.bound + pn) - 1) | 0;\n    }\n}\n\nexport function BigNatModule_compare(p, q) {\n    if (p.bound < q.bound) {\n        return -1;\n    }\n    else if (p.bound > q.bound) {\n        return 1;\n    }\n    else {\n        const check = (pa_mut, qa_mut, i_mut) => {\n            check:\n            while (true) {\n                const pa = pa_mut, qa = qa_mut, i = i_mut;\n                if (i === -1) {\n                    return 0;\n                }\n                else if (pa[i] === qa[i]) {\n                    pa_mut = pa;\n                    qa_mut = qa;\n                    i_mut = (i - 1);\n                    continue check;\n                }\n                else if (pa[i] < qa[i]) {\n                    return -1;\n                }\n                else {\n                    return 1;\n                }\n                break;\n            }\n        };\n        return check(p.digits, q.digits, p.bound - 1) | 0;\n    }\n}\n\nexport function BigNatModule_lt(p, q) {\n    return BigNatModule_compare(p, q) === -1;\n}\n\nexport function BigNatModule_gt(p, q) {\n    return BigNatModule_compare(p, q) === 1;\n}\n\nexport function BigNatModule_lte(p, q) {\n    return BigNatModule_compare(p, q) !== 1;\n}\n\nexport function BigNatModule_gte(p, q) {\n    return BigNatModule_compare(p, q) !== -1;\n}\n\nexport function BigNatModule_min(a, b) {\n    if (BigNatModule_lt(a, b)) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\nexport function BigNatModule_max(a, b) {\n    if (BigNatModule_lt(a, b)) {\n        return b;\n    }\n    else {\n        return a;\n    }\n}\n\nexport function BigNatModule_contributeArr(a_mut, i_mut, c_mut) {\n    BigNatModule_contributeArr:\n    while (true) {\n        const a = a_mut, i = i_mut, c = c_mut;\n        const x = op_Addition(fromInteger(a[i], false, 2), c);\n        const c_1 = op_Division(x, BigNatModule_baseNi64);\n        const x_3 = (~(~toInt(op_BitwiseAnd(x, BigNatModule_baseMaski64)))) | 0;\n        a[i] = x_3;\n        if (compare(c_1, fromBits(0, 0, false)) > 0) {\n            a_mut = a;\n            i_mut = (i + 1);\n            c_mut = c_1;\n            continue BigNatModule_contributeArr;\n        }\n        break;\n    }\n}\n\nexport function BigNatModule_scale(k, p) {\n    const r = BigNatModule_createN(p.bound + BigNatModule_boundInt);\n    const k_1 = fromInteger(k, false, 2);\n    for (let i = 0; i <= (p.bound - 1); i++) {\n        BigNatModule_contributeArr(r.digits, i, op_Multiply(k_1, fromInteger(p.digits[i], false, 2)));\n    }\n    return BigNatModule_normN(r);\n}\n\nexport function BigNatModule_mulSchoolBookBothSmall(p, q) {\n    const r = BigNatModule_createN(2);\n    const rak = op_Multiply(fromInteger(p, false, 2), fromInteger(q, false, 2));\n    BigNatModule_setCoeff(r, 0, ~(~toInt(op_BitwiseAnd(rak, BigNatModule_baseMaski64))));\n    BigNatModule_setCoeff(r, 1, ~(~toInt(op_Division(rak, BigNatModule_baseNi64))));\n    return BigNatModule_normN(r);\n}\n\nexport function BigNatModule_mulSchoolBookCarry(r_mut, c_mut, k_mut) {\n    BigNatModule_mulSchoolBookCarry:\n    while (true) {\n        const r = r_mut, c = c_mut, k = k_mut;\n        if (compare(c, fromBits(0, 0, false)) > 0) {\n            const rak = op_Addition(BigNatModule_coeff64(r, k), c);\n            BigNatModule_setCoeff(r, k, ~(~toInt(op_BitwiseAnd(rak, BigNatModule_baseMaski64))));\n            r_mut = r;\n            c_mut = op_Division(rak, BigNatModule_baseNi64);\n            k_mut = (k + 1);\n            continue BigNatModule_mulSchoolBookCarry;\n        }\n        break;\n    }\n}\n\nexport function BigNatModule_mulSchoolBookOneSmall(p, q) {\n    const bp = BigNatModule_bound(p) | 0;\n    const r = BigNatModule_createN(bp + 1);\n    const q_1 = fromInteger(q, false, 2);\n    let c = fromBits(0, 0, false);\n    for (let i = 0; i <= (bp - 1); i++) {\n        const rak = op_Addition(op_Addition(c, BigNatModule_coeff64(r, i)), op_Multiply(BigNatModule_coeff64(p, i), q_1));\n        BigNatModule_setCoeff(r, i, ~(~toInt(op_BitwiseAnd(rak, BigNatModule_baseMaski64))));\n        c = op_Division(rak, BigNatModule_baseNi64);\n    }\n    BigNatModule_mulSchoolBookCarry(r, c, bp);\n    return BigNatModule_normN(r);\n}\n\nexport function BigNatModule_mulSchoolBookNeitherSmall(p, q) {\n    const r = BigNatModule_createN(p.bound + q.bound);\n    const ra = r.digits;\n    for (let i = 0; i <= (p.bound - 1); i++) {\n        const pai = fromInteger(p.digits[i], false, 2);\n        let c = fromBits(0, 0, false);\n        let k = i | 0;\n        for (let j = 0; j <= (q.bound - 1); j++) {\n            const qaj = fromInteger(q.digits[j], false, 2);\n            const rak = op_Addition(op_Addition(fromInteger(ra[k], false, 2), c), op_Multiply(pai, qaj));\n            ra[k] = (~(~toInt(op_BitwiseAnd(rak, BigNatModule_baseMaski64))));\n            c = op_Division(rak, BigNatModule_baseNi64);\n            k = (k + 1);\n        }\n        BigNatModule_mulSchoolBookCarry(r, c, k);\n    }\n    return BigNatModule_normN(r);\n}\n\nexport function BigNatModule_mulSchoolBook(p, q) {\n    const pSmall = BigNatModule_bound(p) === 1;\n    const qSmall = BigNatModule_bound(q) === 1;\n    if (pSmall ? qSmall : false) {\n        return BigNatModule_mulSchoolBookBothSmall(BigNatModule_coeff(p, 0), BigNatModule_coeff(q, 0));\n    }\n    else if (pSmall) {\n        return BigNatModule_mulSchoolBookOneSmall(q, BigNatModule_coeff(p, 0));\n    }\n    else if (qSmall) {\n        return BigNatModule_mulSchoolBookOneSmall(p, BigNatModule_coeff(q, 0));\n    }\n    else {\n        return BigNatModule_mulSchoolBookNeitherSmall(p, q);\n    }\n}\n\nexport class BigNatModule_encoding extends Record {\n    constructor(bigL, twoToBigL, k, bigK, bigN, split, splits) {\n        super();\n        this.bigL = (bigL | 0);\n        this.twoToBigL = (twoToBigL | 0);\n        this.k = (k | 0);\n        this.bigK = (bigK | 0);\n        this.bigN = (bigN | 0);\n        this.split = (split | 0);\n        this.splits = splits;\n    }\n}\n\nexport function BigNatModule_encoding$reflection() {\n    return record_type(\"BigInt.BigNatModule.encoding\", [], BigNatModule_encoding, () => [[\"bigL\", int32_type], [\"twoToBigL\", int32_type], [\"k\", int32_type], [\"bigK\", int32_type], [\"bigN\", int32_type], [\"split\", int32_type], [\"splits\", array_type(int32_type)]]);\n}\n\nexport function BigNatModule_mkEncoding(bigL, k, bigK, bigN) {\n    return new BigNatModule_encoding(bigL, BigNatModule_pow32(2, bigL), k, bigK, bigN, ~(~(BigNatModule_baseBits / bigL)), initialize(~(~(BigNatModule_baseBits / bigL)), (i) => BigNatModule_pow32(2, bigL * i), Int32Array));\n}\n\nexport const BigNatModule_table = [BigNatModule_mkEncoding(1, 28, 268435456, 268435456), BigNatModule_mkEncoding(2, 26, 67108864, 134217728), BigNatModule_mkEncoding(3, 24, 16777216, 50331648), BigNatModule_mkEncoding(4, 22, 4194304, 16777216), BigNatModule_mkEncoding(5, 20, 1048576, 5242880), BigNatModule_mkEncoding(6, 18, 262144, 1572864), BigNatModule_mkEncoding(7, 16, 65536, 458752), BigNatModule_mkEncoding(8, 14, 16384, 131072), BigNatModule_mkEncoding(9, 12, 4096, 36864), BigNatModule_mkEncoding(10, 10, 1024, 10240), BigNatModule_mkEncoding(11, 8, 256, 2816), BigNatModule_mkEncoding(12, 6, 64, 768), BigNatModule_mkEncoding(13, 4, 16, 208)];\n\nexport function BigNatModule_calculateTableTow(bigL) {\n    const k = (BigNatModule_FFT_maxBitsInsideFp - (2 * bigL)) | 0;\n    const bigK = BigNatModule_pow64(fromBits(2, 0, false), k);\n    return [bigL, k, bigK, op_Multiply(bigK, fromInteger(bigL, false, 2))];\n}\n\nexport function BigNatModule_encodingGivenResultBits(bitsRes) {\n    const selectFrom = (i_mut) => {\n        selectFrom:\n        while (true) {\n            const i = i_mut;\n            if (((i + 1) < BigNatModule_table.length) ? (bitsRes < BigNatModule_table[i + 1].bigN) : false) {\n                i_mut = (i + 1);\n                continue selectFrom;\n            }\n            else {\n                return BigNatModule_table[i];\n            }\n            break;\n        }\n    };\n    if (bitsRes >= BigNatModule_table[0].bigN) {\n        throw (new Error(\"Product is huge, around 268435456 bits, beyond quickmul\"));\n    }\n    else {\n        return selectFrom(0);\n    }\n}\n\nexport const BigNatModule_bitmask = initialize(BigNatModule_baseBits, (i) => (BigNatModule_pow32(2, i) - 1), Int32Array);\n\nexport const BigNatModule_twopowers = initialize(BigNatModule_baseBits, (i) => BigNatModule_pow32(2, i), Int32Array);\n\nexport const BigNatModule_twopowersI64 = initialize(BigNatModule_baseBits, (i) => BigNatModule_pow64(fromBits(2, 0, false), i));\n\nexport function BigNatModule_wordBits(word) {\n    const hi = (k_mut) => {\n        hi:\n        while (true) {\n            const k = k_mut;\n            if (k === 0) {\n                return 0;\n            }\n            else if ((word & BigNatModule_twopowers[k - 1]) !== 0) {\n                return k | 0;\n            }\n            else {\n                k_mut = (k - 1);\n                continue hi;\n            }\n            break;\n        }\n    };\n    return hi(BigNatModule_baseBits) | 0;\n}\n\nexport function BigNatModule_bits(u) {\n    if (u.bound === 0) {\n        return 0;\n    }\n    else {\n        return ((BigNatModule_degree(u) * BigNatModule_baseBits) + BigNatModule_wordBits(u.digits[BigNatModule_degree(u)])) | 0;\n    }\n}\n\nexport function BigNatModule_extractBits(n, enc, bi) {\n    let z, i, z_1, i_1, z_2, i_2;\n    const biw = (~(~(bi / BigNatModule_baseBits))) | 0;\n    const bjw = (~(~(((bi + enc.bigL) - 1) / BigNatModule_baseBits))) | 0;\n    if (biw !== bjw) {\n        const xbit = (bi % BigNatModule_baseBits) | 0;\n        return ((((z = n, (i = (biw | 0), (i < z.bound) ? z.digits[i] : 0)) >> xbit) | ((z_1 = n, (i_1 = (bjw | 0), (i_1 < z_1.bound) ? z_1.digits[i_1] : 0)) << (BigNatModule_baseBits - xbit))) & BigNatModule_bitmask[enc.bigL]) | 0;\n    }\n    else {\n        return (((z_2 = n, (i_2 = (biw | 0), (i_2 < z_2.bound) ? z_2.digits[i_2] : 0)) >> (bi % BigNatModule_baseBits)) & BigNatModule_bitmask[enc.bigL]) | 0;\n    }\n}\n\nexport function BigNatModule_encodePoly(enc, n) {\n    const poly = fill(new Uint32Array(enc.bigK), 0, enc.bigK, BigNatModule_FFT_Fp_ofInt32(0));\n    const biMax = (n.bound * BigNatModule_baseBits) | 0;\n    const encoder = (i_mut, bi_mut) => {\n        encoder:\n        while (true) {\n            const i = i_mut, bi = bi_mut;\n            if ((i === enc.bigK) ? true : (bi > biMax)) {\n            }\n            else {\n                const pi = BigNatModule_extractBits(n, enc, bi) | 0;\n                poly[i] = BigNatModule_FFT_Fp_ofInt32(pi);\n                i_mut = (i + 1);\n                bi_mut = (bi + enc.bigL);\n                continue encoder;\n            }\n            break;\n        }\n    };\n    encoder(0, 0);\n    return poly;\n}\n\nexport function BigNatModule_decodeResultBits(enc, poly) {\n    let n = 0;\n    for (let i = 0; i <= (poly.length - 1); i++) {\n        if (poly[i] !== BigNatModule_FFT_mzero) {\n            n = i;\n        }\n    }\n    return (((BigNatModule_FFT_maxBitsInsideFp + (enc.bigL * n)) + 1) + 1) | 0;\n}\n\nexport function BigNatModule_decodePoly(enc, poly) {\n    const rbound = ((~(~(BigNatModule_decodeResultBits(enc, poly) / BigNatModule_baseBits))) + 1) | 0;\n    const r = BigNatModule_createN(rbound);\n    const evaluate = (i_mut, j_mut, d_mut) => {\n        evaluate:\n        while (true) {\n            const i = i_mut, j = j_mut, d = d_mut;\n            if (i === enc.bigK) {\n            }\n            else {\n                if (j >= rbound) {\n                }\n                else {\n                    BigNatModule_contributeArr(r.digits, j, op_Multiply(fromInteger(BigNatModule_FFT_Fp_toInt(poly[i]), false, 2), BigNatModule_twopowersI64[d]));\n                }\n                const d_1 = (d + enc.bigL) | 0;\n                const patternInput = (d_1 >= BigNatModule_baseBits) ? [j + 1, d_1 - BigNatModule_baseBits] : [j, d_1];\n                i_mut = (i + 1);\n                j_mut = patternInput[0];\n                d_mut = patternInput[1];\n                continue evaluate;\n            }\n            break;\n        }\n    };\n    evaluate(0, 0, 0);\n    return BigNatModule_normN(r);\n}\n\nexport function BigNatModule_quickMulUsingFft(u, v) {\n    const enc = BigNatModule_encodingGivenResultBits(BigNatModule_bits(u) + BigNatModule_bits(v));\n    return BigNatModule_normN(BigNatModule_decodePoly(enc, BigNatModule_FFT_computeFftPaddedPolynomialProduct(enc.bigK, enc.k, BigNatModule_encodePoly(enc, u), BigNatModule_encodePoly(enc, v))));\n}\n\nexport const BigNatModule_minDigitsKaratsuba = 16;\n\nexport function BigNatModule_recMulKaratsuba(mul, p, q) {\n    const bmax = BigNatModule_maxInt(p.bound, q.bound) | 0;\n    if (bmax > BigNatModule_minDigitsKaratsuba) {\n        const k = (~(~(bmax / 2))) | 0;\n        const a0 = BigNatModule_restrictTo(k, p);\n        const a1 = BigNatModule_shiftDown(k, p);\n        const b0 = BigNatModule_restrictTo(k, q);\n        const b1 = BigNatModule_shiftDown(k, q);\n        const q0 = mul(a0, b0);\n        const q1 = mul(BigNatModule_add(a0, a1), BigNatModule_add(b0, b1));\n        const q2 = mul(a1, b1);\n        return BigNatModule_add(q0, BigNatModule_shiftUp(k, BigNatModule_add(BigNatModule_sub(q1, BigNatModule_add(q0, q2)), BigNatModule_shiftUp(k, q2))));\n    }\n    else {\n        return BigNatModule_mulSchoolBook(p, q);\n    }\n}\n\nexport function BigNatModule_mulKaratsuba(x, y) {\n    return BigNatModule_recMulKaratsuba((x_1, y_1) => BigNatModule_mulKaratsuba(x_1, y_1), x, y);\n}\n\nexport const BigNatModule_productDigitsUpperSchoolBook = ~(~(64000 / BigNatModule_baseBits));\n\nexport const BigNatModule_singleDigitForceSchoolBook = ~(~(32000 / BigNatModule_baseBits));\n\nexport const BigNatModule_productDigitsUpperFft = ~(~(BigNatModule_table[0].bigN / BigNatModule_baseBits));\n\nexport function BigNatModule_mul(p, q) {\n    return BigNatModule_mulSchoolBook(p, q);\n}\n\nexport function BigNatModule_scaleSubInPlace(x, f, a, n) {\n    const patternInput = [x.digits, BigNatModule_degree(x)];\n    const x_1 = patternInput[0];\n    const patternInput_1 = [a.digits, BigNatModule_degree(a)];\n    const ad = patternInput_1[1] | 0;\n    const a_1 = patternInput_1[0];\n    const f_1 = fromInteger(f, false, 2);\n    let j = 0;\n    let z = op_Multiply(f_1, fromInteger(a_1[0], false, 2));\n    while ((compare(z, fromBits(0, 0, false)) > 0) ? true : (j < ad)) {\n        if (j > patternInput[1]) {\n            throw (new Error(\"scaleSubInPlace: pre-condition did not apply, result would be -ve\"));\n        }\n        let zLo = (~(~toInt(op_BitwiseAnd(z, BigNatModule_baseMaski64)))) | 0;\n        let zHi = op_Division(z, BigNatModule_baseNi64);\n        if (zLo <= x_1[j + n]) {\n            x_1[j + n] = (x_1[j + n] - zLo);\n        }\n        else {\n            x_1[j + n] = (x_1[j + n] + (BigNatModule_baseN - zLo));\n            zHi = op_Addition(zHi, fromBits(1, 0, false));\n        }\n        if (j < ad) {\n            z = op_Addition(zHi, op_Multiply(f_1, fromInteger(a_1[j + 1], false, 2)));\n        }\n        else {\n            z = zHi;\n        }\n        j = (j + 1);\n    }\n    void BigNatModule_normN(x);\n}\n\nexport function BigNatModule_scaleSub(x, f, a, n) {\n    const freshx = BigNatModule_add(x, BigNatModule_zero);\n    BigNatModule_scaleSubInPlace(freshx, f, a, n);\n    return BigNatModule_normN(freshx);\n}\n\nexport function BigNatModule_scaleAddInPlace(x, f, a, n) {\n    const patternInput = [x.digits, BigNatModule_degree(x)];\n    const x_1 = patternInput[0];\n    const patternInput_1 = [a.digits, BigNatModule_degree(a)];\n    const ad = patternInput_1[1] | 0;\n    const a_1 = patternInput_1[0];\n    const f_1 = fromInteger(f, false, 2);\n    let j = 0;\n    let z = op_Multiply(f_1, fromInteger(a_1[0], false, 2));\n    while ((compare(z, fromBits(0, 0, false)) > 0) ? true : (j < ad)) {\n        if (j > patternInput[1]) {\n            throw (new Error(\"scaleSubInPlace: pre-condition did not apply, result would be -ve\"));\n        }\n        let zLo = (~(~toInt(op_BitwiseAnd(z, BigNatModule_baseMaski64)))) | 0;\n        let zHi = op_Division(z, BigNatModule_baseNi64);\n        if (zLo < (BigNatModule_baseN - x_1[j + n])) {\n            x_1[j + n] = (x_1[j + n] + zLo);\n        }\n        else {\n            x_1[j + n] = (zLo - (BigNatModule_baseN - x_1[j + n]));\n            zHi = op_Addition(zHi, fromBits(1, 0, false));\n        }\n        if (j < ad) {\n            z = op_Addition(zHi, op_Multiply(f_1, fromInteger(a_1[j + 1], false, 2)));\n        }\n        else {\n            z = zHi;\n        }\n        j = (j + 1);\n    }\n    void BigNatModule_normN(x);\n}\n\nexport function BigNatModule_scaleAdd(x, f, a, n) {\n    const freshx = BigNatModule_add(x, BigNatModule_zero);\n    BigNatModule_scaleAddInPlace(freshx, f, a, n);\n    return BigNatModule_normN(freshx);\n}\n\nexport function BigNatModule_removeFactor(x, a, n) {\n    const patternInput = [BigNatModule_degree(a), BigNatModule_degree(x)];\n    const degx = patternInput[1] | 0;\n    const dega = patternInput[0] | 0;\n    if (degx < (dega + n)) {\n        return 0;\n    }\n    else {\n        const patternInput_1 = [a.digits, x.digits];\n        const xa = patternInput_1[1];\n        const aa = patternInput_1[0];\n        const f = ((dega === 0) ? ((degx === n) ? (~(~(xa[n] / aa[0]))) : (~(~toInt(op_Division(op_Addition(op_Multiply(fromInteger(xa[degx], false, 2), BigNatModule_baseNi64), fromInteger(xa[degx - 1], false, 2)), fromInteger(aa[0], false, 2)))))) : ((degx === (dega + n)) ? (~(~(xa[degx] / (aa[dega] + 1)))) : (~(~toInt(op_Division(op_Addition(op_Multiply(fromInteger(xa[degx], false, 2), BigNatModule_baseNi64), fromInteger(xa[degx - 1], false, 2)), op_Addition(fromInteger(aa[dega], false, 2), fromBits(1, 0, false)))))))) | 0;\n        if (f === 0) {\n            if (BigNatModule_shiftCompare(a, n, x, 0) !== 1) {\n                return 1;\n            }\n            else {\n                return 0;\n            }\n        }\n        else {\n            return f | 0;\n        }\n    }\n}\n\nexport function BigNatModule_divmod(b, a) {\n    if (BigNatModule_isZero(a)) {\n        throw (new Error());\n    }\n    else if (BigNatModule_degree(b) < BigNatModule_degree(a)) {\n        return [BigNatModule_zero, b];\n    }\n    else {\n        const x = BigNatModule_copyN(b);\n        const d = BigNatModule_createN(((BigNatModule_degree(b) - BigNatModule_degree(a)) + 1) + 1);\n        let p = BigNatModule_degree(b) | 0;\n        const m = BigNatModule_degree(a) | 0;\n        let n = (p - m) | 0;\n        const Invariant = (tupledArg) => {\n        };\n        let finished = false;\n        while (!finished) {\n            Invariant([d, x, n, p]);\n            const f = BigNatModule_removeFactor(x, a, n) | 0;\n            if (f > 0) {\n                BigNatModule_scaleSubInPlace(x, f, a, n);\n                BigNatModule_scaleAddInPlace(d, f, BigNatModule_one, n);\n                Invariant([d, x, n, p]);\n            }\n            else {\n                finished = ((f === 0) ? (n === 0) : false);\n                if (!finished) {\n                    if (p === (m + n)) {\n                        Invariant([d, x, n - 1, p]);\n                        n = (n - 1);\n                    }\n                    else {\n                        Invariant([d, x, n - 1, p - 1]);\n                        n = (n - 1);\n                        p = (p - 1);\n                    }\n                }\n            }\n        }\n        return [BigNatModule_normN(d), BigNatModule_normN(x)];\n    }\n}\n\nexport function BigNatModule_div(b, a) {\n    return BigNatModule_divmod(b, a)[0];\n}\n\nexport function BigNatModule_rem(b, a) {\n    return BigNatModule_divmod(b, a)[1];\n}\n\nexport function BigNatModule_bitAnd(a, b) {\n    const r = BigNatModule_createN(BigNatModule_minInt(a.bound, b.bound));\n    for (let i = 0; i <= (r.bound - 1); i++) {\n        r.digits[i] = (a.digits[i] & b.digits[i]);\n    }\n    return BigNatModule_normN(r);\n}\n\nexport function BigNatModule_bitOr(a, b) {\n    const r = BigNatModule_createN(BigNatModule_maxInt(a.bound, b.bound));\n    for (let i = 0; i <= (a.bound - 1); i++) {\n        r.digits[i] = (r.digits[i] | a.digits[i]);\n    }\n    for (let i_1 = 0; i_1 <= (b.bound - 1); i_1++) {\n        r.digits[i_1] = (r.digits[i_1] | b.digits[i_1]);\n    }\n    return BigNatModule_normN(r);\n}\n\nexport function BigNatModule_bitXor(a, b) {\n    const r = BigNatModule_createN(BigNatModule_maxInt(a.bound, b.bound));\n    for (let i = 0; i <= (a.bound - 1); i++) {\n        r.digits[i] = (r.digits[i] ^ a.digits[i]);\n    }\n    for (let i_1 = 0; i_1 <= (b.bound - 1); i_1++) {\n        r.digits[i_1] = (r.digits[i_1] ^ b.digits[i_1]);\n    }\n    return BigNatModule_normN(r);\n}\n\nexport function BigNatModule_hcf(a, b) {\n    const hcfloop = (a_1_mut, b_1_mut) => {\n        hcfloop:\n        while (true) {\n            const a_1 = a_1_mut, b_1 = b_1_mut;\n            if (BigNatModule_equal(BigNatModule_zero, a_1)) {\n                return b_1;\n            }\n            else {\n                a_1_mut = BigNatModule_divmod(b_1, a_1)[1];\n                b_1_mut = a_1;\n                continue hcfloop;\n            }\n            break;\n        }\n    };\n    if (BigNatModule_lt(a, b)) {\n        return hcfloop(a, b);\n    }\n    else {\n        return hcfloop(b, a);\n    }\n}\n\nexport const BigNatModule_two = BigNatModule_embed(2);\n\nexport function BigNatModule_powi(x, n) {\n    const power = (acc_mut, x_1_mut, n_1_mut) => {\n        power:\n        while (true) {\n            const acc = acc_mut, x_1 = x_1_mut, n_1 = n_1_mut;\n            if (n_1 === 0) {\n                return acc;\n            }\n            else if ((n_1 % 2) === 0) {\n                acc_mut = acc;\n                x_1_mut = BigNatModule_mul(x_1, x_1);\n                n_1_mut = (~(~(n_1 / 2)));\n                continue power;\n            }\n            else {\n                acc_mut = BigNatModule_mul(x_1, acc);\n                x_1_mut = BigNatModule_mul(x_1, x_1);\n                n_1_mut = (~(~(n_1 / 2)));\n                continue power;\n            }\n            break;\n        }\n    };\n    return power(BigNatModule_one, x, n);\n}\n\nexport function BigNatModule_pow(x, n) {\n    const power = (acc_mut, x_1_mut, n_1_mut) => {\n        power:\n        while (true) {\n            const acc = acc_mut, x_1 = x_1_mut, n_1 = n_1_mut;\n            if (BigNatModule_isZero(n_1)) {\n                return acc;\n            }\n            else {\n                const patternInput = BigNatModule_divmod(n_1, BigNatModule_two);\n                const ndiv2 = patternInput[0];\n                if (BigNatModule_isZero(patternInput[1])) {\n                    acc_mut = acc;\n                    x_1_mut = BigNatModule_mul(x_1, x_1);\n                    n_1_mut = ndiv2;\n                    continue power;\n                }\n                else {\n                    acc_mut = BigNatModule_mul(x_1, acc);\n                    x_1_mut = BigNatModule_mul(x_1, x_1);\n                    n_1_mut = ndiv2;\n                    continue power;\n                }\n            }\n            break;\n        }\n    };\n    return power(BigNatModule_one, x, n);\n}\n\nexport function BigNatModule_toFloat(n) {\n    const evalFloat = (acc_mut, k_mut, i_mut) => {\n        evalFloat:\n        while (true) {\n            const acc = acc_mut, k = k_mut, i = i_mut;\n            if (i === n.bound) {\n                return acc;\n            }\n            else {\n                acc_mut = (acc + (k * n.digits[i]));\n                k_mut = (k * BigNatModule_baseN);\n                i_mut = (i + 1);\n                continue evalFloat;\n            }\n            break;\n        }\n    };\n    return evalFloat(0, 1, 0);\n}\n\nexport function BigNatModule_ofInt32(n) {\n    return BigNatModule_embed(n);\n}\n\nexport function BigNatModule_ofInt64(n) {\n    return BigNatModule_embed64(n);\n}\n\nexport function BigNatModule_toUInt32(n) {\n    const matchValue = n.bound | 0;\n    switch (matchValue) {\n        case 0: {\n            return 0;\n        }\n        case 1: {\n            const value = n.digits[0] | 0;\n            return value >>> 0;\n        }\n        case 2: {\n            const patternInput = [n.digits[0], n.digits[1]];\n            const xB = patternInput[1] | 0;\n            if (xB > BigNatModule_baseMask32B) {\n                throw (new Error());\n            }\n            return ((patternInput[0] & BigNatModule_baseMask32A) >>> 0) + ((((xB & BigNatModule_baseMask32B) >>> 0) << BigNatModule_baseShift32B) >>> 0);\n        }\n        default: {\n            throw (new Error());\n        }\n    }\n}\n\nexport function BigNatModule_toUInt64(n) {\n    const matchValue = n.bound | 0;\n    switch (matchValue) {\n        case 0: {\n            return fromBits(0, 0, true);\n        }\n        case 1: {\n            return fromInteger(n.digits[0], true, 2);\n        }\n        case 2: {\n            const patternInput = [n.digits[0], n.digits[1]];\n            return op_Addition(fromInteger(patternInput[0] & BigNatModule_baseMask64A, true, 2), op_LeftShift(fromInteger(patternInput[1] & BigNatModule_baseMask64B, true, 2), BigNatModule_baseShift64B));\n        }\n        case 3: {\n            const patternInput_1 = [n.digits[0], n.digits[1], n.digits[2]];\n            const xC = patternInput_1[2] | 0;\n            if (xC > BigNatModule_baseMask64C) {\n                throw (new Error());\n            }\n            return op_Addition(op_Addition(fromInteger(patternInput_1[0] & BigNatModule_baseMask64A, true, 2), op_LeftShift(fromInteger(patternInput_1[1] & BigNatModule_baseMask64B, true, 2), BigNatModule_baseShift64B)), op_LeftShift(fromInteger(xC & BigNatModule_baseMask64C, true, 2), BigNatModule_baseShift64C));\n        }\n        default: {\n            throw (new Error());\n        }\n    }\n}\n\nexport function BigNatModule_toString(n) {\n    const degn = BigNatModule_degree(n) | 0;\n    const route = (prior_mut, k_mut, ten2k_mut) => {\n        route:\n        while (true) {\n            const prior = prior_mut, k = k_mut, ten2k = ten2k_mut;\n            if (BigNatModule_degree(ten2k) > degn) {\n                return new List([k, ten2k], prior);\n            }\n            else {\n                prior_mut = (new List([k, ten2k], prior));\n                k_mut = (k + 1);\n                ten2k_mut = BigNatModule_mul(ten2k, ten2k);\n                continue route;\n            }\n            break;\n        }\n    };\n    const collect = (isLeading_mut, digits_mut, n_1_mut, _arg1_mut) => {\n        collect:\n        while (true) {\n            const isLeading = isLeading_mut, digits = digits_mut, n_1 = n_1_mut, _arg1 = _arg1_mut;\n            if (_arg1.tail != null) {\n                const prior_1 = _arg1.tail;\n                const patternInput = BigNatModule_divmod(n_1, _arg1.head[1]);\n                const nL = patternInput[1];\n                const nH = patternInput[0];\n                if (isLeading ? BigNatModule_isZero(nH) : false) {\n                    isLeading_mut = isLeading;\n                    digits_mut = digits;\n                    n_1_mut = nL;\n                    _arg1_mut = prior_1;\n                    continue collect;\n                }\n                else {\n                    isLeading_mut = isLeading;\n                    digits_mut = collect(false, digits, nL, prior_1);\n                    n_1_mut = nH;\n                    _arg1_mut = prior_1;\n                    continue collect;\n                }\n            }\n            else {\n                const n_2 = BigNatModule_eval32(n_1) | 0;\n                if (isLeading ? (n_2 === 0) : false) {\n                    return digits;\n                }\n                else {\n                    return new List(int32ToString(n_2), digits);\n                }\n            }\n            break;\n        }\n    };\n    const digits_4 = collect(true, new List(), n, route(new List(), 0, BigNatModule_embed(10)));\n    if (digits_4.tail == null) {\n        return \"0\";\n    }\n    else {\n        return join(\"\", Array.from(digits_4));\n    }\n}\n\nexport function BigNatModule_ofString(str) {\n    const len = str.length | 0;\n    if (isNullOrEmpty(str)) {\n        throw (new Error(\"empty string\\\\nParameter name: str\"));\n    }\n    const ten = BigNatModule_embed(10);\n    const build = (acc_mut, i_mut) => {\n        build:\n        while (true) {\n            const acc = acc_mut, i = i_mut;\n            if (i === len) {\n                return acc;\n            }\n            else {\n                const d = (str[i].charCodeAt(0) - \"0\".charCodeAt(0)) | 0;\n                if ((0 <= d) ? (d <= 9) : false) {\n                    acc_mut = BigNatModule_add(BigNatModule_mul(ten, acc), BigNatModule_embed(d));\n                    i_mut = (i + 1);\n                    continue build;\n                }\n                else {\n                    throw (new Error());\n                }\n            }\n            break;\n        }\n    };\n    return build(BigNatModule_embed(0), 0);\n}\n\nexport function BigNatModule_isSmall(n) {\n    return n.bound <= 1;\n}\n\nexport function BigNatModule_getSmall(n) {\n    const z = n;\n    const i = 0;\n    if (i < z.bound) {\n        return z.digits[i] | 0;\n    }\n    else {\n        return 0;\n    }\n}\n\nexport function BigNatModule_factorial(n) {\n    const productR = (a, b) => {\n        if (BigNatModule_equal(a, b)) {\n            return a;\n        }\n        else {\n            const m = BigNatModule_div(BigNatModule_add(a, b), BigNatModule_ofInt32(2));\n            return BigNatModule_mul(productR(a, m), productR(BigNatModule_add(m, BigNatModule_one), b));\n        }\n    };\n    return productR(BigNatModule_one, n);\n}\n\n","import { BigNatModule_factorial, BigNatModule_ofString, BigNatModule_toFloat, BigNatModule_toUInt64, BigNatModule_toUInt32, BigNatModule_pow, BigNatModule_two, BigNatModule_rem, BigNatModule_lte, BigNatModule_hcf, BigNatModule_bitXor, BigNatModule_bitOr, BigNatModule_bitAnd, BigNatModule_divmod, BigNatModule_mul, BigNatModule_isOne, BigNatModule_sub, BigNatModule_gte, BigNatModule_scale, BigNatModule_one, BigNatModule_add, BigNatModule_ofInt64, BigNatModule_hash, BigNatModule_gt, BigNatModule_lt, BigNatModule_equal, BigNatModule_getSmall, BigNatModule_isSmall, BigNatModule_ofInt32, BigNatModule_toString, BigNatModule_isZero } from \"./n.js\";\nimport { toString, Record } from \"../Types.js\";\nimport { class_type } from \"../Reflection.js\";\nimport { initialize } from \"../Array.js\";\nimport { op_Addition, op_Multiply, fromValue, equals, fromBits, compare, fromInteger, op_UnaryNegation } from \"../Long.js\";\nimport { op_UnaryNegation_Int32 } from \"../Int32.js\";\nimport Decimal from \"../Decimal.js\";\n\nexport class BigInteger extends Record {\n    constructor(signInt, v) {\n        super();\n        this.signInt = signInt;\n        this.v = v;\n    }\n    toString() {\n        const x = this;\n        const matchValue = BigInteger__get_SignInt(x) | 0;\n        switch (matchValue) {\n            case -1: {\n                return BigNatModule_isZero(BigInteger__get_V(x)) ? \"0\" : (\"-\" + BigNatModule_toString(BigInteger__get_V(x)));\n            }\n            case 0: {\n                return \"0\";\n            }\n            case 1: {\n                return BigNatModule_toString(BigInteger__get_V(x));\n            }\n            default: {\n                throw (new Error(\"signs should be +/- 1 or 0\"));\n            }\n        }\n    }\n    Equals(obj) {\n        const this$ = this;\n        return (obj instanceof BigInteger) ? BigInteger_op_Equality_56F059C0(this$, obj) : false;\n    }\n    GetHashCode() {\n        const x = this;\n        return BigInteger_hash_Z665282C2(x) | 0;\n    }\n    CompareTo(obj) {\n        const this$ = this;\n        if (obj instanceof BigInteger) {\n            return BigInteger_compare_56F059C0(this$, obj) | 0;\n        }\n        else {\n            throw (new Error(\"the objects are not comparable\\\\nParameter name: obj\"));\n        }\n    }\n}\n\nexport function BigInteger$reflection() {\n    return class_type(\"BigInt.BigInteger\", void 0, BigInteger, class_type(\"System.ValueType\"));\n}\n\nexport function BigInteger_$ctor_Z2BE94A1(signInt, v) {\n    return new BigInteger(signInt, v);\n}\n\n(() => {\n    BigInteger.smallLim = 4096;\n    BigInteger.smallPosTab = initialize(BigInteger.smallLim, (n) => BigNatModule_ofInt32(n));\n    BigInteger.one = BigInteger_$ctor_Z524259A4(1);\n    BigInteger.two = BigInteger_$ctor_Z524259A4(2);\n    BigInteger.zero = BigInteger_$ctor_Z524259A4(0);\n})();\n\nexport function BigInteger_nat_Z67CCE57D(n) {\n    if (BigNatModule_isSmall(n) ? (BigNatModule_getSmall(n) < BigInteger.smallLim) : false) {\n        return BigInteger.smallPosTab[BigNatModule_getSmall(n)];\n    }\n    else {\n        return n;\n    }\n}\n\nexport function BigInteger_create_Z2BE94A1(s, n) {\n    return BigInteger_$ctor_Z2BE94A1(s, BigInteger_nat_Z67CCE57D(n));\n}\n\nexport function BigInteger_posn_Z67CCE57D(n) {\n    return BigInteger_$ctor_Z2BE94A1(1, BigInteger_nat_Z67CCE57D(n));\n}\n\nexport function BigInteger_negn_Z67CCE57D(n) {\n    return BigInteger_$ctor_Z2BE94A1(-1, BigInteger_nat_Z67CCE57D(n));\n}\n\nexport function BigInteger__get_Sign(x) {\n    if (BigInteger__get_IsZero(x)) {\n        return 0;\n    }\n    else {\n        return x.signInt | 0;\n    }\n}\n\nexport function BigInteger__get_SignInt(x) {\n    return x.signInt;\n}\n\nexport function BigInteger__get_V(x) {\n    return x.v;\n}\n\nexport function BigInteger_op_Equality_56F059C0(x, y) {\n    const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\n    let pattern_matching_result;\n    if (matchValue[0] === -1) {\n        if (matchValue[1] === -1) {\n            pattern_matching_result = 1;\n        }\n        else if (matchValue[1] === 0) {\n            pattern_matching_result = 8;\n        }\n        else if (matchValue[1] === 1) {\n            pattern_matching_result = 3;\n        }\n        else {\n            pattern_matching_result = 9;\n        }\n    }\n    else if (matchValue[0] === 0) {\n        if (matchValue[1] === -1) {\n            pattern_matching_result = 6;\n        }\n        else if (matchValue[1] === 0) {\n            pattern_matching_result = 4;\n        }\n        else if (matchValue[1] === 1) {\n            pattern_matching_result = 5;\n        }\n        else {\n            pattern_matching_result = 9;\n        }\n    }\n    else if (matchValue[0] === 1) {\n        if (matchValue[1] === -1) {\n            pattern_matching_result = 2;\n        }\n        else if (matchValue[1] === 0) {\n            pattern_matching_result = 7;\n        }\n        else if (matchValue[1] === 1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 9;\n        }\n    }\n    else {\n        pattern_matching_result = 9;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return BigNatModule_equal(BigInteger__get_V(x), BigInteger__get_V(y));\n        }\n        case 1: {\n            return BigNatModule_equal(BigInteger__get_V(x), BigInteger__get_V(y));\n        }\n        case 2: {\n            if (BigNatModule_isZero(BigInteger__get_V(x))) {\n                return BigNatModule_isZero(BigInteger__get_V(y));\n            }\n            else {\n                return false;\n            }\n        }\n        case 3: {\n            if (BigNatModule_isZero(BigInteger__get_V(x))) {\n                return BigNatModule_isZero(BigInteger__get_V(y));\n            }\n            else {\n                return false;\n            }\n        }\n        case 4: {\n            return true;\n        }\n        case 5: {\n            return BigNatModule_isZero(BigInteger__get_V(y));\n        }\n        case 6: {\n            return BigNatModule_isZero(BigInteger__get_V(y));\n        }\n        case 7: {\n            return BigNatModule_isZero(BigInteger__get_V(x));\n        }\n        case 8: {\n            return BigNatModule_isZero(BigInteger__get_V(x));\n        }\n        case 9: {\n            throw (new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\"));\n        }\n    }\n}\n\nexport function BigInteger_op_Inequality_56F059C0(x, y) {\n    return !BigInteger_op_Equality_56F059C0(x, y);\n}\n\nexport function BigInteger_op_LessThan_56F059C0(x, y) {\n    const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\n    let pattern_matching_result;\n    if (matchValue[0] === -1) {\n        if (matchValue[1] === -1) {\n            pattern_matching_result = 1;\n        }\n        else if (matchValue[1] === 0) {\n            pattern_matching_result = 8;\n        }\n        else if (matchValue[1] === 1) {\n            pattern_matching_result = 3;\n        }\n        else {\n            pattern_matching_result = 9;\n        }\n    }\n    else if (matchValue[0] === 0) {\n        if (matchValue[1] === -1) {\n            pattern_matching_result = 6;\n        }\n        else if (matchValue[1] === 0) {\n            pattern_matching_result = 4;\n        }\n        else if (matchValue[1] === 1) {\n            pattern_matching_result = 5;\n        }\n        else {\n            pattern_matching_result = 9;\n        }\n    }\n    else if (matchValue[0] === 1) {\n        if (matchValue[1] === -1) {\n            pattern_matching_result = 2;\n        }\n        else if (matchValue[1] === 0) {\n            pattern_matching_result = 7;\n        }\n        else if (matchValue[1] === 1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 9;\n        }\n    }\n    else {\n        pattern_matching_result = 9;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return BigNatModule_lt(BigInteger__get_V(x), BigInteger__get_V(y));\n        }\n        case 1: {\n            return BigNatModule_lt(BigInteger__get_V(y), BigInteger__get_V(x));\n        }\n        case 2: {\n            return false;\n        }\n        case 3: {\n            if (!BigNatModule_isZero(BigInteger__get_V(x))) {\n                return true;\n            }\n            else {\n                return !BigNatModule_isZero(BigInteger__get_V(y));\n            }\n        }\n        case 4: {\n            return false;\n        }\n        case 5: {\n            return !BigNatModule_isZero(BigInteger__get_V(y));\n        }\n        case 6: {\n            return false;\n        }\n        case 7: {\n            return false;\n        }\n        case 8: {\n            return !BigNatModule_isZero(BigInteger__get_V(x));\n        }\n        case 9: {\n            throw (new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\"));\n        }\n    }\n}\n\nexport function BigInteger_op_GreaterThan_56F059C0(x, y) {\n    const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\n    let pattern_matching_result;\n    if (matchValue[0] === -1) {\n        if (matchValue[1] === -1) {\n            pattern_matching_result = 1;\n        }\n        else if (matchValue[1] === 0) {\n            pattern_matching_result = 8;\n        }\n        else if (matchValue[1] === 1) {\n            pattern_matching_result = 3;\n        }\n        else {\n            pattern_matching_result = 9;\n        }\n    }\n    else if (matchValue[0] === 0) {\n        if (matchValue[1] === -1) {\n            pattern_matching_result = 6;\n        }\n        else if (matchValue[1] === 0) {\n            pattern_matching_result = 4;\n        }\n        else if (matchValue[1] === 1) {\n            pattern_matching_result = 5;\n        }\n        else {\n            pattern_matching_result = 9;\n        }\n    }\n    else if (matchValue[0] === 1) {\n        if (matchValue[1] === -1) {\n            pattern_matching_result = 2;\n        }\n        else if (matchValue[1] === 0) {\n            pattern_matching_result = 7;\n        }\n        else if (matchValue[1] === 1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 9;\n        }\n    }\n    else {\n        pattern_matching_result = 9;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return BigNatModule_gt(BigInteger__get_V(x), BigInteger__get_V(y));\n        }\n        case 1: {\n            return BigNatModule_gt(BigInteger__get_V(y), BigInteger__get_V(x));\n        }\n        case 2: {\n            if (!BigNatModule_isZero(BigInteger__get_V(x))) {\n                return true;\n            }\n            else {\n                return !BigNatModule_isZero(BigInteger__get_V(y));\n            }\n        }\n        case 3: {\n            return false;\n        }\n        case 4: {\n            return false;\n        }\n        case 5: {\n            return false;\n        }\n        case 6: {\n            return !BigNatModule_isZero(BigInteger__get_V(y));\n        }\n        case 7: {\n            return !BigNatModule_isZero(BigInteger__get_V(x));\n        }\n        case 8: {\n            return false;\n        }\n        case 9: {\n            throw (new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\"));\n        }\n    }\n}\n\nexport function BigInteger_compare_56F059C0(n, nn) {\n    if (BigInteger_op_LessThan_56F059C0(n, nn)) {\n        return -1;\n    }\n    else if (BigInteger_op_Equality_56F059C0(n, nn)) {\n        return 0;\n    }\n    else {\n        return 1;\n    }\n}\n\nexport function BigInteger_hash_Z665282C2(z) {\n    if (BigInteger__get_SignInt(z) === 0) {\n        return 1;\n    }\n    else {\n        return (BigInteger__get_SignInt(z) + BigNatModule_hash(BigInteger__get_V(z))) | 0;\n    }\n}\n\nexport function BigInteger__get_StructuredDisplayString(x) {\n    return toString(x);\n}\n\nexport function BigInteger_$ctor_Z524259A4(n) {\n    if (n >= 0) {\n        return BigInteger_$ctor_Z2BE94A1(1, BigInteger_nat_Z67CCE57D(BigNatModule_ofInt32(n)));\n    }\n    else if (n === -2147483648) {\n        return BigInteger_$ctor_Z2BE94A1(-1, BigInteger_nat_Z67CCE57D(BigNatModule_ofInt64(op_UnaryNegation(fromInteger(n, false, 2)))));\n    }\n    else {\n        return BigInteger_$ctor_Z2BE94A1(-1, BigInteger_nat_Z67CCE57D(BigNatModule_ofInt32(op_UnaryNegation_Int32(n))));\n    }\n}\n\nexport function BigInteger_$ctor_Z524259C1(n) {\n    if (compare(n, fromBits(0, 0, false)) >= 0) {\n        return BigInteger_$ctor_Z2BE94A1(1, BigInteger_nat_Z67CCE57D(BigNatModule_ofInt64(n)));\n    }\n    else if (equals(n, fromBits(0, 2147483648, false))) {\n        return BigInteger_$ctor_Z2BE94A1(-1, BigInteger_nat_Z67CCE57D(BigNatModule_add(BigNatModule_ofInt64(fromBits(4294967295, 2147483647, false)), BigNatModule_one)));\n    }\n    else {\n        return BigInteger_$ctor_Z2BE94A1(-1, BigInteger_nat_Z67CCE57D(BigNatModule_ofInt64(op_UnaryNegation(n))));\n    }\n}\n\nexport function BigInteger_get_One() {\n    return BigInteger.one;\n}\n\nexport function BigInteger_get_Two() {\n    return BigInteger.two;\n}\n\nexport function BigInteger_get_Zero() {\n    return BigInteger.zero;\n}\n\nexport function BigInteger_op_UnaryNegation_Z665282C2(z) {\n    const matchValue = BigInteger__get_SignInt(z) | 0;\n    if (matchValue === 0) {\n        return BigInteger_get_Zero();\n    }\n    else {\n        return BigInteger_create_Z2BE94A1(op_UnaryNegation_Int32(matchValue), BigInteger__get_V(z));\n    }\n}\n\nexport function BigInteger_Scale_Z320F31E(k, z) {\n    if (BigInteger__get_SignInt(z) === 0) {\n        return BigInteger_get_Zero();\n    }\n    else if (k < 0) {\n        return BigInteger_create_Z2BE94A1(op_UnaryNegation_Int32(BigInteger__get_SignInt(z)), BigNatModule_scale(op_UnaryNegation_Int32(k), BigInteger__get_V(z)));\n    }\n    else {\n        return BigInteger_create_Z2BE94A1(BigInteger__get_SignInt(z), BigNatModule_scale(k, BigInteger__get_V(z)));\n    }\n}\n\nexport function BigInteger_subnn_6A57060(nx, ny) {\n    if (BigNatModule_gte(nx, ny)) {\n        return BigInteger_posn_Z67CCE57D(BigNatModule_sub(nx, ny));\n    }\n    else {\n        return BigInteger_negn_Z67CCE57D(BigNatModule_sub(ny, nx));\n    }\n}\n\nexport function BigInteger_addnn_6A57060(nx, ny) {\n    return BigInteger_posn_Z67CCE57D(BigNatModule_add(nx, ny));\n}\n\nexport function BigInteger__get_IsZero(x) {\n    if (BigInteger__get_SignInt(x) === 0) {\n        return true;\n    }\n    else {\n        return BigNatModule_isZero(BigInteger__get_V(x));\n    }\n}\n\nexport function BigInteger__get_IsOne(x) {\n    if (BigInteger__get_SignInt(x) === 1) {\n        return BigNatModule_isOne(BigInteger__get_V(x));\n    }\n    else {\n        return false;\n    }\n}\n\nexport function BigInteger_op_Addition_56F059C0(x, y) {\n    if (BigInteger__get_IsZero(y)) {\n        return x;\n    }\n    else if (BigInteger__get_IsZero(x)) {\n        return y;\n    }\n    else {\n        const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\n        let pattern_matching_result;\n        if (matchValue[0] === -1) {\n            if (matchValue[1] === -1) {\n                pattern_matching_result = 1;\n            }\n            else if (matchValue[1] === 1) {\n                pattern_matching_result = 3;\n            }\n            else {\n                pattern_matching_result = 4;\n            }\n        }\n        else if (matchValue[0] === 1) {\n            if (matchValue[1] === -1) {\n                pattern_matching_result = 2;\n            }\n            else if (matchValue[1] === 1) {\n                pattern_matching_result = 0;\n            }\n            else {\n                pattern_matching_result = 4;\n            }\n        }\n        else {\n            pattern_matching_result = 4;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return BigInteger_addnn_6A57060(BigInteger__get_V(x), BigInteger__get_V(y));\n            }\n            case 1: {\n                return BigInteger_op_UnaryNegation_Z665282C2(BigInteger_addnn_6A57060(BigInteger__get_V(x), BigInteger__get_V(y)));\n            }\n            case 2: {\n                return BigInteger_subnn_6A57060(BigInteger__get_V(x), BigInteger__get_V(y));\n            }\n            case 3: {\n                return BigInteger_subnn_6A57060(BigInteger__get_V(y), BigInteger__get_V(x));\n            }\n            case 4: {\n                throw (new Error(\"signs should be +/- 1\\\\nParameter name: x\"));\n            }\n        }\n    }\n}\n\nexport function BigInteger_op_Subtraction_56F059C0(x, y) {\n    if (BigInteger__get_IsZero(y)) {\n        return x;\n    }\n    else if (BigInteger__get_IsZero(x)) {\n        return BigInteger_op_UnaryNegation_Z665282C2(y);\n    }\n    else {\n        const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\n        let pattern_matching_result;\n        if (matchValue[0] === -1) {\n            if (matchValue[1] === -1) {\n                pattern_matching_result = 1;\n            }\n            else if (matchValue[1] === 1) {\n                pattern_matching_result = 3;\n            }\n            else {\n                pattern_matching_result = 4;\n            }\n        }\n        else if (matchValue[0] === 1) {\n            if (matchValue[1] === -1) {\n                pattern_matching_result = 2;\n            }\n            else if (matchValue[1] === 1) {\n                pattern_matching_result = 0;\n            }\n            else {\n                pattern_matching_result = 4;\n            }\n        }\n        else {\n            pattern_matching_result = 4;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return BigInteger_subnn_6A57060(BigInteger__get_V(x), BigInteger__get_V(y));\n            }\n            case 1: {\n                return BigInteger_subnn_6A57060(BigInteger__get_V(y), BigInteger__get_V(x));\n            }\n            case 2: {\n                return BigInteger_addnn_6A57060(BigInteger__get_V(x), BigInteger__get_V(y));\n            }\n            case 3: {\n                return BigInteger_op_UnaryNegation_Z665282C2(BigInteger_addnn_6A57060(BigInteger__get_V(x), BigInteger__get_V(y)));\n            }\n            case 4: {\n                throw (new Error(\"signs should be +/- 1\\\\nParameter name: x\"));\n            }\n        }\n    }\n}\n\nexport function BigInteger_op_Multiply_56F059C0(x, y) {\n    if (BigInteger__get_IsZero(x)) {\n        return x;\n    }\n    else if (BigInteger__get_IsZero(y)) {\n        return y;\n    }\n    else if (BigInteger__get_IsOne(x)) {\n        return y;\n    }\n    else if (BigInteger__get_IsOne(y)) {\n        return x;\n    }\n    else {\n        const m = BigNatModule_mul(BigInteger__get_V(x), BigInteger__get_V(y));\n        return BigInteger_create_Z2BE94A1(BigInteger__get_SignInt(x) * BigInteger__get_SignInt(y), m);\n    }\n}\n\nexport function BigInteger_DivRem_56F059C0(x, y) {\n    if (BigInteger__get_IsZero(y)) {\n        throw (new Error());\n    }\n    if (BigInteger__get_IsZero(x)) {\n        return [BigInteger_get_Zero(), BigInteger_get_Zero()];\n    }\n    else {\n        const patternInput = BigNatModule_divmod(BigInteger__get_V(x), BigInteger__get_V(y));\n        const r = patternInput[1];\n        const d = patternInput[0];\n        const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\n        let pattern_matching_result;\n        if (matchValue[0] === -1) {\n            if (matchValue[1] === -1) {\n                pattern_matching_result = 1;\n            }\n            else if (matchValue[1] === 1) {\n                pattern_matching_result = 3;\n            }\n            else {\n                pattern_matching_result = 4;\n            }\n        }\n        else if (matchValue[0] === 1) {\n            if (matchValue[1] === -1) {\n                pattern_matching_result = 2;\n            }\n            else if (matchValue[1] === 1) {\n                pattern_matching_result = 0;\n            }\n            else {\n                pattern_matching_result = 4;\n            }\n        }\n        else {\n            pattern_matching_result = 4;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return [BigInteger_posn_Z67CCE57D(d), BigInteger_posn_Z67CCE57D(r)];\n            }\n            case 1: {\n                return [BigInteger_posn_Z67CCE57D(d), BigInteger_negn_Z67CCE57D(r)];\n            }\n            case 2: {\n                return [BigInteger_negn_Z67CCE57D(d), BigInteger_posn_Z67CCE57D(r)];\n            }\n            case 3: {\n                return [BigInteger_negn_Z67CCE57D(d), BigInteger_negn_Z67CCE57D(r)];\n            }\n            case 4: {\n                throw (new Error(\"signs should be +/- 1\\\\nParameter name: x\"));\n            }\n        }\n    }\n}\n\nexport function BigInteger_op_Division_56F059C0(x, y) {\n    return BigInteger_DivRem_56F059C0(x, y)[0];\n}\n\nexport function BigInteger_op_Modulus_56F059C0(x, y) {\n    return BigInteger_DivRem_56F059C0(x, y)[1];\n}\n\nexport function BigInteger_op_RightShift_62E082A2(x, y) {\n    return BigInteger_op_Division_56F059C0(x, BigInteger_Pow_62E082A2(BigInteger_get_Two(), y));\n}\n\nexport function BigInteger_op_LeftShift_62E082A2(x, y) {\n    return BigInteger_op_Multiply_56F059C0(x, BigInteger_Pow_62E082A2(BigInteger_get_Two(), y));\n}\n\nexport function BigInteger_op_BitwiseAnd_56F059C0(x, y) {\n    return BigInteger_posn_Z67CCE57D(BigNatModule_bitAnd(BigInteger__get_V(x), BigInteger__get_V(y)));\n}\n\nexport function BigInteger_op_BitwiseOr_56F059C0(x, y) {\n    return BigInteger_posn_Z67CCE57D(BigNatModule_bitOr(BigInteger__get_V(x), BigInteger__get_V(y)));\n}\n\nexport function BigInteger_op_ExclusiveOr_56F059C0(x, y) {\n    return BigInteger_posn_Z67CCE57D(BigNatModule_bitXor(BigInteger__get_V(x), BigInteger__get_V(y)));\n}\n\nexport function BigInteger_GreatestCommonDivisor_56F059C0(x, y) {\n    const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\n    if (matchValue[0] === 0) {\n        if (matchValue[1] === 0) {\n            return BigInteger_get_Zero();\n        }\n        else {\n            return BigInteger_posn_Z67CCE57D(BigInteger__get_V(y));\n        }\n    }\n    else if (matchValue[1] === 0) {\n        return BigInteger_posn_Z67CCE57D(BigInteger__get_V(x));\n    }\n    else {\n        return BigInteger_posn_Z67CCE57D(BigNatModule_hcf(BigInteger__get_V(x), BigInteger__get_V(y)));\n    }\n}\n\nexport function BigInteger__get_IsNegative(x) {\n    if (BigInteger__get_SignInt(x) === -1) {\n        return !BigInteger__get_IsZero(x);\n    }\n    else {\n        return false;\n    }\n}\n\nexport function BigInteger__get_IsPositive(x) {\n    if (BigInteger__get_SignInt(x) === 1) {\n        return !BigInteger__get_IsZero(x);\n    }\n    else {\n        return false;\n    }\n}\n\nexport function BigInteger_Abs_Z665282C2(x) {\n    if (BigInteger__get_SignInt(x) === -1) {\n        return BigInteger_op_UnaryNegation_Z665282C2(x);\n    }\n    else {\n        return x;\n    }\n}\n\nexport function BigInteger_op_LessThanOrEqual_56F059C0(x, y) {\n    const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\n    let pattern_matching_result;\n    if (matchValue[0] === -1) {\n        if (matchValue[1] === -1) {\n            pattern_matching_result = 1;\n        }\n        else if (matchValue[1] === 0) {\n            pattern_matching_result = 6;\n        }\n        else if (matchValue[1] === 1) {\n            pattern_matching_result = 3;\n        }\n        else {\n            pattern_matching_result = 9;\n        }\n    }\n    else if (matchValue[0] === 0) {\n        if (matchValue[1] === -1) {\n            pattern_matching_result = 8;\n        }\n        else if (matchValue[1] === 0) {\n            pattern_matching_result = 4;\n        }\n        else if (matchValue[1] === 1) {\n            pattern_matching_result = 7;\n        }\n        else {\n            pattern_matching_result = 9;\n        }\n    }\n    else if (matchValue[0] === 1) {\n        if (matchValue[1] === -1) {\n            pattern_matching_result = 2;\n        }\n        else if (matchValue[1] === 0) {\n            pattern_matching_result = 5;\n        }\n        else if (matchValue[1] === 1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 9;\n        }\n    }\n    else {\n        pattern_matching_result = 9;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return BigNatModule_lte(BigInteger__get_V(x), BigInteger__get_V(y));\n        }\n        case 1: {\n            return BigNatModule_lte(BigInteger__get_V(y), BigInteger__get_V(x));\n        }\n        case 2: {\n            if (BigNatModule_isZero(BigInteger__get_V(x))) {\n                return BigNatModule_isZero(BigInteger__get_V(y));\n            }\n            else {\n                return false;\n            }\n        }\n        case 3: {\n            return true;\n        }\n        case 4: {\n            return true;\n        }\n        case 5: {\n            return BigNatModule_isZero(BigInteger__get_V(x));\n        }\n        case 6: {\n            return true;\n        }\n        case 7: {\n            return true;\n        }\n        case 8: {\n            return BigNatModule_isZero(BigInteger__get_V(y));\n        }\n        case 9: {\n            throw (new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\"));\n        }\n    }\n}\n\nexport function BigInteger_op_GreaterThanOrEqual_56F059C0(x, y) {\n    const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\n    let pattern_matching_result;\n    if (matchValue[0] === -1) {\n        if (matchValue[1] === -1) {\n            pattern_matching_result = 1;\n        }\n        else if (matchValue[1] === 0) {\n            pattern_matching_result = 6;\n        }\n        else if (matchValue[1] === 1) {\n            pattern_matching_result = 3;\n        }\n        else {\n            pattern_matching_result = 9;\n        }\n    }\n    else if (matchValue[0] === 0) {\n        if (matchValue[1] === -1) {\n            pattern_matching_result = 8;\n        }\n        else if (matchValue[1] === 0) {\n            pattern_matching_result = 4;\n        }\n        else if (matchValue[1] === 1) {\n            pattern_matching_result = 7;\n        }\n        else {\n            pattern_matching_result = 9;\n        }\n    }\n    else if (matchValue[0] === 1) {\n        if (matchValue[1] === -1) {\n            pattern_matching_result = 2;\n        }\n        else if (matchValue[1] === 0) {\n            pattern_matching_result = 5;\n        }\n        else if (matchValue[1] === 1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 9;\n        }\n    }\n    else {\n        pattern_matching_result = 9;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return BigNatModule_gte(BigInteger__get_V(x), BigInteger__get_V(y));\n        }\n        case 1: {\n            return BigNatModule_gte(BigInteger__get_V(y), BigInteger__get_V(x));\n        }\n        case 2: {\n            return true;\n        }\n        case 3: {\n            if (BigNatModule_isZero(BigInteger__get_V(x))) {\n                return BigNatModule_isZero(BigInteger__get_V(y));\n            }\n            else {\n                return false;\n            }\n        }\n        case 4: {\n            return true;\n        }\n        case 5: {\n            return true;\n        }\n        case 6: {\n            return BigNatModule_isZero(BigInteger__get_V(x));\n        }\n        case 7: {\n            return BigNatModule_isZero(BigInteger__get_V(y));\n        }\n        case 8: {\n            return true;\n        }\n        case 9: {\n            throw (new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\"));\n        }\n    }\n}\n\nexport function BigInteger_Pow_62E082A2(x, y) {\n    if (y < 0) {\n        throw (new Error(\"y\"));\n    }\n    const matchValue = [BigInteger__get_IsZero(x), y];\n    if (matchValue[0]) {\n        if (matchValue[1] === 0) {\n            return BigInteger_get_One();\n        }\n        else {\n            return BigInteger_get_Zero();\n        }\n    }\n    else {\n        const yval = BigInteger_$ctor_Z524259A4(y);\n        return BigInteger_create_Z2BE94A1(BigNatModule_isZero(BigNatModule_rem(BigInteger__get_V(yval), BigNatModule_two)) ? 1 : BigInteger__get_SignInt(x), BigNatModule_pow(BigInteger__get_V(x), BigInteger__get_V(yval)));\n    }\n}\n\nexport function BigInteger__get_ToInt32(x) {\n    if (BigInteger__get_IsZero(x)) {\n        return 0;\n    }\n    else {\n        const u = BigNatModule_toUInt32(BigInteger__get_V(x));\n        if (u <= (2147483647 >>> 0)) {\n            return (BigInteger__get_SignInt(x) * (~(~u))) | 0;\n        }\n        else if ((BigInteger__get_SignInt(x) === -1) ? (u === ((2147483647 + 1) >>> 0)) : false) {\n            return -2147483648;\n        }\n        else {\n            throw (new Error());\n        }\n    }\n}\n\nexport function BigInteger__get_ToUInt32(x) {\n    if (BigInteger__get_IsZero(x)) {\n        return 0;\n    }\n    else {\n        return BigNatModule_toUInt32(BigInteger__get_V(x));\n    }\n}\n\nexport function BigInteger__get_ToInt64(x) {\n    if (BigInteger__get_IsZero(x)) {\n        return fromBits(0, 0, false);\n    }\n    else {\n        const u = BigNatModule_toUInt64(BigInteger__get_V(x));\n        if (compare(u, fromValue(fromBits(4294967295, 2147483647, false), true)) <= 0) {\n            return op_Multiply(fromInteger(BigInteger__get_SignInt(x), false, 2), fromValue(u, false));\n        }\n        else if ((BigInteger__get_SignInt(x) === -1) ? equals(u, fromValue(op_Addition(fromBits(4294967295, 2147483647, false), fromBits(1, 0, false)), true)) : false) {\n            return fromBits(0, 2147483648, false);\n        }\n        else {\n            throw (new Error());\n        }\n    }\n}\n\nexport function BigInteger__get_ToUInt64(x) {\n    if (BigInteger__get_IsZero(x)) {\n        return fromBits(0, 0, true);\n    }\n    else {\n        return BigNatModule_toUInt64(BigInteger__get_V(x));\n    }\n}\n\nexport function BigInteger__get_ToDouble(x) {\n    const matchValue = BigInteger__get_SignInt(x) | 0;\n    switch (matchValue) {\n        case -1: {\n            return -BigNatModule_toFloat(BigInteger__get_V(x));\n        }\n        case 0: {\n            return 0;\n        }\n        case 1: {\n            return BigNatModule_toFloat(BigInteger__get_V(x));\n        }\n        default: {\n            throw (new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\"));\n        }\n    }\n}\n\nexport function BigInteger__get_ToSByte(x) {\n    return (BigInteger__get_ToInt32(x) + 0x80 & 0xFF) - 0x80;\n}\n\nexport function BigInteger__get_ToByte(x) {\n    return BigInteger__get_ToUInt32(x) & 0xFF;\n}\n\nexport function BigInteger__get_ToInt16(x) {\n    return (BigInteger__get_ToInt32(x) + 0x8000 & 0xFFFF) - 0x8000;\n}\n\nexport function BigInteger__get_ToUInt16(x) {\n    return BigInteger__get_ToUInt32(x) & 0xFFFF;\n}\n\nexport function BigInteger__get_ToSingle(x) {\n    return BigInteger__get_ToDouble(x);\n}\n\nexport function BigInteger__get_ToDecimal(x) {\n    return new Decimal(BigInteger__get_ToDouble(x));\n}\n\nexport function BigInteger_Parse_Z721C83C5(text) {\n    if (text == null) {\n        throw (new Error(\"text\"));\n    }\n    const text_1 = text.trim();\n    const len = text_1.length | 0;\n    if (len === 0) {\n        throw (new Error());\n    }\n    const matchValue = [text_1[0], len];\n    if (matchValue[0] === \"+\") {\n        if (matchValue[1] === 1) {\n            throw (new Error());\n        }\n        else {\n            return BigInteger_posn_Z67CCE57D(BigNatModule_ofString(text_1.slice(1, (len - 1) + 1)));\n        }\n    }\n    else if (matchValue[0] === \"-\") {\n        if (matchValue[1] === 1) {\n            throw (new Error());\n        }\n        else {\n            return BigInteger_negn_Z67CCE57D(BigNatModule_ofString(text_1.slice(1, (len - 1) + 1)));\n        }\n    }\n    else {\n        return BigInteger_posn_Z67CCE57D(BigNatModule_ofString(text_1));\n    }\n}\n\nexport function BigInteger__get_IsSmall(x) {\n    if (BigInteger__get_IsZero(x)) {\n        return true;\n    }\n    else {\n        return BigNatModule_isSmall(BigInteger__get_V(x));\n    }\n}\n\nexport function BigInteger_Factorial_Z665282C2(x) {\n    if (BigInteger__get_IsNegative(x)) {\n        throw (new Error(\"mustBeNonNegative\\\\nParameter name: x\"));\n    }\n    if (BigInteger__get_IsPositive(x)) {\n        return BigInteger_posn_Z67CCE57D(BigNatModule_factorial(BigInteger__get_V(x)));\n    }\n    else {\n        return BigInteger_get_One();\n    }\n}\n\nexport function BigInteger_op_UnaryPlus_Z665282C2(n1) {\n    return n1;\n}\n\nexport function BigInteger_FromInt64_Z524259C1(x) {\n    return BigInteger_$ctor_Z524259C1(x);\n}\n\nexport function BigInteger_FromInt32_Z524259A4(x) {\n    return BigInteger_$ctor_Z524259A4(x);\n}\n\n","import { BigInteger_op_Inequality_56F059C0, BigInteger_op_Equality_56F059C0, BigInteger_op_GreaterThanOrEqual_56F059C0, BigInteger_op_GreaterThan_56F059C0, BigInteger_op_LessThanOrEqual_56F059C0, BigInteger_op_LessThan_56F059C0, BigInteger_op_ExclusiveOr_56F059C0, BigInteger_op_BitwiseOr_56F059C0, BigInteger_op_BitwiseAnd_56F059C0, BigInteger_op_LeftShift_62E082A2, BigInteger_op_RightShift_62E082A2, BigInteger_op_UnaryPlus_Z665282C2, BigInteger_op_UnaryNegation_Z665282C2, BigInteger_op_Modulus_56F059C0, BigInteger_op_Division_56F059C0, BigInteger_op_Multiply_56F059C0, BigInteger_op_Subtraction_56F059C0, BigInteger_op_Addition_56F059C0, BigInteger__get_IsOne, BigInteger__get_IsZero, BigInteger__get_Sign, BigInteger__get_ToDecimal, BigInteger__get_ToDouble, BigInteger__get_ToSingle, BigInteger__get_ToUInt64, BigInteger__get_ToInt64, BigInteger__get_ToUInt32, BigInteger__get_ToInt32, BigInteger__get_ToUInt16, BigInteger__get_ToInt16, BigInteger__get_ToByte, BigInteger__get_ToSByte, BigInteger_$ctor_Z524259A4, BigInteger_$ctor_Z524259C1, BigInteger_get_Two, BigInteger_get_One, BigInteger_get_Zero, BigInteger_Abs_Z665282C2, BigInteger_Pow_62E082A2, BigInteger_GreatestCommonDivisor_56F059C0, BigInteger_DivRem_56F059C0, BigInteger_Parse_Z721C83C5, BigInteger } from \"./BigInt/z.js\";\nimport { fromInteger } from \"./Long.js\";\nimport { comparePrimitives, min, compare as compare_1, equals as equals_1, safeHash } from \"./Util.js\";\nimport { List, toString as toString_1 } from \"./Types.js\";\nimport { fold, head, skipWhile, ofSeq, find } from \"./List.js\";\nimport { unfold, delay, rangeNumber } from \"./Seq.js\";\nimport { fill, reverse } from \"./Array.js\";\n\nexport function isBigInt(x) {\n    return x instanceof BigInteger;\n}\n\nexport function tryParse(str, res) {\n    try {\n        res.contents = BigInteger_Parse_Z721C83C5(str);\n        return true;\n    }\n    catch (matchValue) {\n        return false;\n    }\n}\n\nexport function divRem(x, y, remainder) {\n    const patternInput = BigInteger_DivRem_56F059C0(x, y);\n    remainder.contents = patternInput[1];\n    return patternInput[0];\n}\n\nexport function parse(arg00) {\n    return BigInteger_Parse_Z721C83C5(arg00);\n}\n\nexport function greatestCommonDivisor(arg00, arg01) {\n    return BigInteger_GreatestCommonDivisor_56F059C0(arg00, arg01);\n}\n\nexport function pow(arg00, arg01) {\n    return BigInteger_Pow_62E082A2(arg00, arg01);\n}\n\nexport function abs(arg00) {\n    return BigInteger_Abs_Z665282C2(arg00);\n}\n\nexport const zero = BigInteger_get_Zero();\n\nexport const one = BigInteger_get_One();\n\nexport const two = BigInteger_get_Two();\n\nexport function fromString(s) {\n    return BigInteger_Parse_Z721C83C5(s);\n}\n\nexport function fromZero() {\n    return BigInteger_get_Zero();\n}\n\nexport function fromOne() {\n    return BigInteger_get_One();\n}\n\nexport function fromInt64(i) {\n    return BigInteger_$ctor_Z524259C1(i);\n}\n\nexport function fromInt32(i) {\n    if (i > 2147483647) {\n        return BigInteger_$ctor_Z524259C1(fromInteger(i, false, 6));\n    }\n    else {\n        return BigInteger_$ctor_Z524259A4(i);\n    }\n}\n\nexport function toSByte(x) {\n    return BigInteger__get_ToSByte(x);\n}\n\nexport function toByte(x) {\n    return BigInteger__get_ToByte(x);\n}\n\nexport function toInt16(x) {\n    return BigInteger__get_ToInt16(x);\n}\n\nexport function toUInt16(x) {\n    return BigInteger__get_ToUInt16(x);\n}\n\nexport function toInt32(x) {\n    return BigInteger__get_ToInt32(x);\n}\n\nexport function toUInt32(x) {\n    return BigInteger__get_ToUInt32(x);\n}\n\nexport function toInt64(x) {\n    return BigInteger__get_ToInt64(x);\n}\n\nexport function toUInt64(x) {\n    return BigInteger__get_ToUInt64(x);\n}\n\nexport function toSingle(x) {\n    return BigInteger__get_ToSingle(x);\n}\n\nexport function toDouble(x) {\n    return BigInteger__get_ToDouble(x);\n}\n\nexport function toDecimal(x) {\n    return BigInteger__get_ToDecimal(x);\n}\n\nexport function sign(x) {\n    return BigInteger__get_Sign(x);\n}\n\nexport function isZero(x) {\n    return BigInteger__get_IsZero(x);\n}\n\nexport function isOne(x) {\n    return BigInteger__get_IsOne(x);\n}\n\nexport function hash(x) {\n    return safeHash(x);\n}\n\nexport function compare(x, y) {\n    return x.CompareTo(y);\n}\n\nexport function equals(x, y) {\n    return equals_1(x, y);\n}\n\nexport function toString(x) {\n    return toString_1(x);\n}\n\nexport const get_Zero = BigInteger_get_Zero();\n\nexport const get_One = BigInteger_get_One();\n\nexport function op_Addition(arg00, arg01) {\n    return BigInteger_op_Addition_56F059C0(arg00, arg01);\n}\n\nexport function op_Subtraction(arg00, arg01) {\n    return BigInteger_op_Subtraction_56F059C0(arg00, arg01);\n}\n\nexport function op_Multiply(arg00, arg01) {\n    return BigInteger_op_Multiply_56F059C0(arg00, arg01);\n}\n\nexport function op_Division(arg00, arg01) {\n    return BigInteger_op_Division_56F059C0(arg00, arg01);\n}\n\nexport function op_Modulus(arg00, arg01) {\n    return BigInteger_op_Modulus_56F059C0(arg00, arg01);\n}\n\nexport function op_UnaryNegation(arg00) {\n    return BigInteger_op_UnaryNegation_Z665282C2(arg00);\n}\n\nexport function op_UnaryPlus(arg00) {\n    return BigInteger_op_UnaryPlus_Z665282C2(arg00);\n}\n\nexport function op_RightShift(arg00, arg01) {\n    return BigInteger_op_RightShift_62E082A2(arg00, arg01);\n}\n\nexport function op_LeftShift(arg00, arg01) {\n    return BigInteger_op_LeftShift_62E082A2(arg00, arg01);\n}\n\nexport function op_BitwiseAnd(arg00, arg01) {\n    return BigInteger_op_BitwiseAnd_56F059C0(arg00, arg01);\n}\n\nexport function op_BitwiseOr(arg00, arg01) {\n    return BigInteger_op_BitwiseOr_56F059C0(arg00, arg01);\n}\n\nexport function op_ExclusiveOr(arg00, arg01) {\n    return BigInteger_op_ExclusiveOr_56F059C0(arg00, arg01);\n}\n\nexport function op_LessThan(arg00, arg01) {\n    return BigInteger_op_LessThan_56F059C0(arg00, arg01);\n}\n\nexport function op_LessThanOrEqual(arg00, arg01) {\n    return BigInteger_op_LessThanOrEqual_56F059C0(arg00, arg01);\n}\n\nexport function op_GreaterThan(arg00, arg01) {\n    return BigInteger_op_GreaterThan_56F059C0(arg00, arg01);\n}\n\nexport function op_GreaterThanOrEqual(arg00, arg01) {\n    return BigInteger_op_GreaterThanOrEqual_56F059C0(arg00, arg01);\n}\n\nexport function op_Equality(arg00, arg01) {\n    return BigInteger_op_Equality_56F059C0(arg00, arg01);\n}\n\nexport function op_Inequality(arg00, arg01) {\n    return BigInteger_op_Inequality_56F059C0(arg00, arg01);\n}\n\nfunction flipTwosComplement(currByte, lowBitFound) {\n    const matchValue = [currByte, lowBitFound];\n    if (matchValue[1]) {\n        return [(currByte ^ 255) & 255, true];\n    }\n    else if (matchValue[0] === 0) {\n        return [0, false];\n    }\n    else {\n        return [(currByte ^ (254 << find((i) => ((currByte & (1 << i)) > 0), ofSeq(rangeNumber(0, 1, 7))))) & 255, true];\n    }\n}\n\nexport function toByteArray(value) {\n    if (equals_1(value, zero)) {\n        return new Uint8Array([0]);\n    }\n    else {\n        const isPositive = compare_1(value, zero) > 0;\n        const value_1 = isPositive ? value : BigInteger_op_Multiply_56F059C0(BigInteger_$ctor_Z524259A4(-1), value);\n        const mask32 = fromInt64(fromInteger(4294967295, false, 6));\n        const loop = (accumBytes_mut, consumeValue_mut, lowBitFound_mut) => {\n            let value_6, value_8, value_9, value_10;\n            loop:\n            while (true) {\n                const accumBytes = accumBytes_mut, consumeValue = consumeValue_mut, lowBitFound = lowBitFound_mut;\n                if (compare_1(consumeValue, zero) <= 0) {\n                    const accumBytes_1 = isPositive ? skipWhile((b) => (b === 0), accumBytes) : skipWhile((b_1) => (b_1 === 255), accumBytes);\n                    const isHighBitOne = (head(accumBytes_1) & 128) !== 0;\n                    return reverse(Uint8Array.from((isPositive ? isHighBitOne : false) ? (new List(0, accumBytes_1)) : (((!isPositive) ? (!isHighBitOne) : false) ? (new List(255, accumBytes_1)) : accumBytes_1)));\n                }\n                else {\n                    const currValue = toUInt32(BigInteger_op_BitwiseAnd_56F059C0(consumeValue, mask32));\n                    if (isPositive) {\n                        const b0 = currValue & 0xFF;\n                        let b1;\n                        const value_4 = currValue >>> 8;\n                        b1 = (value_4 & 0xFF);\n                        let b2;\n                        const value_5 = currValue >>> 16;\n                        b2 = (value_5 & 0xFF);\n                        accumBytes_mut = (new List((value_6 = (currValue >>> 24), value_6 & 0xFF), new List(b2, new List(b1, new List(b0, accumBytes)))));\n                        consumeValue_mut = BigInteger_op_RightShift_62E082A2(consumeValue, 32);\n                        lowBitFound_mut = false;\n                        continue loop;\n                    }\n                    else {\n                        const patternInput = flipTwosComplement(currValue & 0xFF, lowBitFound);\n                        const patternInput_1 = flipTwosComplement((value_8 = (currValue >>> 8), value_8 & 0xFF), patternInput[1]);\n                        const patternInput_2 = flipTwosComplement((value_9 = (currValue >>> 16), value_9 & 0xFF), patternInput_1[1]);\n                        const patternInput_3 = flipTwosComplement((value_10 = (currValue >>> 24), value_10 & 0xFF), patternInput_2[1]);\n                        accumBytes_mut = (new List(patternInput_3[0], new List(patternInput_2[0], new List(patternInput_1[0], new List(patternInput[0], accumBytes)))));\n                        consumeValue_mut = BigInteger_op_RightShift_62E082A2(consumeValue, 32);\n                        lowBitFound_mut = patternInput_3[1];\n                        continue loop;\n                    }\n                }\n                break;\n            }\n        };\n        return loop(new List(), value_1, false);\n    }\n}\n\nexport function fromByteArray(bytes) {\n    if (bytes == null) {\n        throw (new Error(\"bytes\"));\n    }\n    if (bytes.length === 0) {\n        return zero;\n    }\n    else {\n        const isPositive = (bytes[bytes.length - 1] & 128) === 0;\n        const buffer = fill(new Uint8Array(4), 0, 4, 0);\n        const loop = (accumUInt32_mut, currIndex_mut, bytesRemaining_mut, lowBitFound_mut) => {\n            loop:\n            while (true) {\n                const accumUInt32 = accumUInt32_mut, currIndex = currIndex_mut, bytesRemaining = bytesRemaining_mut, lowBitFound = lowBitFound_mut;\n                if (bytesRemaining === 0) {\n                    const value_2 = fold((acc, value) => BigInteger_op_Addition_56F059C0(BigInteger_op_LeftShift_62E082A2(acc, 32), fromInt64(fromInteger(value, false, 6))), zero, accumUInt32);\n                    if (isPositive) {\n                        return value_2;\n                    }\n                    else {\n                        return BigInteger_op_Multiply_56F059C0(BigInteger_$ctor_Z524259A4(-1), value_2);\n                    }\n                }\n                else {\n                    const bytesToProcess = min((x, y) => comparePrimitives(x, y), bytesRemaining, 4) | 0;\n                    for (let i_1 = 0; i_1 <= (bytesToProcess - 1); i_1++) {\n                        buffer[i_1] = bytes[currIndex + i_1];\n                    }\n                    if (isPositive) {\n                        fill(buffer, bytesToProcess, 4 - bytesToProcess, 0);\n                        accumUInt32_mut = (new List((((((buffer[0] | ((buffer[1] << 8) >>> 0)) >>> 0) | ((buffer[2] << 16) >>> 0)) >>> 0) | ((buffer[3] << 24) >>> 0)) >>> 0, accumUInt32));\n                        currIndex_mut = (currIndex + bytesToProcess);\n                        bytesRemaining_mut = (bytesRemaining - bytesToProcess);\n                        lowBitFound_mut = false;\n                        continue loop;\n                    }\n                    else {\n                        fill(buffer, bytesToProcess, 4 - bytesToProcess, 255);\n                        const patternInput = flipTwosComplement(buffer[0], lowBitFound);\n                        const patternInput_1 = flipTwosComplement(buffer[1], patternInput[1]);\n                        const patternInput_2 = flipTwosComplement(buffer[2], patternInput_1[1]);\n                        const patternInput_3 = flipTwosComplement(buffer[3], patternInput_2[1]);\n                        accumUInt32_mut = (new List((((((patternInput[0] | ((patternInput_1[0] << 8) >>> 0)) >>> 0) | ((patternInput_2[0] << 16) >>> 0)) >>> 0) | ((patternInput_3[0] << 24) >>> 0)) >>> 0, accumUInt32));\n                        currIndex_mut = (currIndex + bytesToProcess);\n                        bytesRemaining_mut = (bytesRemaining - bytesToProcess);\n                        lowBitFound_mut = patternInput_3[1];\n                        continue loop;\n                    }\n                }\n                break;\n            }\n        };\n        return loop(new List(), 0, bytes.length, false);\n    }\n}\n\nexport function makeRangeStepFunction(step, last) {\n    const stepComparedWithZero = compare_1(step, zero) | 0;\n    if (stepComparedWithZero === 0) {\n        throw (new Error(\"The step of a range cannot be zero\"));\n    }\n    const stepGreaterThanZero = stepComparedWithZero > 0;\n    return (x) => {\n        const comparedWithLast = compare_1(x, last) | 0;\n        return ((stepGreaterThanZero ? (comparedWithLast <= 0) : false) ? true : ((!stepGreaterThanZero) ? (comparedWithLast >= 0) : false)) ? [x, BigInteger_op_Addition_56F059C0(x, step)] : (void 0);\n    };\n}\n\nexport function range(first, step, last) {\n    const stepFn = makeRangeStepFunction(step, last);\n    return delay(() => unfold(stepFn, first));\n}\n\n","import { Parsimmon_parse } from \"../Fable.Parsimmon.4.0.0/Parsimmon.fs.js\";\nimport { jsonParser } from \"./Parser.fs.js\";\nimport { join, toText, printf, toFail } from \"../fable-library.3.1.5/String.js\";\nimport { empty, singleton, concat, ofSeq, ofArray, map as map_1 } from \"../fable-library.3.1.5/List.js\";\nimport { tryFind, ofList, toList } from \"../fable-library.3.1.5/Map.js\";\nimport { map as map_3, delay, getEnumerator } from \"../fable-library.3.1.5/Seq.js\";\nimport { toString } from \"../fable-library.3.1.5/Decimal.js\";\nimport { toDecimal } from \"../fable-library.3.1.5/BigInt.js\";\nimport { toString as toString_1 } from \"../fable-library.3.1.5/Date.js\";\nimport { partialApply, isIterable } from \"../fable-library.3.1.5/Util.js\";\nimport { value as value_5, some } from \"../fable-library.3.1.5/Option.js\";\nimport { $007CNativeObject$007C_$007C, $007CNativeArray$007C_$007C, $007CNull$007C_$007C, $007CNativeBool$007C_$007C, $007CNativeNumber$007C_$007C, $007CNativeString$007C_$007C } from \"./TypeCheck.fs.js\";\nimport { Json } from \"./Json.fs.js\";\nimport { map as map_2 } from \"../fable-library.3.1.5/Array.js\";\n\nexport function InteropUtil_isDateOffset(x) {\n    if (x instanceof Date) {\n        return \"offset\" in x;\n    }\n    else {\n        return false;\n    }\n}\n\nexport function InteropUtil_isObjectLiteral(x) {\n    return (typeof x) === \"object\";\n}\n\nexport function InteropUtil_isBigInt(x) {\n    if (((((!(x == null)) ? InteropUtil_isObjectLiteral(x) : false) ? (\"signInt\" in x) : false) ? (\"v\" in x) : false) ? (\"digits\" in (x[\"v\"])) : false) {\n        return \"bound\" in (x[\"v\"]);\n    }\n    else {\n        return false;\n    }\n}\n\nexport function SimpleJson_tryParse(input) {\n    return Parsimmon_parse(input, jsonParser);\n}\n\nexport function SimpleJson_parse(input) {\n    const matchValue = SimpleJson_tryParse(input);\n    if (matchValue == null) {\n        return toFail(printf(\"Could not parse the JSON input: %s\"))(input);\n    }\n    else {\n        return matchValue;\n    }\n}\n\nexport function SimpleJson_toString(_arg1) {\n    if (_arg1.tag === 2) {\n        if (_arg1.fields[0]) {\n            return \"true\";\n        }\n        else {\n            return \"false\";\n        }\n    }\n    else if (_arg1.tag === 0) {\n        return _arg1.fields[0].toString();\n    }\n    else if (_arg1.tag === 1) {\n        return toText(printf(\"\\\"%s\\\"\"))(_arg1.fields[0]);\n    }\n    else if (_arg1.tag === 4) {\n        const arg10_1 = join(\",\", map_1((_arg1_1) => SimpleJson_toString(_arg1_1), _arg1.fields[0]));\n        return toText(printf(\"[%s]\"))(arg10_1);\n    }\n    else if (_arg1.tag === 5) {\n        const arg10_3 = join(\",\", map_1((tupledArg) => {\n            const arg20 = SimpleJson_toString(tupledArg[1]);\n            return toText(printf(\"\\\"%s\\\":%s\"))(tupledArg[0])(arg20);\n        }, toList(_arg1.fields[0])));\n        return toText(printf(\"{%s}\"))(arg10_3);\n    }\n    else {\n        return \"null\";\n    }\n}\n\nexport function SimpleJson_toPlainObject(input) {\n    switch (input.tag) {\n        case 2: {\n            return input.fields[0];\n        }\n        case 0: {\n            return input.fields[0];\n        }\n        case 1: {\n            return input.fields[0];\n        }\n        case 4: {\n            const array = [];\n            const enumerator = getEnumerator(input.fields[0]);\n            try {\n                while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                    const value_3 = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n                    void (array.push(SimpleJson_toPlainObject(value_3)));\n                }\n            }\n            finally {\n                enumerator.Dispose();\n            }\n            return array;\n        }\n        case 5: {\n            const jsObject = ({});\n            const enumerator_1 = getEnumerator(toList(input.fields[0]));\n            try {\n                while (enumerator_1[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                    const forLoopVar = enumerator_1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n                    jsObject[forLoopVar[0]] = SimpleJson_toPlainObject(forLoopVar[1]);\n                }\n            }\n            finally {\n                enumerator_1.Dispose();\n            }\n            return jsObject;\n        }\n        default: {\n            return null;\n        }\n    }\n}\n\nexport function SimpleJson_stringify(value) {\n    if (value == null) {\n        return JSON.stringify(null);\n    }\n    else {\n        return JSON.stringify(value, (key, jsonValue) => {\n            let copyOfStruct;\n            return InteropUtil_isBigInt(jsonValue) ? toString(toDecimal(jsonValue)) : ((jsonValue instanceof Date) ? toString_1(jsonValue, \"o\") : (((typeof jsonValue) === \"string\") ? jsonValue : (isIterable(jsonValue) ? (Array.isArray(jsonValue) ? jsonValue : (Array.from(jsonValue))) : (InteropUtil_isBigInt(jsonValue) ? toString(toDecimal(jsonValue)) : (InteropUtil_isDateOffset(jsonValue) ? (copyOfStruct = jsonValue, toString_1(copyOfStruct, \"O\")) : jsonValue)))));\n        }, some(0));\n    }\n}\n\nexport function SimpleJson_parseNative$0027(x) {\n    const activePatternResult3430 = $007CNativeString$007C_$007C(x);\n    if (activePatternResult3430 != null) {\n        const str = activePatternResult3430;\n        return new Json(1, str);\n    }\n    else {\n        const activePatternResult3429 = $007CNativeNumber$007C_$007C(x);\n        if (activePatternResult3429 != null) {\n            const number = activePatternResult3429;\n            return new Json(0, number);\n        }\n        else {\n            const activePatternResult3428 = $007CNativeBool$007C_$007C(x);\n            if (activePatternResult3428 != null) {\n                const value = activePatternResult3428;\n                return new Json(2, value);\n            }\n            else if ($007CNull$007C_$007C(x) != null) {\n                return new Json(3);\n            }\n            else {\n                const activePatternResult3426 = $007CNativeArray$007C_$007C(x);\n                if (activePatternResult3426 != null) {\n                    const arr = activePatternResult3426;\n                    return new Json(4, ofArray(map_2((x_1) => SimpleJson_parseNative$0027(x_1), arr)));\n                }\n                else {\n                    const activePatternResult3425 = $007CNativeObject$007C_$007C(x);\n                    if (activePatternResult3425 != null) {\n                        const object = value_5(activePatternResult3425);\n                        return new Json(5, ofList(ofSeq(delay(() => map_3((key) => [key, SimpleJson_parseNative$0027(object[key])], Object.keys(object))))));\n                    }\n                    else {\n                        return new Json(3);\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function SimpleJson_parseNative(input) {\n    return SimpleJson_parseNative$0027(JSON.parse(input));\n}\n\nexport function SimpleJson_tryParseNative(input) {\n    try {\n        return SimpleJson_parseNative(input);\n    }\n    catch (ex) {\n        return void 0;\n    }\n}\n\nexport function SimpleJson_fromObjectLiteral(x) {\n    try {\n        return SimpleJson_parseNative$0027(x);\n    }\n    catch (matchValue) {\n        return void 0;\n    }\n}\n\nexport function SimpleJson_mapKeys(f, _arg1) {\n    switch (_arg1.tag) {\n        case 5: {\n            return new Json(5, ofList(map_1((tupledArg) => [f(tupledArg[0]), SimpleJson_mapKeys(f, tupledArg[1])], toList(_arg1.fields[0]))));\n        }\n        case 4: {\n            return new Json(4, map_1((_arg1_1) => SimpleJson_mapKeys(f, _arg1_1), _arg1.fields[0]));\n        }\n        default: {\n            return _arg1;\n        }\n    }\n}\n\nexport function SimpleJson_mapbyKey(f, _arg1) {\n    switch (_arg1.tag) {\n        case 5: {\n            return new Json(5, ofList(map_1((tupledArg) => {\n                const key = tupledArg[0];\n                return [key, f(key, tupledArg[1])];\n            }, toList(_arg1.fields[0]))));\n        }\n        case 4: {\n            return new Json(4, map_1((_arg1_1) => SimpleJson_mapbyKey(f, _arg1_1), _arg1.fields[0]));\n        }\n        default: {\n            return _arg1;\n        }\n    }\n}\n\nexport function SimpleJson_mapKeysByPath(f, json) {\n    const mapKey = (xs, _arg1) => {\n        switch (_arg1.tag) {\n            case 5: {\n                return new Json(5, ofList(map_1((tupledArg) => {\n                    const key = tupledArg[0];\n                    const value = tupledArg[1];\n                    const keyPath = concat([xs, singleton(key)]);\n                    const matchValue = f(keyPath);\n                    if (matchValue == null) {\n                        return [key, mapKey(keyPath, value)];\n                    }\n                    else {\n                        return [matchValue, mapKey(keyPath, value)];\n                    }\n                }, toList(_arg1.fields[0]))));\n            }\n            case 4: {\n                return new Json(4, map_1(partialApply(1, mapKey, [xs]), _arg1.fields[0]));\n            }\n            default: {\n                return _arg1;\n            }\n        }\n    };\n    return mapKey(empty(), json);\n}\n\nexport function SimpleJson_readPath(keys_mut, input_mut) {\n    SimpleJson_readPath:\n    while (true) {\n        const keys = keys_mut, input = input_mut;\n        const matchValue = [keys, input];\n        let pattern_matching_result, dict, key, dict_1, firstKey, rest;\n        if (matchValue[0].tail != null) {\n            if (matchValue[0].tail.tail == null) {\n                if (matchValue[1].tag === 5) {\n                    pattern_matching_result = 1;\n                    dict = matchValue[1].fields[0];\n                    key = matchValue[0].head;\n                }\n                else {\n                    pattern_matching_result = 3;\n                }\n            }\n            else if (matchValue[1].tag === 5) {\n                pattern_matching_result = 2;\n                dict_1 = matchValue[1].fields[0];\n                firstKey = matchValue[0].head;\n                rest = matchValue[0].tail;\n            }\n            else {\n                pattern_matching_result = 3;\n            }\n        }\n        else {\n            pattern_matching_result = 0;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return void 0;\n            }\n            case 1: {\n                return tryFind(key, dict);\n            }\n            case 2: {\n                const matchValue_1 = tryFind(firstKey, dict_1);\n                let pattern_matching_result_1, nextDict;\n                if (matchValue_1 != null) {\n                    if (matchValue_1.tag === 5) {\n                        pattern_matching_result_1 = 0;\n                        nextDict = matchValue_1.fields[0];\n                    }\n                    else {\n                        pattern_matching_result_1 = 1;\n                    }\n                }\n                else {\n                    pattern_matching_result_1 = 1;\n                }\n                switch (pattern_matching_result_1) {\n                    case 0: {\n                        keys_mut = rest;\n                        input_mut = (new Json(5, nextDict));\n                        continue SimpleJson_readPath;\n                    }\n                    case 1: {\n                        return void 0;\n                    }\n                }\n            }\n            case 3: {\n                return void 0;\n            }\n        }\n        break;\n    }\n}\n\n","import { some } from \"../fable-library.3.1.5/Option.js\";\n\nexport function $007CNativeString$007C_$007C(x) {\n    if (typeof (x) === 'string') {\n        return x;\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function $007CNativeBool$007C_$007C(x) {\n    if (typeof (x) === 'boolean') {\n        return x;\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function $007CNativeNumber$007C_$007C(x) {\n    if (typeof (x) === 'number') {\n        return x;\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function $007CNativeObject$007C_$007C(x) {\n    if (typeof (x) === 'object') {\n        return some(x);\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function $007CNull$007C_$007C(x) {\n    if (x == null) {\n        return some(x);\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function $007CNativeArray$007C_$007C(x) {\n    if (Array.isArray(x)) {\n        return x;\n    }\n    else {\n        return void 0;\n    }\n}\n\n","/**\n * DateTimeOffset functions.\n *\n * Note: DateOffset instances are always DateObjects in local\n * timezone (because JS dates are all kinds of messed up).\n * A local date returns UTC epoc when `.getTime()` is called.\n *\n * However, this means that in order to construct an UTC date\n * from a DateOffset with offset of +5 hours, you first need\n * to subtract those 5 hours, than add the \"local\" offset.\n * As said, all kinds of messed up.\n *\n * Basically; invariant: date.getTime() always return UTC time.\n */\nimport { create as createDate, dateOffsetToString, daysInMonth, offsetRegex, parseRaw } from \"./Date.js\";\nimport { fromValue, ticksToUnixEpochMilliseconds, unixEpochMillisecondsToTicks } from \"./Long.js\";\nimport { compareDates, padWithZeros } from \"./Util.js\";\nexport default function DateTimeOffset(value, offset) {\n    const d = new Date(value);\n    d.offset = offset != null ? offset : new Date().getTimezoneOffset() * -60000;\n    return d;\n}\nexport function fromDate(date, offset) {\n    const isUtc = date.kind === 1 /* UTC */;\n    const offset2 = isUtc ? 0 : date.getTimezoneOffset() * -60000;\n    if (offset != null && offset !== offset2) {\n        throw new Error(isUtc\n            ? \"The UTC Offset for Utc DateTime instances must be 0.\"\n            : \"The UTC Offset of the local dateTime parameter does not match the offset argument.\");\n    }\n    return DateTimeOffset(date.getTime(), offset2);\n}\nexport function fromTicks(ticks, offset) {\n    ticks = fromValue(ticks);\n    const epoc = ticksToUnixEpochMilliseconds(ticks) - offset;\n    return DateTimeOffset(epoc, offset);\n}\nexport function getUtcTicks(date) {\n    return unixEpochMillisecondsToTicks(date.getTime(), 0);\n}\nexport function minValue() {\n    // This is \"0001-01-01T00:00:00.000Z\", actual JS min value is -8640000000000000\n    return DateTimeOffset(-62135596800000, 0);\n}\nexport function maxValue() {\n    // This is \"9999-12-31T23:59:59.999Z\", actual JS max value is 8640000000000000\n    return DateTimeOffset(253402300799999, 0);\n}\nexport function parse(str) {\n    const date = parseRaw(str);\n    const offsetMatch = offsetRegex.exec(str);\n    const offset = offsetMatch == null\n        ? date.getTimezoneOffset() * -60000\n        : (offsetMatch[0] === \"Z\"\n            ? 0\n            : parseInt(offsetMatch[1], 10) * 3600000\n                + parseInt(offsetMatch[2], 10) * 60000);\n    return DateTimeOffset(date.getTime(), offset);\n}\nexport function tryParse(v, defValue) {\n    try {\n        defValue.contents = parse(v);\n        return true;\n    }\n    catch (_err) {\n        return false;\n    }\n}\nexport function create(year, month, day, h, m, s, ms, offset) {\n    if (offset == null) {\n        offset = ms;\n        ms = 0;\n    }\n    if (offset !== 0) {\n        if (offset % 60000 !== 0) {\n            throw new Error(\"Offset must be specified in whole minutes\");\n        }\n        if (~~(offset / 3600000) > 14) {\n            throw new Error(\"Offset must be within plus or minus 14 hour\");\n        }\n    }\n    let date;\n    if (offset === 0) {\n        date = new Date(Date.UTC(year, month - 1, day, h, m, s, ms));\n        if (year <= 99) {\n            date.setFullYear(year, month - 1, day);\n        }\n    }\n    else {\n        const str = padWithZeros(year, 4) + \"-\" +\n            padWithZeros(month, 2) + \"-\" +\n            padWithZeros(day, 2) + \"T\" +\n            padWithZeros(h, 2) + \":\" +\n            padWithZeros(m, 2) + \":\" +\n            padWithZeros(s, 2) + \".\" +\n            padWithZeros(ms, 3) +\n            dateOffsetToString(offset);\n        date = new Date(str);\n    }\n    const dateValue = date.getTime();\n    if (isNaN(dateValue)) {\n        throw new Error(\"The parameters describe an unrepresentable Date\");\n    }\n    return DateTimeOffset(dateValue, offset);\n}\nexport function now() {\n    const date = new Date();\n    const offset = date.getTimezoneOffset() * -60000;\n    return DateTimeOffset(date.getTime(), offset);\n}\nexport function utcNow() {\n    const date = now();\n    return DateTimeOffset(date.getTime(), 0);\n}\nexport function toUniversalTime(date) {\n    return DateTimeOffset(date.getTime(), 0);\n}\nexport function toLocalTime(date) {\n    return DateTimeOffset(date.getTime(), date.getTimezoneOffset() * -60000);\n}\nexport function timeOfDay(d) {\n    var _a;\n    const d2 = new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0));\n    return d2.getUTCHours() * 3600000\n        + d2.getUTCMinutes() * 60000\n        + d2.getUTCSeconds() * 1000\n        + d2.getUTCMilliseconds();\n}\nexport function date(d) {\n    var _a;\n    const d2 = new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0));\n    return createDate(d2.getUTCFullYear(), d2.getUTCMonth() + 1, d2.getUTCDate(), 0, 0, 0, 0);\n}\nexport function day(d) {\n    var _a;\n    return new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0)).getUTCDate();\n}\nexport function hour(d) {\n    var _a;\n    return new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0)).getUTCHours();\n}\nexport function millisecond(d) {\n    var _a;\n    return new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0)).getUTCMilliseconds();\n}\nexport function minute(d) {\n    var _a;\n    return new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0)).getUTCMinutes();\n}\nexport function month(d) {\n    var _a;\n    return new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0)).getUTCMonth() + 1;\n}\nexport function second(d) {\n    var _a;\n    return new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0)).getUTCSeconds();\n}\nexport function year(d) {\n    var _a;\n    return new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0)).getUTCFullYear();\n}\nexport function dayOfWeek(d) {\n    var _a;\n    return new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0)).getUTCDay();\n}\nexport function dayOfYear(d) {\n    var _a;\n    const d2 = new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0));\n    const _year = d2.getUTCFullYear();\n    const _month = d2.getUTCMonth() + 1;\n    let _day = d2.getUTCDate();\n    for (let i = 1; i < _month; i++) {\n        _day += daysInMonth(_year, i);\n    }\n    return _day;\n}\nexport function add(d, ts) {\n    var _a;\n    return DateTimeOffset(d.getTime() + ts, ((_a = d.offset) !== null && _a !== void 0 ? _a : 0));\n}\nexport function addDays(d, v) {\n    var _a;\n    return DateTimeOffset(d.getTime() + v * 86400000, ((_a = d.offset) !== null && _a !== void 0 ? _a : 0));\n}\nexport function addHours(d, v) {\n    var _a;\n    return DateTimeOffset(d.getTime() + v * 3600000, ((_a = d.offset) !== null && _a !== void 0 ? _a : 0));\n}\nexport function addMinutes(d, v) {\n    var _a;\n    return DateTimeOffset(d.getTime() + v * 60000, ((_a = d.offset) !== null && _a !== void 0 ? _a : 0));\n}\nexport function addSeconds(d, v) {\n    var _a;\n    return DateTimeOffset(d.getTime() + v * 1000, ((_a = d.offset) !== null && _a !== void 0 ? _a : 0));\n}\nexport function addMilliseconds(d, v) {\n    var _a;\n    return DateTimeOffset(d.getTime() + v, ((_a = d.offset) !== null && _a !== void 0 ? _a : 0));\n}\nexport function addYears(d, v) {\n    var _a;\n    const newMonth = d.getUTCMonth() + 1;\n    const newYear = d.getUTCFullYear() + v;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, d.getUTCDate());\n    return create(newYear, newMonth, newDay, d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds(), ((_a = d.offset) !== null && _a !== void 0 ? _a : 0));\n}\nexport function addMonths(d, v) {\n    var _a, _b;\n    const d2 = new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0));\n    let newMonth = d2.getUTCMonth() + 1 + v;\n    let newMonth_ = 0;\n    let yearOffset = 0;\n    if (newMonth > 12) {\n        newMonth_ = newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12);\n        newMonth = newMonth_;\n    }\n    else if (newMonth < 1) {\n        newMonth_ = 12 + newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12) + (newMonth_ === 12 ? -1 : 0);\n        newMonth = newMonth_;\n    }\n    const newYear = d2.getUTCFullYear() + yearOffset;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, d2.getUTCDate());\n    return create(newYear, newMonth, newDay, d2.getUTCHours(), d2.getUTCMinutes(), d2.getUTCSeconds(), d2.getUTCMilliseconds(), ((_b = d.offset) !== null && _b !== void 0 ? _b : 0));\n}\nexport function subtract(d, that) {\n    var _a;\n    return typeof that === \"number\"\n        ? DateTimeOffset(d.getTime() - that, ((_a = d.offset) !== null && _a !== void 0 ? _a : 0))\n        : d.getTime() - that.getTime();\n}\nexport function equals(d1, d2) {\n    return d1.getTime() === d2.getTime();\n}\nexport function equalsExact(d1, d2) {\n    return d1.getTime() === d2.getTime() && d1.offset === d2.offset;\n}\nexport function compare(d1, d2) {\n    return compareDates(d1, d2);\n}\nexport const compareTo = compare;\nexport function op_Addition(x, y) {\n    return add(x, y);\n}\nexport function op_Subtraction(x, y) {\n    return subtract(x, y);\n}\n","import { trim } from \"./String.js\";\n// RFC 4122 compliant. From https://stackoverflow.com/a/13653180/3922220\n// const guidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/;\n// Relax GUID parsing, see #1637\nconst guidRegex = /^[\\(\\{]{0,2}[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}[\\)\\}]{0,2}$/;\nconst guidRegexNoHyphen = /^([0-9a-f]{8})([0-9a-f]{4})([0-9a-f]{4})([0-9a-f]{4})([0-9a-f]{12})$/;\nconst guidRegexHex = /^\\{0x[0-9a-f]{8},(0x[0-9a-f]{4},){2}\\{(0x[0-9a-f]{2},){7}0x[0-9a-f]{2}\\}\\}$/;\nconst guidHexCaptures = /^([0-9a-f]{8})-(([0-9a-f]{4})-)(([0-9a-f]{4})-)([0-9a-f]{2})([0-9a-f]{2})-([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/;\nexport function toString(str, format, _provider) {\n    if (format && (format === null || format === void 0 ? void 0 : format.length) > 0) {\n        switch (format) {\n            case \"N\":\n                return str.replace(/-/g, '');\n            case \"D\":\n                return str;\n            case \"B\":\n                return \"{\" + str + \"}\";\n            case \"P\":\n                return \"(\" + str + \")\";\n            case \"X\":\n                return str.replace(guidHexCaptures, \"{0x$1,0x$3,0x$5,{0x$6,0x$7,0x$8,0x$9,0x$10,0x$11,0x$12,0x$13}}\");\n            default:\n                throw new Error(\"Unrecognized Guid print format\");\n        }\n    }\n    else {\n        return str;\n    }\n}\n/** Validates UUID as specified in RFC4122 (versions 1-5). */\nexport function parse(str) {\n    function hyphenateGuid(str) {\n        return str.replace(guidRegexNoHyphen, \"$1-$2-$3-$4-$5\");\n    }\n    const wsTrimAndLowered = str.trim().toLowerCase();\n    if (guidRegex.test(wsTrimAndLowered)) {\n        return trim(wsTrimAndLowered, \"{\", \"}\", \"(\", \")\");\n    }\n    else if (guidRegexNoHyphen.test(wsTrimAndLowered)) {\n        return hyphenateGuid(wsTrimAndLowered);\n    }\n    else if (guidRegexHex.test(wsTrimAndLowered)) {\n        return hyphenateGuid(wsTrimAndLowered.replace(/[\\{\\},]|0x/g, ''));\n    }\n    else {\n        throw new Error(\"Guid should contain 32 digits with 4 dashes: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\");\n    }\n}\nexport function tryParse(str, defValue) {\n    try {\n        defValue.contents = parse(str);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\n// From https://gist.github.com/LeverOne/1308368\nexport function newGuid() {\n    let b = \"\";\n    for (let a = 0; a++ < 36;) {\n        b += a * 51 & 52\n            ? (a ^ 15 ? 8 ^ Math.random() * (a ^ 20 ? 16 : 4) : 4).toString(16)\n            : \"-\";\n    }\n    return b;\n}\n// Maps for number <-> hex string conversion\nlet _convertMapsInitialized = false;\nlet _byteToHex;\nlet _hexToByte;\nfunction initConvertMaps() {\n    _byteToHex = new Array(256);\n    _hexToByte = {};\n    for (let i = 0; i < 256; i++) {\n        _byteToHex[i] = (i + 0x100).toString(16).substr(1);\n        _hexToByte[_byteToHex[i]] = i;\n    }\n    _convertMapsInitialized = true;\n}\n/** Parse a UUID into it's component bytes */\n// Adapted from https://github.com/zefferus/uuid-parse\nexport function guidToArray(s) {\n    if (!_convertMapsInitialized) {\n        initConvertMaps();\n    }\n    let i = 0;\n    const buf = new Uint8Array(16);\n    s.toLowerCase().replace(/[0-9a-f]{2}/g, ((oct) => {\n        switch (i) {\n            // .NET saves first three byte groups with different endianness\n            // See https://stackoverflow.com/a/16722909/3922220\n            case 0:\n            case 1:\n            case 2:\n            case 3:\n                buf[3 - i++] = _hexToByte[oct];\n                break;\n            case 4:\n            case 5:\n                buf[9 - i++] = _hexToByte[oct];\n                break;\n            case 6:\n            case 7:\n                buf[13 - i++] = _hexToByte[oct];\n                break;\n            case 8:\n            case 9:\n            case 10:\n            case 11:\n            case 12:\n            case 13:\n            case 14:\n            case 15:\n                buf[i++] = _hexToByte[oct];\n                break;\n        }\n    }));\n    // Zero out remaining bytes if string was short\n    while (i < 16) {\n        buf[i++] = 0;\n    }\n    return buf;\n}\n/** Convert UUID byte array into a string */\nexport function arrayToGuid(buf) {\n    if (buf.length !== 16) {\n        throw new Error(\"Byte array for GUID must be exactly 16 bytes long\");\n    }\n    if (!_convertMapsInitialized) {\n        initConvertMaps();\n    }\n    const guid = _byteToHex[buf[3]] + _byteToHex[buf[2]] +\n        _byteToHex[buf[1]] + _byteToHex[buf[0]] + \"-\" +\n        _byteToHex[buf[5]] + _byteToHex[buf[4]] + \"-\" +\n        _byteToHex[buf[7]] + _byteToHex[buf[6]] + \"-\" +\n        _byteToHex[buf[8]] + _byteToHex[buf[9]] + \"-\" +\n        _byteToHex[buf[10]] + _byteToHex[buf[11]] +\n        _byteToHex[buf[12]] + _byteToHex[buf[13]] +\n        _byteToHex[buf[14]] + _byteToHex[buf[15]];\n    return guid;\n}\n","import { fromBits, getHighBits, getHighBitsUnsigned, getLowBits, getLowBitsUnsigned } from \"./Long.js\";\nconst littleEndian = true;\nexport function isLittleEndian() {\n    return littleEndian;\n}\nexport function getBytesBoolean(value) {\n    const bytes = new Uint8Array(1);\n    const view = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n    view.setUint8(0, value ? 1 : 0);\n    return bytes;\n}\nexport function getBytesChar(value) {\n    const bytes = new Uint8Array(2);\n    const view = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n    view.setUint16(0, value.charCodeAt(0), littleEndian);\n    return bytes;\n}\nexport function getBytesInt16(value) {\n    const bytes = new Uint8Array(2);\n    const view = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n    view.setInt16(0, value, littleEndian);\n    return bytes;\n}\nexport function getBytesInt32(value) {\n    const bytes = new Uint8Array(4);\n    const view = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n    view.setInt32(0, value, littleEndian);\n    return bytes;\n}\nexport function getBytesInt64(value) {\n    const bytes = new Uint8Array(8);\n    const view = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n    view.setInt32(littleEndian ? 0 : 4, getLowBits(value), littleEndian);\n    view.setInt32(littleEndian ? 4 : 0, getHighBits(value), littleEndian);\n    return bytes;\n}\nexport function getBytesUInt16(value) {\n    const bytes = new Uint8Array(2);\n    const view = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n    view.setUint16(0, value, littleEndian);\n    return bytes;\n}\nexport function getBytesUInt32(value) {\n    const bytes = new Uint8Array(4);\n    const view = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n    view.setUint32(0, value, littleEndian);\n    return bytes;\n}\nexport function getBytesUInt64(value) {\n    const bytes = new Uint8Array(8);\n    const view = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n    view.setUint32(littleEndian ? 0 : 4, getLowBitsUnsigned(value), littleEndian);\n    view.setUint32(littleEndian ? 4 : 0, getHighBitsUnsigned(value), littleEndian);\n    return bytes;\n}\nexport function getBytesSingle(value) {\n    const bytes = new Uint8Array(4);\n    const view = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n    view.setFloat32(0, value, littleEndian);\n    return bytes;\n}\nexport function getBytesDouble(value) {\n    const bytes = new Uint8Array(8);\n    const view = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n    view.setFloat64(0, value, littleEndian);\n    return bytes;\n}\nexport function int64BitsToDouble(value) {\n    const buffer = new ArrayBuffer(8);\n    const view = new DataView(buffer);\n    view.setInt32(littleEndian ? 0 : 4, getLowBits(value), littleEndian);\n    view.setInt32(littleEndian ? 4 : 0, getHighBits(value), littleEndian);\n    return view.getFloat64(0, littleEndian);\n}\nexport function doubleToInt64Bits(value) {\n    const buffer = new ArrayBuffer(8);\n    const view = new DataView(buffer);\n    view.setFloat64(0, value, littleEndian);\n    const lowBits = view.getInt32(littleEndian ? 0 : 4, littleEndian);\n    const highBits = view.getInt32(littleEndian ? 4 : 0, littleEndian);\n    return fromBits(lowBits, highBits, false);\n}\nexport function toBoolean(bytes, offset) {\n    const array = ArrayBuffer.isView(bytes) ? bytes : Uint8Array.from(bytes);\n    const view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n    return view.getUint8(offset) === 1 ? true : false;\n}\nexport function toChar(bytes, offset) {\n    const array = ArrayBuffer.isView(bytes) ? bytes : Uint8Array.from(bytes);\n    const view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n    const code = view.getUint16(offset, littleEndian);\n    return String.fromCharCode(code);\n}\nexport function toInt16(bytes, offset) {\n    const array = ArrayBuffer.isView(bytes) ? bytes : Uint8Array.from(bytes);\n    const view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n    return view.getInt16(offset, littleEndian);\n}\nexport function toInt32(bytes, offset) {\n    const array = ArrayBuffer.isView(bytes) ? bytes : Uint8Array.from(bytes);\n    const view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n    return view.getInt32(offset, littleEndian);\n}\nexport function toInt64(bytes, offset) {\n    const array = ArrayBuffer.isView(bytes) ? bytes : Uint8Array.from(bytes);\n    const view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n    const lowBits = view.getInt32(offset + (littleEndian ? 0 : 4), littleEndian);\n    const highBits = view.getInt32(offset + (littleEndian ? 4 : 0), littleEndian);\n    return fromBits(lowBits, highBits, false);\n}\nexport function toUInt16(bytes, offset) {\n    const array = ArrayBuffer.isView(bytes) ? bytes : Uint8Array.from(bytes);\n    const view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n    return view.getUint16(offset, littleEndian);\n}\nexport function toUInt32(bytes, offset) {\n    const array = ArrayBuffer.isView(bytes) ? bytes : Uint8Array.from(bytes);\n    const view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n    return view.getUint32(offset, littleEndian);\n}\nexport function toUInt64(bytes, offset) {\n    const array = ArrayBuffer.isView(bytes) ? bytes : Uint8Array.from(bytes);\n    const view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n    const lowBits = view.getUint32(offset + (littleEndian ? 0 : 4), littleEndian);\n    const highBits = view.getUint32(offset + (littleEndian ? 4 : 0), littleEndian);\n    return fromBits(lowBits, highBits, true);\n}\nexport function toSingle(bytes, offset) {\n    const array = ArrayBuffer.isView(bytes) ? bytes : Uint8Array.from(bytes);\n    const view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n    return view.getFloat32(offset, littleEndian);\n}\nexport function toDouble(bytes, offset) {\n    const array = ArrayBuffer.isView(bytes) ? bytes : Uint8Array.from(bytes);\n    const view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n    return view.getFloat64(offset, littleEndian);\n}\nexport function toString(bytes, offset, count) {\n    const array = ArrayBuffer.isView(bytes) ? bytes : Uint8Array.from(bytes);\n    let buffer = new Uint8Array(array.buffer, array.byteOffset, array.byteLength);\n    if (offset != null && count != null) {\n        buffer = buffer.subarray(offset, offset + count);\n    }\n    else if (offset != null) {\n        buffer = buffer.subarray(offset);\n    }\n    return Array.from(buffer).map((b) => (\"0\" + b.toString(16)).slice(-2)).join(\"-\");\n}\n","import { record_type, bool_type, list_type, option_type, class_type } from \"./Reflection.js\";\nimport { some, value as value_1 } from \"./Option.js\";\nimport { toString, List, Record } from \"./Types.js\";\nimport { singleton as singleton_1, collect, empty as empty_1, delay, fold as fold_2, reduce, iterate as iterate_1, toIterator, map as map_1, getEnumerator } from \"./Seq.js\";\nimport { fold as fold_1 } from \"./Array.js\";\nimport { join } from \"./String.js\";\nimport { structuralHash } from \"./Util.js\";\nimport { HashSet__Add_2B595, HashSet_$ctor_Z6150332D } from \"./MutableSet.js\";\n\nexport class SetTreeLeaf$1 {\n    constructor(k) {\n        this.k = k;\n    }\n}\n\nexport function SetTreeLeaf$1$reflection(gen0) {\n    return class_type(\"Set.SetTreeLeaf`1\", [gen0], SetTreeLeaf$1);\n}\n\nexport function SetTreeLeaf$1_$ctor_2B595(k) {\n    return new SetTreeLeaf$1(k);\n}\n\nexport function SetTreeLeaf$1__get_Key(_) {\n    return _.k;\n}\n\nexport class SetTreeNode$1 extends SetTreeLeaf$1 {\n    constructor(v, left, right, h) {\n        super(v);\n        this.left = left;\n        this.right = right;\n        this.h = h;\n    }\n}\n\nexport function SetTreeNode$1$reflection(gen0) {\n    return class_type(\"Set.SetTreeNode`1\", [gen0], SetTreeNode$1, SetTreeLeaf$1$reflection(gen0));\n}\n\nexport function SetTreeNode$1_$ctor_Z6E7BE5F7(v, left, right, h) {\n    return new SetTreeNode$1(v, left, right, h);\n}\n\nexport function SetTreeNode$1__get_Left(_) {\n    return _.left;\n}\n\nexport function SetTreeNode$1__get_Right(_) {\n    return _.right;\n}\n\nexport function SetTreeNode$1__get_Height(_) {\n    return _.h;\n}\n\nexport function SetTreeModule_empty() {\n    return void 0;\n}\n\nexport function SetTreeModule_countAux(t_mut, acc_mut) {\n    SetTreeModule_countAux:\n    while (true) {\n        const t = t_mut, acc = acc_mut;\n        if (t != null) {\n            const t2 = t;\n            if (t2 instanceof SetTreeNode$1) {\n                t_mut = SetTreeNode$1__get_Left(t2);\n                acc_mut = SetTreeModule_countAux(SetTreeNode$1__get_Right(t2), acc + 1);\n                continue SetTreeModule_countAux;\n            }\n            else {\n                return (acc + 1) | 0;\n            }\n        }\n        else {\n            return acc | 0;\n        }\n        break;\n    }\n}\n\nexport function SetTreeModule_count(s) {\n    return SetTreeModule_countAux(s, 0);\n}\n\nexport function SetTreeModule_mk(l, k, r) {\n    let hl;\n    const t = l;\n    if (t != null) {\n        const t2 = t;\n        hl = ((t2 instanceof SetTreeNode$1) ? SetTreeNode$1__get_Height(t2) : 1);\n    }\n    else {\n        hl = 0;\n    }\n    let hr;\n    const t_1 = r;\n    if (t_1 != null) {\n        const t2_1 = t_1;\n        hr = ((t2_1 instanceof SetTreeNode$1) ? SetTreeNode$1__get_Height(t2_1) : 1);\n    }\n    else {\n        hr = 0;\n    }\n    const m = ((hl < hr) ? hr : hl) | 0;\n    if (m === 0) {\n        return SetTreeLeaf$1_$ctor_2B595(k);\n    }\n    else {\n        return SetTreeNode$1_$ctor_Z6E7BE5F7(k, l, r, m + 1);\n    }\n}\n\nexport function SetTreeModule_rebalance(t1, v, t2) {\n    let t_2, t2_3, t_3, t2_4;\n    let t1h;\n    const t = t1;\n    if (t != null) {\n        const t2_1 = t;\n        t1h = ((t2_1 instanceof SetTreeNode$1) ? SetTreeNode$1__get_Height(t2_1) : 1);\n    }\n    else {\n        t1h = 0;\n    }\n    let t2h;\n    const t_1 = t2;\n    if (t_1 != null) {\n        const t2_2 = t_1;\n        t2h = ((t2_2 instanceof SetTreeNode$1) ? SetTreeNode$1__get_Height(t2_2) : 1);\n    }\n    else {\n        t2h = 0;\n    }\n    if (t2h > (t1h + 2)) {\n        const matchValue = value_1(t2);\n        if (matchValue instanceof SetTreeNode$1) {\n            if ((t_2 = SetTreeNode$1__get_Left(matchValue), (t_2 != null) ? (t2_3 = t_2, (t2_3 instanceof SetTreeNode$1) ? SetTreeNode$1__get_Height(t2_3) : 1) : 0) > (t1h + 1)) {\n                const matchValue_1 = value_1(SetTreeNode$1__get_Left(matchValue));\n                if (matchValue_1 instanceof SetTreeNode$1) {\n                    return SetTreeModule_mk(SetTreeModule_mk(t1, v, SetTreeNode$1__get_Left(matchValue_1)), SetTreeLeaf$1__get_Key(matchValue_1), SetTreeModule_mk(SetTreeNode$1__get_Right(matchValue_1), SetTreeLeaf$1__get_Key(matchValue), SetTreeNode$1__get_Right(matchValue)));\n                }\n                else {\n                    throw (new Error(\"internal error: Set.rebalance\"));\n                }\n            }\n            else {\n                return SetTreeModule_mk(SetTreeModule_mk(t1, v, SetTreeNode$1__get_Left(matchValue)), SetTreeLeaf$1__get_Key(matchValue), SetTreeNode$1__get_Right(matchValue));\n            }\n        }\n        else {\n            throw (new Error(\"internal error: Set.rebalance\"));\n        }\n    }\n    else if (t1h > (t2h + 2)) {\n        const matchValue_2 = value_1(t1);\n        if (matchValue_2 instanceof SetTreeNode$1) {\n            if ((t_3 = SetTreeNode$1__get_Right(matchValue_2), (t_3 != null) ? (t2_4 = t_3, (t2_4 instanceof SetTreeNode$1) ? SetTreeNode$1__get_Height(t2_4) : 1) : 0) > (t2h + 1)) {\n                const matchValue_3 = value_1(SetTreeNode$1__get_Right(matchValue_2));\n                if (matchValue_3 instanceof SetTreeNode$1) {\n                    return SetTreeModule_mk(SetTreeModule_mk(SetTreeNode$1__get_Left(matchValue_2), SetTreeLeaf$1__get_Key(matchValue_2), SetTreeNode$1__get_Left(matchValue_3)), SetTreeLeaf$1__get_Key(matchValue_3), SetTreeModule_mk(SetTreeNode$1__get_Right(matchValue_3), v, t2));\n                }\n                else {\n                    throw (new Error(\"internal error: Set.rebalance\"));\n                }\n            }\n            else {\n                return SetTreeModule_mk(SetTreeNode$1__get_Left(matchValue_2), SetTreeLeaf$1__get_Key(matchValue_2), SetTreeModule_mk(SetTreeNode$1__get_Right(matchValue_2), v, t2));\n            }\n        }\n        else {\n            throw (new Error(\"internal error: Set.rebalance\"));\n        }\n    }\n    else {\n        return SetTreeModule_mk(t1, v, t2);\n    }\n}\n\nexport function SetTreeModule_add(comparer, k, t) {\n    if (t != null) {\n        const t2 = t;\n        const c = comparer.Compare(k, SetTreeLeaf$1__get_Key(t2)) | 0;\n        if (t2 instanceof SetTreeNode$1) {\n            if (c < 0) {\n                return SetTreeModule_rebalance(SetTreeModule_add(comparer, k, SetTreeNode$1__get_Left(t2)), SetTreeLeaf$1__get_Key(t2), SetTreeNode$1__get_Right(t2));\n            }\n            else if (c === 0) {\n                return t;\n            }\n            else {\n                return SetTreeModule_rebalance(SetTreeNode$1__get_Left(t2), SetTreeLeaf$1__get_Key(t2), SetTreeModule_add(comparer, k, SetTreeNode$1__get_Right(t2)));\n            }\n        }\n        else {\n            const c_1 = comparer.Compare(k, SetTreeLeaf$1__get_Key(t2)) | 0;\n            if (c_1 < 0) {\n                return SetTreeNode$1_$ctor_Z6E7BE5F7(k, SetTreeModule_empty(), t, 2);\n            }\n            else if (c_1 === 0) {\n                return t;\n            }\n            else {\n                return SetTreeNode$1_$ctor_Z6E7BE5F7(k, t, SetTreeModule_empty(), 2);\n            }\n        }\n    }\n    else {\n        return SetTreeLeaf$1_$ctor_2B595(k);\n    }\n}\n\nexport function SetTreeModule_balance(comparer, t1, k, t2) {\n    if (t1 != null) {\n        const t1$0027 = t1;\n        if (t2 != null) {\n            const t2$0027 = t2;\n            if (t1$0027 instanceof SetTreeNode$1) {\n                if (t2$0027 instanceof SetTreeNode$1) {\n                    if ((SetTreeNode$1__get_Height(t1$0027) + 2) < SetTreeNode$1__get_Height(t2$0027)) {\n                        return SetTreeModule_rebalance(SetTreeModule_balance(comparer, t1, k, SetTreeNode$1__get_Left(t2$0027)), SetTreeLeaf$1__get_Key(t2$0027), SetTreeNode$1__get_Right(t2$0027));\n                    }\n                    else if ((SetTreeNode$1__get_Height(t2$0027) + 2) < SetTreeNode$1__get_Height(t1$0027)) {\n                        return SetTreeModule_rebalance(SetTreeNode$1__get_Left(t1$0027), SetTreeLeaf$1__get_Key(t1$0027), SetTreeModule_balance(comparer, SetTreeNode$1__get_Right(t1$0027), k, t2));\n                    }\n                    else {\n                        return SetTreeModule_mk(t1, k, t2);\n                    }\n                }\n                else {\n                    return SetTreeModule_add(comparer, k, SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2$0027), t1));\n                }\n            }\n            else {\n                return SetTreeModule_add(comparer, k, SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t1$0027), t2));\n            }\n        }\n        else {\n            return SetTreeModule_add(comparer, k, t1);\n        }\n    }\n    else {\n        return SetTreeModule_add(comparer, k, t2);\n    }\n}\n\nexport function SetTreeModule_split(comparer, pivot, t) {\n    if (t != null) {\n        const t2 = t;\n        if (t2 instanceof SetTreeNode$1) {\n            const c = comparer.Compare(pivot, SetTreeLeaf$1__get_Key(t2)) | 0;\n            if (c < 0) {\n                const patternInput = SetTreeModule_split(comparer, pivot, SetTreeNode$1__get_Left(t2));\n                return [patternInput[0], patternInput[1], SetTreeModule_balance(comparer, patternInput[2], SetTreeLeaf$1__get_Key(t2), SetTreeNode$1__get_Right(t2))];\n            }\n            else if (c === 0) {\n                return [SetTreeNode$1__get_Left(t2), true, SetTreeNode$1__get_Right(t2)];\n            }\n            else {\n                const patternInput_1 = SetTreeModule_split(comparer, pivot, SetTreeNode$1__get_Right(t2));\n                return [SetTreeModule_balance(comparer, SetTreeNode$1__get_Left(t2), SetTreeLeaf$1__get_Key(t2), patternInput_1[0]), patternInput_1[1], patternInput_1[2]];\n            }\n        }\n        else {\n            const c_1 = comparer.Compare(SetTreeLeaf$1__get_Key(t2), pivot) | 0;\n            if (c_1 < 0) {\n                return [t, false, SetTreeModule_empty()];\n            }\n            else if (c_1 === 0) {\n                return [SetTreeModule_empty(), true, SetTreeModule_empty()];\n            }\n            else {\n                return [SetTreeModule_empty(), false, t];\n            }\n        }\n    }\n    else {\n        return [SetTreeModule_empty(), false, SetTreeModule_empty()];\n    }\n}\n\nexport function SetTreeModule_spliceOutSuccessor(t) {\n    if (t != null) {\n        const t2 = t;\n        if (t2 instanceof SetTreeNode$1) {\n            if (SetTreeNode$1__get_Left(t2) == null) {\n                return [SetTreeLeaf$1__get_Key(t2), SetTreeNode$1__get_Right(t2)];\n            }\n            else {\n                const patternInput = SetTreeModule_spliceOutSuccessor(SetTreeNode$1__get_Left(t2));\n                return [patternInput[0], SetTreeModule_mk(patternInput[1], SetTreeLeaf$1__get_Key(t2), SetTreeNode$1__get_Right(t2))];\n            }\n        }\n        else {\n            return [SetTreeLeaf$1__get_Key(t2), SetTreeModule_empty()];\n        }\n    }\n    else {\n        throw (new Error(\"internal error: Set.spliceOutSuccessor\"));\n    }\n}\n\nexport function SetTreeModule_remove(comparer, k, t) {\n    if (t != null) {\n        const t2 = t;\n        const c = comparer.Compare(k, SetTreeLeaf$1__get_Key(t2)) | 0;\n        if (t2 instanceof SetTreeNode$1) {\n            if (c < 0) {\n                return SetTreeModule_rebalance(SetTreeModule_remove(comparer, k, SetTreeNode$1__get_Left(t2)), SetTreeLeaf$1__get_Key(t2), SetTreeNode$1__get_Right(t2));\n            }\n            else if (c === 0) {\n                if (SetTreeNode$1__get_Left(t2) == null) {\n                    return SetTreeNode$1__get_Right(t2);\n                }\n                else if (SetTreeNode$1__get_Right(t2) == null) {\n                    return SetTreeNode$1__get_Left(t2);\n                }\n                else {\n                    const patternInput = SetTreeModule_spliceOutSuccessor(SetTreeNode$1__get_Right(t2));\n                    return SetTreeModule_mk(SetTreeNode$1__get_Left(t2), patternInput[0], patternInput[1]);\n                }\n            }\n            else {\n                return SetTreeModule_rebalance(SetTreeNode$1__get_Left(t2), SetTreeLeaf$1__get_Key(t2), SetTreeModule_remove(comparer, k, SetTreeNode$1__get_Right(t2)));\n            }\n        }\n        else if (c === 0) {\n            return SetTreeModule_empty();\n        }\n        else {\n            return t;\n        }\n    }\n    else {\n        return t;\n    }\n}\n\nexport function SetTreeModule_mem(comparer_mut, k_mut, t_mut) {\n    SetTreeModule_mem:\n    while (true) {\n        const comparer = comparer_mut, k = k_mut, t = t_mut;\n        if (t != null) {\n            const t2 = t;\n            const c = comparer.Compare(k, SetTreeLeaf$1__get_Key(t2)) | 0;\n            if (t2 instanceof SetTreeNode$1) {\n                if (c < 0) {\n                    comparer_mut = comparer;\n                    k_mut = k;\n                    t_mut = SetTreeNode$1__get_Left(t2);\n                    continue SetTreeModule_mem;\n                }\n                else if (c === 0) {\n                    return true;\n                }\n                else {\n                    comparer_mut = comparer;\n                    k_mut = k;\n                    t_mut = SetTreeNode$1__get_Right(t2);\n                    continue SetTreeModule_mem;\n                }\n            }\n            else {\n                return c === 0;\n            }\n        }\n        else {\n            return false;\n        }\n        break;\n    }\n}\n\nexport function SetTreeModule_iter(f_mut, t_mut) {\n    SetTreeModule_iter:\n    while (true) {\n        const f = f_mut, t = t_mut;\n        if (t != null) {\n            const t2 = t;\n            if (t2 instanceof SetTreeNode$1) {\n                SetTreeModule_iter(f, SetTreeNode$1__get_Left(t2));\n                f(SetTreeLeaf$1__get_Key(t2));\n                f_mut = f;\n                t_mut = SetTreeNode$1__get_Right(t2);\n                continue SetTreeModule_iter;\n            }\n            else {\n                f(SetTreeLeaf$1__get_Key(t2));\n            }\n        }\n        break;\n    }\n}\n\nexport function SetTreeModule_foldBackOpt(f_mut, t_mut, x_mut) {\n    SetTreeModule_foldBackOpt:\n    while (true) {\n        const f = f_mut, t = t_mut, x = x_mut;\n        if (t != null) {\n            const t2 = t;\n            if (t2 instanceof SetTreeNode$1) {\n                f_mut = f;\n                t_mut = SetTreeNode$1__get_Left(t2);\n                x_mut = f(SetTreeLeaf$1__get_Key(t2), SetTreeModule_foldBackOpt(f, SetTreeNode$1__get_Right(t2), x));\n                continue SetTreeModule_foldBackOpt;\n            }\n            else {\n                return f(SetTreeLeaf$1__get_Key(t2), x);\n            }\n        }\n        else {\n            return x;\n        }\n        break;\n    }\n}\n\nexport function SetTreeModule_foldBack(f, m, x) {\n    return SetTreeModule_foldBackOpt(f, m, x);\n}\n\nexport function SetTreeModule_foldOpt(f_mut, x_mut, t_mut) {\n    SetTreeModule_foldOpt:\n    while (true) {\n        const f = f_mut, x = x_mut, t = t_mut;\n        if (t != null) {\n            const t2 = t;\n            if (t2 instanceof SetTreeNode$1) {\n                f_mut = f;\n                x_mut = f(SetTreeModule_foldOpt(f, x, SetTreeNode$1__get_Left(t2)), SetTreeLeaf$1__get_Key(t2));\n                t_mut = SetTreeNode$1__get_Right(t2);\n                continue SetTreeModule_foldOpt;\n            }\n            else {\n                return f(x, SetTreeLeaf$1__get_Key(t2));\n            }\n        }\n        else {\n            return x;\n        }\n        break;\n    }\n}\n\nexport function SetTreeModule_fold(f, x, m) {\n    return SetTreeModule_foldOpt(f, x, m);\n}\n\nexport function SetTreeModule_forall(f_mut, t_mut) {\n    SetTreeModule_forall:\n    while (true) {\n        const f = f_mut, t = t_mut;\n        if (t != null) {\n            const t2 = t;\n            if (t2 instanceof SetTreeNode$1) {\n                if (f(SetTreeLeaf$1__get_Key(t2)) ? SetTreeModule_forall(f, SetTreeNode$1__get_Left(t2)) : false) {\n                    f_mut = f;\n                    t_mut = SetTreeNode$1__get_Right(t2);\n                    continue SetTreeModule_forall;\n                }\n                else {\n                    return false;\n                }\n            }\n            else {\n                return f(SetTreeLeaf$1__get_Key(t2));\n            }\n        }\n        else {\n            return true;\n        }\n        break;\n    }\n}\n\nexport function SetTreeModule_exists(f_mut, t_mut) {\n    SetTreeModule_exists:\n    while (true) {\n        const f = f_mut, t = t_mut;\n        if (t != null) {\n            const t2 = t;\n            if (t2 instanceof SetTreeNode$1) {\n                if (f(SetTreeLeaf$1__get_Key(t2)) ? true : SetTreeModule_exists(f, SetTreeNode$1__get_Left(t2))) {\n                    return true;\n                }\n                else {\n                    f_mut = f;\n                    t_mut = SetTreeNode$1__get_Right(t2);\n                    continue SetTreeModule_exists;\n                }\n            }\n            else {\n                return f(SetTreeLeaf$1__get_Key(t2));\n            }\n        }\n        else {\n            return false;\n        }\n        break;\n    }\n}\n\nexport function SetTreeModule_subset(comparer, a, b) {\n    return SetTreeModule_forall((x) => SetTreeModule_mem(comparer, x, b), a);\n}\n\nexport function SetTreeModule_properSubset(comparer, a, b) {\n    if (SetTreeModule_forall((x) => SetTreeModule_mem(comparer, x, b), a)) {\n        return SetTreeModule_exists((x_1) => (!SetTreeModule_mem(comparer, x_1, a)), b);\n    }\n    else {\n        return false;\n    }\n}\n\nexport function SetTreeModule_filterAux(comparer_mut, f_mut, t_mut, acc_mut) {\n    SetTreeModule_filterAux:\n    while (true) {\n        const comparer = comparer_mut, f = f_mut, t = t_mut, acc = acc_mut;\n        if (t != null) {\n            const t2 = t;\n            if (t2 instanceof SetTreeNode$1) {\n                const acc_1 = f(SetTreeLeaf$1__get_Key(t2)) ? SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2), acc) : acc;\n                comparer_mut = comparer;\n                f_mut = f;\n                t_mut = SetTreeNode$1__get_Left(t2);\n                acc_mut = SetTreeModule_filterAux(comparer, f, SetTreeNode$1__get_Right(t2), acc_1);\n                continue SetTreeModule_filterAux;\n            }\n            else if (f(SetTreeLeaf$1__get_Key(t2))) {\n                return SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2), acc);\n            }\n            else {\n                return acc;\n            }\n        }\n        else {\n            return acc;\n        }\n        break;\n    }\n}\n\nexport function SetTreeModule_filter(comparer, f, s) {\n    return SetTreeModule_filterAux(comparer, f, s, SetTreeModule_empty());\n}\n\nexport function SetTreeModule_diffAux(comparer_mut, t_mut, acc_mut) {\n    SetTreeModule_diffAux:\n    while (true) {\n        const comparer = comparer_mut, t = t_mut, acc = acc_mut;\n        if (acc == null) {\n            return acc;\n        }\n        else if (t != null) {\n            const t2 = t;\n            if (t2 instanceof SetTreeNode$1) {\n                comparer_mut = comparer;\n                t_mut = SetTreeNode$1__get_Left(t2);\n                acc_mut = SetTreeModule_diffAux(comparer, SetTreeNode$1__get_Right(t2), SetTreeModule_remove(comparer, SetTreeLeaf$1__get_Key(t2), acc));\n                continue SetTreeModule_diffAux;\n            }\n            else {\n                return SetTreeModule_remove(comparer, SetTreeLeaf$1__get_Key(t2), acc);\n            }\n        }\n        else {\n            return acc;\n        }\n        break;\n    }\n}\n\nexport function SetTreeModule_diff(comparer, a, b) {\n    return SetTreeModule_diffAux(comparer, b, a);\n}\n\nexport function SetTreeModule_union(comparer, t1, t2) {\n    if (t1 != null) {\n        const t1$0027 = t1;\n        if (t2 != null) {\n            const t2$0027 = t2;\n            if (t1$0027 instanceof SetTreeNode$1) {\n                if (t2$0027 instanceof SetTreeNode$1) {\n                    if (SetTreeNode$1__get_Height(t1$0027) > SetTreeNode$1__get_Height(t2$0027)) {\n                        const patternInput = SetTreeModule_split(comparer, SetTreeLeaf$1__get_Key(t1$0027), t2);\n                        return SetTreeModule_balance(comparer, SetTreeModule_union(comparer, SetTreeNode$1__get_Left(t1$0027), patternInput[0]), SetTreeLeaf$1__get_Key(t1$0027), SetTreeModule_union(comparer, SetTreeNode$1__get_Right(t1$0027), patternInput[2]));\n                    }\n                    else {\n                        const patternInput_1 = SetTreeModule_split(comparer, SetTreeLeaf$1__get_Key(t2$0027), t1);\n                        return SetTreeModule_balance(comparer, SetTreeModule_union(comparer, SetTreeNode$1__get_Left(t2$0027), patternInput_1[0]), SetTreeLeaf$1__get_Key(t2$0027), SetTreeModule_union(comparer, SetTreeNode$1__get_Right(t2$0027), patternInput_1[2]));\n                    }\n                }\n                else {\n                    return SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2$0027), t1);\n                }\n            }\n            else {\n                return SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t1$0027), t2);\n            }\n        }\n        else {\n            return t1;\n        }\n    }\n    else {\n        return t2;\n    }\n}\n\nexport function SetTreeModule_intersectionAux(comparer_mut, b_mut, t_mut, acc_mut) {\n    SetTreeModule_intersectionAux:\n    while (true) {\n        const comparer = comparer_mut, b = b_mut, t = t_mut, acc = acc_mut;\n        if (t != null) {\n            const t2 = t;\n            if (t2 instanceof SetTreeNode$1) {\n                const acc_1 = SetTreeModule_intersectionAux(comparer, b, SetTreeNode$1__get_Right(t2), acc);\n                const acc_2 = SetTreeModule_mem(comparer, SetTreeLeaf$1__get_Key(t2), b) ? SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2), acc_1) : acc_1;\n                comparer_mut = comparer;\n                b_mut = b;\n                t_mut = SetTreeNode$1__get_Left(t2);\n                acc_mut = acc_2;\n                continue SetTreeModule_intersectionAux;\n            }\n            else if (SetTreeModule_mem(comparer, SetTreeLeaf$1__get_Key(t2), b)) {\n                return SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2), acc);\n            }\n            else {\n                return acc;\n            }\n        }\n        else {\n            return acc;\n        }\n        break;\n    }\n}\n\nexport function SetTreeModule_intersection(comparer, a, b) {\n    return SetTreeModule_intersectionAux(comparer, b, a, SetTreeModule_empty());\n}\n\nexport function SetTreeModule_partition1(comparer, f, k, acc1, acc2) {\n    if (f(k)) {\n        return [SetTreeModule_add(comparer, k, acc1), acc2];\n    }\n    else {\n        return [acc1, SetTreeModule_add(comparer, k, acc2)];\n    }\n}\n\nexport function SetTreeModule_partitionAux(comparer_mut, f_mut, t_mut, acc_0_mut, acc_1_mut) {\n    SetTreeModule_partitionAux:\n    while (true) {\n        const comparer = comparer_mut, f = f_mut, t = t_mut, acc_0 = acc_0_mut, acc_1 = acc_1_mut;\n        const acc = [acc_0, acc_1];\n        if (t != null) {\n            const t2 = t;\n            if (t2 instanceof SetTreeNode$1) {\n                const acc_2 = SetTreeModule_partitionAux(comparer, f, SetTreeNode$1__get_Right(t2), acc[0], acc[1]);\n                const acc_3 = SetTreeModule_partition1(comparer, f, SetTreeLeaf$1__get_Key(t2), acc_2[0], acc_2[1]);\n                comparer_mut = comparer;\n                f_mut = f;\n                t_mut = SetTreeNode$1__get_Left(t2);\n                acc_0_mut = acc_3[0];\n                acc_1_mut = acc_3[1];\n                continue SetTreeModule_partitionAux;\n            }\n            else {\n                return SetTreeModule_partition1(comparer, f, SetTreeLeaf$1__get_Key(t2), acc[0], acc[1]);\n            }\n        }\n        else {\n            return acc;\n        }\n        break;\n    }\n}\n\nexport function SetTreeModule_partition(comparer, f, s) {\n    return SetTreeModule_partitionAux(comparer, f, s, SetTreeModule_empty(), SetTreeModule_empty());\n}\n\nexport function SetTreeModule_minimumElementAux(t_mut, n_mut) {\n    SetTreeModule_minimumElementAux:\n    while (true) {\n        const t = t_mut, n = n_mut;\n        if (t != null) {\n            const t2 = t;\n            if (t2 instanceof SetTreeNode$1) {\n                t_mut = SetTreeNode$1__get_Left(t2);\n                n_mut = SetTreeLeaf$1__get_Key(t2);\n                continue SetTreeModule_minimumElementAux;\n            }\n            else {\n                return SetTreeLeaf$1__get_Key(t2);\n            }\n        }\n        else {\n            return n;\n        }\n        break;\n    }\n}\n\nexport function SetTreeModule_minimumElementOpt(t) {\n    if (t != null) {\n        const t2 = t;\n        if (t2 instanceof SetTreeNode$1) {\n            return some(SetTreeModule_minimumElementAux(SetTreeNode$1__get_Left(t2), SetTreeLeaf$1__get_Key(t2)));\n        }\n        else {\n            return some(SetTreeLeaf$1__get_Key(t2));\n        }\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function SetTreeModule_maximumElementAux(t_mut, n_mut) {\n    SetTreeModule_maximumElementAux:\n    while (true) {\n        const t = t_mut, n = n_mut;\n        if (t != null) {\n            const t2 = t;\n            if (t2 instanceof SetTreeNode$1) {\n                t_mut = SetTreeNode$1__get_Right(t2);\n                n_mut = SetTreeLeaf$1__get_Key(t2);\n                continue SetTreeModule_maximumElementAux;\n            }\n            else {\n                return SetTreeLeaf$1__get_Key(t2);\n            }\n        }\n        else {\n            return n;\n        }\n        break;\n    }\n}\n\nexport function SetTreeModule_maximumElementOpt(t) {\n    if (t != null) {\n        const t2 = t;\n        if (t2 instanceof SetTreeNode$1) {\n            return some(SetTreeModule_maximumElementAux(SetTreeNode$1__get_Right(t2), SetTreeLeaf$1__get_Key(t2)));\n        }\n        else {\n            return some(SetTreeLeaf$1__get_Key(t2));\n        }\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function SetTreeModule_minimumElement(s) {\n    const matchValue = SetTreeModule_minimumElementOpt(s);\n    if (matchValue == null) {\n        throw (new Error(\"Set contains no elements\"));\n    }\n    else {\n        return value_1(matchValue);\n    }\n}\n\nexport function SetTreeModule_maximumElement(s) {\n    const matchValue = SetTreeModule_maximumElementOpt(s);\n    if (matchValue == null) {\n        throw (new Error(\"Set contains no elements\"));\n    }\n    else {\n        return value_1(matchValue);\n    }\n}\n\nexport class SetTreeModule_SetIterator$1 extends Record {\n    constructor(stack, started) {\n        super();\n        this.stack = stack;\n        this.started = started;\n    }\n}\n\nexport function SetTreeModule_SetIterator$1$reflection(gen0) {\n    return record_type(\"Set.SetTreeModule.SetIterator`1\", [gen0], SetTreeModule_SetIterator$1, () => [[\"stack\", list_type(option_type(SetTreeLeaf$1$reflection(gen0)))], [\"started\", bool_type]]);\n}\n\nexport function SetTreeModule_collapseLHS(stack_mut) {\n    SetTreeModule_collapseLHS:\n    while (true) {\n        const stack = stack_mut;\n        if (stack.tail != null) {\n            const x = stack.head;\n            const rest = stack.tail;\n            if (x != null) {\n                const x2 = x;\n                if (x2 instanceof SetTreeNode$1) {\n                    stack_mut = (new List(SetTreeNode$1__get_Left(x2), new List(SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2)), new List(SetTreeNode$1__get_Right(x2), rest))));\n                    continue SetTreeModule_collapseLHS;\n                }\n                else {\n                    return stack;\n                }\n            }\n            else {\n                stack_mut = rest;\n                continue SetTreeModule_collapseLHS;\n            }\n        }\n        else {\n            return new List();\n        }\n        break;\n    }\n}\n\nexport function SetTreeModule_mkIterator(s) {\n    return new SetTreeModule_SetIterator$1(SetTreeModule_collapseLHS(new List(s, new List())), false);\n}\n\nexport function SetTreeModule_notStarted() {\n    throw (new Error(\"Enumeration not started\"));\n}\n\nexport function SetTreeModule_alreadyFinished() {\n    throw (new Error(\"Enumeration already started\"));\n}\n\nexport function SetTreeModule_current(i) {\n    if (i.started) {\n        const matchValue = i.stack;\n        if (matchValue.tail == null) {\n            return SetTreeModule_alreadyFinished();\n        }\n        else if (matchValue.head != null) {\n            const t = matchValue.head;\n            return SetTreeLeaf$1__get_Key(t);\n        }\n        else {\n            throw (new Error(\"Please report error: Set iterator, unexpected stack for current\"));\n        }\n    }\n    else {\n        return SetTreeModule_notStarted();\n    }\n}\n\nexport function SetTreeModule_moveNext(i) {\n    if (i.started) {\n        const matchValue = i.stack;\n        if (matchValue.tail != null) {\n            if (matchValue.head != null) {\n                const t = matchValue.head;\n                if (t instanceof SetTreeNode$1) {\n                    throw (new Error(\"Please report error: Set iterator, unexpected stack for moveNext\"));\n                }\n                else {\n                    i.stack = SetTreeModule_collapseLHS(matchValue.tail);\n                    return !(i.stack.tail == null);\n                }\n            }\n            else {\n                throw (new Error(\"Please report error: Set iterator, unexpected stack for moveNext\"));\n            }\n        }\n        else {\n            return false;\n        }\n    }\n    else {\n        i.started = true;\n        return !(i.stack.tail == null);\n    }\n}\n\nexport function SetTreeModule_mkIEnumerator(s) {\n    let i = SetTreeModule_mkIterator(s);\n    return {\n        [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\n            return SetTreeModule_current(i);\n        },\n        [\"System.Collections.IEnumerator.get_Current\"]() {\n            return SetTreeModule_current(i);\n        },\n        [\"System.Collections.IEnumerator.MoveNext\"]() {\n            return SetTreeModule_moveNext(i);\n        },\n        [\"System.Collections.IEnumerator.Reset\"]() {\n            i = SetTreeModule_mkIterator(s);\n        },\n        Dispose() {\n        },\n    };\n}\n\nexport function SetTreeModule_compareStacks(comparer_mut, l1_mut, l2_mut) {\n    SetTreeModule_compareStacks:\n    while (true) {\n        const comparer = comparer_mut, l1 = l1_mut, l2 = l2_mut;\n        const matchValue = [l1, l2];\n        if (matchValue[0].tail != null) {\n            if (matchValue[1].tail != null) {\n                if (matchValue[1].head != null) {\n                    if (matchValue[0].head != null) {\n                        const x1_3 = matchValue[0].head;\n                        const x2_3 = matchValue[1].head;\n                        if (x1_3 instanceof SetTreeNode$1) {\n                            if (SetTreeNode$1__get_Left(x1_3) == null) {\n                                if (x2_3 instanceof SetTreeNode$1) {\n                                    if (SetTreeNode$1__get_Left(x2_3) == null) {\n                                        const c = comparer.Compare(SetTreeLeaf$1__get_Key(x1_3), SetTreeLeaf$1__get_Key(x2_3)) | 0;\n                                        if (c !== 0) {\n                                            return c | 0;\n                                        }\n                                        else {\n                                            comparer_mut = comparer;\n                                            l1_mut = (new List(SetTreeNode$1__get_Right(x1_3), matchValue[0].tail));\n                                            l2_mut = (new List(SetTreeNode$1__get_Right(x2_3), matchValue[1].tail));\n                                            continue SetTreeModule_compareStacks;\n                                        }\n                                    }\n                                    else {\n                                        const matchValue_3 = [l1, l2];\n                                        let pattern_matching_result, t1_6, x1_4, t2_6, x2_4;\n                                        if (matchValue_3[0].tail != null) {\n                                            if (matchValue_3[0].head != null) {\n                                                pattern_matching_result = 0;\n                                                t1_6 = matchValue_3[0].tail;\n                                                x1_4 = matchValue_3[0].head;\n                                            }\n                                            else if (matchValue_3[1].tail != null) {\n                                                if (matchValue_3[1].head != null) {\n                                                    pattern_matching_result = 1;\n                                                    t2_6 = matchValue_3[1].tail;\n                                                    x2_4 = matchValue_3[1].head;\n                                                }\n                                                else {\n                                                    pattern_matching_result = 2;\n                                                }\n                                            }\n                                            else {\n                                                pattern_matching_result = 2;\n                                            }\n                                        }\n                                        else if (matchValue_3[1].tail != null) {\n                                            if (matchValue_3[1].head != null) {\n                                                pattern_matching_result = 1;\n                                                t2_6 = matchValue_3[1].tail;\n                                                x2_4 = matchValue_3[1].head;\n                                            }\n                                            else {\n                                                pattern_matching_result = 2;\n                                            }\n                                        }\n                                        else {\n                                            pattern_matching_result = 2;\n                                        }\n                                        switch (pattern_matching_result) {\n                                            case 0: {\n                                                if (x1_4 instanceof SetTreeNode$1) {\n                                                    comparer_mut = comparer;\n                                                    l1_mut = (new List(SetTreeNode$1__get_Left(x1_4), new List(SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x1_4), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1_4), 0), t1_6)));\n                                                    l2_mut = l2;\n                                                    continue SetTreeModule_compareStacks;\n                                                }\n                                                else {\n                                                    comparer_mut = comparer;\n                                                    l1_mut = (new List(SetTreeModule_empty(), new List(SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1_4)), t1_6)));\n                                                    l2_mut = l2;\n                                                    continue SetTreeModule_compareStacks;\n                                                }\n                                            }\n                                            case 1: {\n                                                if (x2_4 instanceof SetTreeNode$1) {\n                                                    comparer_mut = comparer;\n                                                    l1_mut = l1;\n                                                    l2_mut = (new List(SetTreeNode$1__get_Left(x2_4), new List(SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x2_4), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2_4), 0), t2_6)));\n                                                    continue SetTreeModule_compareStacks;\n                                                }\n                                                else {\n                                                    comparer_mut = comparer;\n                                                    l1_mut = l1;\n                                                    l2_mut = (new List(SetTreeModule_empty(), new List(SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_4)), t2_6)));\n                                                    continue SetTreeModule_compareStacks;\n                                                }\n                                            }\n                                            case 2: {\n                                                throw (new Error(\"unexpected state in SetTree.compareStacks\"));\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    const c_1 = comparer.Compare(SetTreeLeaf$1__get_Key(x1_3), SetTreeLeaf$1__get_Key(x2_3)) | 0;\n                                    if (c_1 !== 0) {\n                                        return c_1 | 0;\n                                    }\n                                    else {\n                                        comparer_mut = comparer;\n                                        l1_mut = (new List(SetTreeNode$1__get_Right(x1_3), matchValue[0].tail));\n                                        l2_mut = (new List(SetTreeModule_empty(), matchValue[1].tail));\n                                        continue SetTreeModule_compareStacks;\n                                    }\n                                }\n                            }\n                            else {\n                                const matchValue_4 = [l1, l2];\n                                let pattern_matching_result_1, t1_7, x1_5, t2_7, x2_5;\n                                if (matchValue_4[0].tail != null) {\n                                    if (matchValue_4[0].head != null) {\n                                        pattern_matching_result_1 = 0;\n                                        t1_7 = matchValue_4[0].tail;\n                                        x1_5 = matchValue_4[0].head;\n                                    }\n                                    else if (matchValue_4[1].tail != null) {\n                                        if (matchValue_4[1].head != null) {\n                                            pattern_matching_result_1 = 1;\n                                            t2_7 = matchValue_4[1].tail;\n                                            x2_5 = matchValue_4[1].head;\n                                        }\n                                        else {\n                                            pattern_matching_result_1 = 2;\n                                        }\n                                    }\n                                    else {\n                                        pattern_matching_result_1 = 2;\n                                    }\n                                }\n                                else if (matchValue_4[1].tail != null) {\n                                    if (matchValue_4[1].head != null) {\n                                        pattern_matching_result_1 = 1;\n                                        t2_7 = matchValue_4[1].tail;\n                                        x2_5 = matchValue_4[1].head;\n                                    }\n                                    else {\n                                        pattern_matching_result_1 = 2;\n                                    }\n                                }\n                                else {\n                                    pattern_matching_result_1 = 2;\n                                }\n                                switch (pattern_matching_result_1) {\n                                    case 0: {\n                                        if (x1_5 instanceof SetTreeNode$1) {\n                                            comparer_mut = comparer;\n                                            l1_mut = (new List(SetTreeNode$1__get_Left(x1_5), new List(SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x1_5), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1_5), 0), t1_7)));\n                                            l2_mut = l2;\n                                            continue SetTreeModule_compareStacks;\n                                        }\n                                        else {\n                                            comparer_mut = comparer;\n                                            l1_mut = (new List(SetTreeModule_empty(), new List(SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1_5)), t1_7)));\n                                            l2_mut = l2;\n                                            continue SetTreeModule_compareStacks;\n                                        }\n                                    }\n                                    case 1: {\n                                        if (x2_5 instanceof SetTreeNode$1) {\n                                            comparer_mut = comparer;\n                                            l1_mut = l1;\n                                            l2_mut = (new List(SetTreeNode$1__get_Left(x2_5), new List(SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x2_5), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2_5), 0), t2_7)));\n                                            continue SetTreeModule_compareStacks;\n                                        }\n                                        else {\n                                            comparer_mut = comparer;\n                                            l1_mut = l1;\n                                            l2_mut = (new List(SetTreeModule_empty(), new List(SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_5)), t2_7)));\n                                            continue SetTreeModule_compareStacks;\n                                        }\n                                    }\n                                    case 2: {\n                                        throw (new Error(\"unexpected state in SetTree.compareStacks\"));\n                                    }\n                                }\n                            }\n                        }\n                        else if (x2_3 instanceof SetTreeNode$1) {\n                            if (SetTreeNode$1__get_Left(x2_3) == null) {\n                                const c_2 = comparer.Compare(SetTreeLeaf$1__get_Key(x1_3), SetTreeLeaf$1__get_Key(x2_3)) | 0;\n                                if (c_2 !== 0) {\n                                    return c_2 | 0;\n                                }\n                                else {\n                                    comparer_mut = comparer;\n                                    l1_mut = (new List(SetTreeModule_empty(), matchValue[0].tail));\n                                    l2_mut = (new List(SetTreeNode$1__get_Right(x2_3), matchValue[1].tail));\n                                    continue SetTreeModule_compareStacks;\n                                }\n                            }\n                            else {\n                                const matchValue_5 = [l1, l2];\n                                let pattern_matching_result_2, t1_8, x1_6, t2_8, x2_6;\n                                if (matchValue_5[0].tail != null) {\n                                    if (matchValue_5[0].head != null) {\n                                        pattern_matching_result_2 = 0;\n                                        t1_8 = matchValue_5[0].tail;\n                                        x1_6 = matchValue_5[0].head;\n                                    }\n                                    else if (matchValue_5[1].tail != null) {\n                                        if (matchValue_5[1].head != null) {\n                                            pattern_matching_result_2 = 1;\n                                            t2_8 = matchValue_5[1].tail;\n                                            x2_6 = matchValue_5[1].head;\n                                        }\n                                        else {\n                                            pattern_matching_result_2 = 2;\n                                        }\n                                    }\n                                    else {\n                                        pattern_matching_result_2 = 2;\n                                    }\n                                }\n                                else if (matchValue_5[1].tail != null) {\n                                    if (matchValue_5[1].head != null) {\n                                        pattern_matching_result_2 = 1;\n                                        t2_8 = matchValue_5[1].tail;\n                                        x2_6 = matchValue_5[1].head;\n                                    }\n                                    else {\n                                        pattern_matching_result_2 = 2;\n                                    }\n                                }\n                                else {\n                                    pattern_matching_result_2 = 2;\n                                }\n                                switch (pattern_matching_result_2) {\n                                    case 0: {\n                                        if (x1_6 instanceof SetTreeNode$1) {\n                                            comparer_mut = comparer;\n                                            l1_mut = (new List(SetTreeNode$1__get_Left(x1_6), new List(SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x1_6), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1_6), 0), t1_8)));\n                                            l2_mut = l2;\n                                            continue SetTreeModule_compareStacks;\n                                        }\n                                        else {\n                                            comparer_mut = comparer;\n                                            l1_mut = (new List(SetTreeModule_empty(), new List(SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1_6)), t1_8)));\n                                            l2_mut = l2;\n                                            continue SetTreeModule_compareStacks;\n                                        }\n                                    }\n                                    case 1: {\n                                        if (x2_6 instanceof SetTreeNode$1) {\n                                            comparer_mut = comparer;\n                                            l1_mut = l1;\n                                            l2_mut = (new List(SetTreeNode$1__get_Left(x2_6), new List(SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x2_6), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2_6), 0), t2_8)));\n                                            continue SetTreeModule_compareStacks;\n                                        }\n                                        else {\n                                            comparer_mut = comparer;\n                                            l1_mut = l1;\n                                            l2_mut = (new List(SetTreeModule_empty(), new List(SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_6)), t2_8)));\n                                            continue SetTreeModule_compareStacks;\n                                        }\n                                    }\n                                    case 2: {\n                                        throw (new Error(\"unexpected state in SetTree.compareStacks\"));\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            const c_3 = comparer.Compare(SetTreeLeaf$1__get_Key(x1_3), SetTreeLeaf$1__get_Key(x2_3)) | 0;\n                            if (c_3 !== 0) {\n                                return c_3 | 0;\n                            }\n                            else {\n                                comparer_mut = comparer;\n                                l1_mut = matchValue[0].tail;\n                                l2_mut = matchValue[1].tail;\n                                continue SetTreeModule_compareStacks;\n                            }\n                        }\n                    }\n                    else {\n                        const x2 = matchValue[1].head;\n                        const matchValue_1 = [l1, l2];\n                        let pattern_matching_result_3, t1_2, x1, t2_2, x2_1;\n                        if (matchValue_1[0].tail != null) {\n                            if (matchValue_1[0].head != null) {\n                                pattern_matching_result_3 = 0;\n                                t1_2 = matchValue_1[0].tail;\n                                x1 = matchValue_1[0].head;\n                            }\n                            else if (matchValue_1[1].tail != null) {\n                                if (matchValue_1[1].head != null) {\n                                    pattern_matching_result_3 = 1;\n                                    t2_2 = matchValue_1[1].tail;\n                                    x2_1 = matchValue_1[1].head;\n                                }\n                                else {\n                                    pattern_matching_result_3 = 2;\n                                }\n                            }\n                            else {\n                                pattern_matching_result_3 = 2;\n                            }\n                        }\n                        else if (matchValue_1[1].tail != null) {\n                            if (matchValue_1[1].head != null) {\n                                pattern_matching_result_3 = 1;\n                                t2_2 = matchValue_1[1].tail;\n                                x2_1 = matchValue_1[1].head;\n                            }\n                            else {\n                                pattern_matching_result_3 = 2;\n                            }\n                        }\n                        else {\n                            pattern_matching_result_3 = 2;\n                        }\n                        switch (pattern_matching_result_3) {\n                            case 0: {\n                                if (x1 instanceof SetTreeNode$1) {\n                                    comparer_mut = comparer;\n                                    l1_mut = (new List(SetTreeNode$1__get_Left(x1), new List(SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x1), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1), 0), t1_2)));\n                                    l2_mut = l2;\n                                    continue SetTreeModule_compareStacks;\n                                }\n                                else {\n                                    comparer_mut = comparer;\n                                    l1_mut = (new List(SetTreeModule_empty(), new List(SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1)), t1_2)));\n                                    l2_mut = l2;\n                                    continue SetTreeModule_compareStacks;\n                                }\n                            }\n                            case 1: {\n                                if (x2_1 instanceof SetTreeNode$1) {\n                                    comparer_mut = comparer;\n                                    l1_mut = l1;\n                                    l2_mut = (new List(SetTreeNode$1__get_Left(x2_1), new List(SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x2_1), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2_1), 0), t2_2)));\n                                    continue SetTreeModule_compareStacks;\n                                }\n                                else {\n                                    comparer_mut = comparer;\n                                    l1_mut = l1;\n                                    l2_mut = (new List(SetTreeModule_empty(), new List(SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_1)), t2_2)));\n                                    continue SetTreeModule_compareStacks;\n                                }\n                            }\n                            case 2: {\n                                throw (new Error(\"unexpected state in SetTree.compareStacks\"));\n                            }\n                        }\n                    }\n                }\n                else if (matchValue[0].head != null) {\n                    const x1_1 = matchValue[0].head;\n                    const matchValue_2 = [l1, l2];\n                    let pattern_matching_result_4, t1_4, x1_2, t2_4, x2_2;\n                    if (matchValue_2[0].tail != null) {\n                        if (matchValue_2[0].head != null) {\n                            pattern_matching_result_4 = 0;\n                            t1_4 = matchValue_2[0].tail;\n                            x1_2 = matchValue_2[0].head;\n                        }\n                        else if (matchValue_2[1].tail != null) {\n                            if (matchValue_2[1].head != null) {\n                                pattern_matching_result_4 = 1;\n                                t2_4 = matchValue_2[1].tail;\n                                x2_2 = matchValue_2[1].head;\n                            }\n                            else {\n                                pattern_matching_result_4 = 2;\n                            }\n                        }\n                        else {\n                            pattern_matching_result_4 = 2;\n                        }\n                    }\n                    else if (matchValue_2[1].tail != null) {\n                        if (matchValue_2[1].head != null) {\n                            pattern_matching_result_4 = 1;\n                            t2_4 = matchValue_2[1].tail;\n                            x2_2 = matchValue_2[1].head;\n                        }\n                        else {\n                            pattern_matching_result_4 = 2;\n                        }\n                    }\n                    else {\n                        pattern_matching_result_4 = 2;\n                    }\n                    switch (pattern_matching_result_4) {\n                        case 0: {\n                            if (x1_2 instanceof SetTreeNode$1) {\n                                comparer_mut = comparer;\n                                l1_mut = (new List(SetTreeNode$1__get_Left(x1_2), new List(SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x1_2), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1_2), 0), t1_4)));\n                                l2_mut = l2;\n                                continue SetTreeModule_compareStacks;\n                            }\n                            else {\n                                comparer_mut = comparer;\n                                l1_mut = (new List(SetTreeModule_empty(), new List(SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1_2)), t1_4)));\n                                l2_mut = l2;\n                                continue SetTreeModule_compareStacks;\n                            }\n                        }\n                        case 1: {\n                            if (x2_2 instanceof SetTreeNode$1) {\n                                comparer_mut = comparer;\n                                l1_mut = l1;\n                                l2_mut = (new List(SetTreeNode$1__get_Left(x2_2), new List(SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x2_2), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2_2), 0), t2_4)));\n                                continue SetTreeModule_compareStacks;\n                            }\n                            else {\n                                comparer_mut = comparer;\n                                l1_mut = l1;\n                                l2_mut = (new List(SetTreeModule_empty(), new List(SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_2)), t2_4)));\n                                continue SetTreeModule_compareStacks;\n                            }\n                        }\n                        case 2: {\n                            throw (new Error(\"unexpected state in SetTree.compareStacks\"));\n                        }\n                    }\n                }\n                else {\n                    comparer_mut = comparer;\n                    l1_mut = matchValue[0].tail;\n                    l2_mut = matchValue[1].tail;\n                    continue SetTreeModule_compareStacks;\n                }\n            }\n            else {\n                return 1;\n            }\n        }\n        else if (matchValue[1].tail == null) {\n            return 0;\n        }\n        else {\n            return -1;\n        }\n        break;\n    }\n}\n\nexport function SetTreeModule_compare(comparer, t1, t2) {\n    if (t1 == null) {\n        if (t2 == null) {\n            return 0;\n        }\n        else {\n            return -1;\n        }\n    }\n    else if (t2 == null) {\n        return 1;\n    }\n    else {\n        return SetTreeModule_compareStacks(comparer, new List(t1, new List()), new List(t2, new List())) | 0;\n    }\n}\n\nexport function SetTreeModule_choose(s) {\n    return SetTreeModule_minimumElement(s);\n}\n\nexport function SetTreeModule_toList(t) {\n    const loop = (t$0027_mut, acc_mut) => {\n        loop:\n        while (true) {\n            const t$0027 = t$0027_mut, acc = acc_mut;\n            if (t$0027 != null) {\n                const t2 = t$0027;\n                if (t2 instanceof SetTreeNode$1) {\n                    t$0027_mut = SetTreeNode$1__get_Left(t2);\n                    acc_mut = (new List(SetTreeLeaf$1__get_Key(t2), loop(SetTreeNode$1__get_Right(t2), acc)));\n                    continue loop;\n                }\n                else {\n                    return new List(SetTreeLeaf$1__get_Key(t2), acc);\n                }\n            }\n            else {\n                return acc;\n            }\n            break;\n        }\n    };\n    return loop(t, new List());\n}\n\nexport function SetTreeModule_copyToArray(s, arr, i) {\n    let j = i | 0;\n    SetTreeModule_iter((x) => {\n        arr[j] = x;\n        j = (j + 1);\n    }, s);\n}\n\nexport function SetTreeModule_toArray(s) {\n    const n = SetTreeModule_count(s) | 0;\n    const res = new Array(n);\n    SetTreeModule_copyToArray(s, res, 0);\n    return res;\n}\n\nexport function SetTreeModule_mkFromEnumerator(comparer_mut, acc_mut, e_mut) {\n    SetTreeModule_mkFromEnumerator:\n    while (true) {\n        const comparer = comparer_mut, acc = acc_mut, e = e_mut;\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            comparer_mut = comparer;\n            acc_mut = SetTreeModule_add(comparer, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), acc);\n            e_mut = e;\n            continue SetTreeModule_mkFromEnumerator;\n        }\n        else {\n            return acc;\n        }\n        break;\n    }\n}\n\nexport function SetTreeModule_ofSeq(comparer, c) {\n    const ie = getEnumerator(c);\n    try {\n        return SetTreeModule_mkFromEnumerator(comparer, SetTreeModule_empty(), ie);\n    }\n    finally {\n        ie.Dispose();\n    }\n}\n\nexport function SetTreeModule_ofArray(comparer, l) {\n    return fold_1((acc, k) => SetTreeModule_add(comparer, k, acc), SetTreeModule_empty(), l);\n}\n\nexport class FSharpSet {\n    constructor(comparer, tree) {\n        this.comparer = comparer;\n        this.tree = tree;\n    }\n    GetHashCode() {\n        const this$ = this;\n        return FSharpSet__ComputeHashCode(this$) | 0;\n    }\n    Equals(that) {\n        const this$ = this;\n        return (that instanceof FSharpSet) ? (SetTreeModule_compare(FSharpSet__get_Comparer(this$), FSharpSet__get_Tree(this$), FSharpSet__get_Tree(that)) === 0) : false;\n    }\n    toString() {\n        const this$ = this;\n        return (\"set [\" + join(\"; \", map_1((x) => {\n            let copyOfStruct = x;\n            return toString(copyOfStruct);\n        }, this$))) + \"]\";\n    }\n    get [Symbol.toStringTag]() {\n        return \"FSharpSet\";\n    }\n    CompareTo(that) {\n        const s = this;\n        return SetTreeModule_compare(FSharpSet__get_Comparer(s), FSharpSet__get_Tree(s), FSharpSet__get_Tree(that)) | 0;\n    }\n    [\"System.Collections.Generic.ICollection`1.Add2B595\"](x) {\n        throw (new Error(\"ReadOnlyCollection\"));\n    }\n    [\"System.Collections.Generic.ICollection`1.Clear\"]() {\n        throw (new Error(\"ReadOnlyCollection\"));\n    }\n    [\"System.Collections.Generic.ICollection`1.Remove2B595\"](x) {\n        throw (new Error(\"ReadOnlyCollection\"));\n    }\n    [\"System.Collections.Generic.ICollection`1.Contains2B595\"](x) {\n        const s = this;\n        return SetTreeModule_mem(FSharpSet__get_Comparer(s), x, FSharpSet__get_Tree(s));\n    }\n    [\"System.Collections.Generic.ICollection`1.CopyToZ2E171D71\"](arr, i) {\n        const s = this;\n        SetTreeModule_copyToArray(FSharpSet__get_Tree(s), arr, i);\n    }\n    [\"System.Collections.Generic.ICollection`1.get_IsReadOnly\"]() {\n        return true;\n    }\n    [\"System.Collections.Generic.ICollection`1.get_Count\"]() {\n        const s = this;\n        return FSharpSet__get_Count(s) | 0;\n    }\n    [\"System.Collections.Generic.IReadOnlyCollection`1.get_Count\"]() {\n        const s = this;\n        return FSharpSet__get_Count(s) | 0;\n    }\n    GetEnumerator() {\n        const s = this;\n        return SetTreeModule_mkIEnumerator(FSharpSet__get_Tree(s));\n    }\n    [Symbol.iterator]() {\n        return toIterator(this.GetEnumerator());\n    }\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\n        const s = this;\n        return SetTreeModule_mkIEnumerator(FSharpSet__get_Tree(s));\n    }\n    get size() {\n        const s = this;\n        return FSharpSet__get_Count(s) | 0;\n    }\n    add(k) {\n        const s = this;\n        throw (new Error(\"Set cannot be mutated\"));\n        return s;\n    }\n    clear() {\n        throw (new Error(\"Set cannot be mutated\"));\n    }\n    delete(k) {\n        throw (new Error(\"Set cannot be mutated\"));\n        return false;\n    }\n    has(k) {\n        const s = this;\n        return FSharpSet__Contains(s, k);\n    }\n    keys() {\n        const s = this;\n        return map_1((x) => x, s);\n    }\n    values() {\n        const s = this;\n        return map_1((x) => x, s);\n    }\n    entries() {\n        const s = this;\n        return map_1((v) => [v, v], s);\n    }\n    forEach(f, thisArg) {\n        const s = this;\n        iterate_1((x) => {\n            f(x, x, s);\n        }, s);\n    }\n}\n\nexport function FSharpSet$reflection(gen0) {\n    return class_type(\"Set.FSharpSet\", [gen0], FSharpSet);\n}\n\nexport function FSharpSet_$ctor(comparer, tree) {\n    return new FSharpSet(comparer, tree);\n}\n\nexport function FSharpSet__get_Comparer(set$) {\n    return set$.comparer;\n}\n\nexport function FSharpSet__get_Tree(set$) {\n    return set$.tree;\n}\n\nexport function FSharpSet_Empty(comparer) {\n    return FSharpSet_$ctor(comparer, SetTreeModule_empty());\n}\n\nexport function FSharpSet__Add(s, value) {\n    return FSharpSet_$ctor(FSharpSet__get_Comparer(s), SetTreeModule_add(FSharpSet__get_Comparer(s), value, FSharpSet__get_Tree(s)));\n}\n\nexport function FSharpSet__Remove(s, value) {\n    return FSharpSet_$ctor(FSharpSet__get_Comparer(s), SetTreeModule_remove(FSharpSet__get_Comparer(s), value, FSharpSet__get_Tree(s)));\n}\n\nexport function FSharpSet__get_Count(s) {\n    return SetTreeModule_count(FSharpSet__get_Tree(s));\n}\n\nexport function FSharpSet__Contains(s, value) {\n    return SetTreeModule_mem(FSharpSet__get_Comparer(s), value, FSharpSet__get_Tree(s));\n}\n\nexport function FSharpSet__Iterate(s, x) {\n    SetTreeModule_iter(x, FSharpSet__get_Tree(s));\n}\n\nexport function FSharpSet__Fold(s, f, z) {\n    const f_1 = f;\n    return SetTreeModule_fold((x, z_1) => f_1(z_1, x), z, FSharpSet__get_Tree(s));\n}\n\nexport function FSharpSet__get_IsEmpty(s) {\n    return FSharpSet__get_Tree(s) == null;\n}\n\nexport function FSharpSet__Partition(s, f) {\n    if (FSharpSet__get_Tree(s) == null) {\n        return [s, s];\n    }\n    else {\n        const patternInput = SetTreeModule_partition(FSharpSet__get_Comparer(s), f, FSharpSet__get_Tree(s));\n        return [FSharpSet_$ctor(FSharpSet__get_Comparer(s), patternInput[0]), FSharpSet_$ctor(FSharpSet__get_Comparer(s), patternInput[1])];\n    }\n}\n\nexport function FSharpSet__Filter(s, f) {\n    if (FSharpSet__get_Tree(s) == null) {\n        return s;\n    }\n    else {\n        return FSharpSet_$ctor(FSharpSet__get_Comparer(s), SetTreeModule_filter(FSharpSet__get_Comparer(s), f, FSharpSet__get_Tree(s)));\n    }\n}\n\nexport function FSharpSet__Map(s, f, comparer) {\n    return FSharpSet_$ctor(comparer, SetTreeModule_fold((acc, k) => SetTreeModule_add(comparer, f(k), acc), SetTreeModule_empty(), FSharpSet__get_Tree(s)));\n}\n\nexport function FSharpSet__Exists(s, f) {\n    return SetTreeModule_exists(f, FSharpSet__get_Tree(s));\n}\n\nexport function FSharpSet__ForAll(s, f) {\n    return SetTreeModule_forall(f, FSharpSet__get_Tree(s));\n}\n\nexport function FSharpSet_op_Subtraction(set1, set2) {\n    if (FSharpSet__get_Tree(set1) == null) {\n        return set1;\n    }\n    else if (FSharpSet__get_Tree(set2) == null) {\n        return set1;\n    }\n    else {\n        return FSharpSet_$ctor(FSharpSet__get_Comparer(set1), SetTreeModule_diff(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set1), FSharpSet__get_Tree(set2)));\n    }\n}\n\nexport function FSharpSet_op_Addition(set1, set2) {\n    if (FSharpSet__get_Tree(set2) == null) {\n        return set1;\n    }\n    else if (FSharpSet__get_Tree(set1) == null) {\n        return set2;\n    }\n    else {\n        return FSharpSet_$ctor(FSharpSet__get_Comparer(set1), SetTreeModule_union(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set1), FSharpSet__get_Tree(set2)));\n    }\n}\n\nexport function FSharpSet_Intersection(a, b) {\n    if (FSharpSet__get_Tree(b) == null) {\n        return b;\n    }\n    else if (FSharpSet__get_Tree(a) == null) {\n        return a;\n    }\n    else {\n        return FSharpSet_$ctor(FSharpSet__get_Comparer(a), SetTreeModule_intersection(FSharpSet__get_Comparer(a), FSharpSet__get_Tree(a), FSharpSet__get_Tree(b)));\n    }\n}\n\nexport function FSharpSet_IntersectionMany(sets) {\n    return reduce((s1, s2) => FSharpSet_Intersection(s1, s2), sets);\n}\n\nexport function FSharpSet_Equality(a, b) {\n    return SetTreeModule_compare(FSharpSet__get_Comparer(a), FSharpSet__get_Tree(a), FSharpSet__get_Tree(b)) === 0;\n}\n\nexport function FSharpSet_Compare(a, b) {\n    return SetTreeModule_compare(FSharpSet__get_Comparer(a), FSharpSet__get_Tree(a), FSharpSet__get_Tree(b));\n}\n\nexport function FSharpSet__get_Choose(x) {\n    return SetTreeModule_choose(FSharpSet__get_Tree(x));\n}\n\nexport function FSharpSet__get_MinimumElement(x) {\n    return SetTreeModule_minimumElement(FSharpSet__get_Tree(x));\n}\n\nexport function FSharpSet__get_MaximumElement(x) {\n    return SetTreeModule_maximumElement(FSharpSet__get_Tree(x));\n}\n\nexport function FSharpSet__IsSubsetOf(x, otherSet) {\n    return SetTreeModule_subset(FSharpSet__get_Comparer(x), FSharpSet__get_Tree(x), FSharpSet__get_Tree(otherSet));\n}\n\nexport function FSharpSet__IsSupersetOf(x, otherSet) {\n    return SetTreeModule_subset(FSharpSet__get_Comparer(x), FSharpSet__get_Tree(otherSet), FSharpSet__get_Tree(x));\n}\n\nexport function FSharpSet__IsProperSubsetOf(x, otherSet) {\n    return SetTreeModule_properSubset(FSharpSet__get_Comparer(x), FSharpSet__get_Tree(x), FSharpSet__get_Tree(otherSet));\n}\n\nexport function FSharpSet__IsProperSupersetOf(x, otherSet) {\n    return SetTreeModule_properSubset(FSharpSet__get_Comparer(x), FSharpSet__get_Tree(otherSet), FSharpSet__get_Tree(x));\n}\n\nexport function FSharpSet__ToList(x) {\n    return SetTreeModule_toList(FSharpSet__get_Tree(x));\n}\n\nexport function FSharpSet__ToArray(x) {\n    return SetTreeModule_toArray(FSharpSet__get_Tree(x));\n}\n\nexport function FSharpSet__ComputeHashCode(this$) {\n    let res = 0;\n    const enumerator = getEnumerator(this$);\n    try {\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            const x_1 = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n            res = (((res << 1) + structuralHash(x_1)) + 631);\n        }\n    }\n    finally {\n        enumerator.Dispose();\n    }\n    return Math.abs(res) | 0;\n}\n\nexport function isEmpty(set$) {\n    return FSharpSet__get_IsEmpty(set$);\n}\n\nexport function contains(element, set$) {\n    return FSharpSet__Contains(set$, element);\n}\n\nexport function add(value, set$) {\n    return FSharpSet__Add(set$, value);\n}\n\nexport function singleton(value, comparer) {\n    return FSharpSet__Add(FSharpSet_Empty(comparer), value);\n}\n\nexport function remove(value, set$) {\n    return FSharpSet__Remove(set$, value);\n}\n\nexport function union(set1, set2) {\n    return FSharpSet_op_Addition(set1, set2);\n}\n\nexport function unionMany(sets, comparer) {\n    return fold_2((s1, s2) => FSharpSet_op_Addition(s1, s2), FSharpSet_Empty(comparer), sets);\n}\n\nexport function intersect(set1, set2) {\n    return FSharpSet_Intersection(set1, set2);\n}\n\nexport function intersectMany(sets) {\n    return FSharpSet_IntersectionMany(sets);\n}\n\nexport function iterate(action, set$) {\n    FSharpSet__Iterate(set$, action);\n}\n\nexport function empty(comparer) {\n    return FSharpSet_Empty(comparer);\n}\n\nexport function forAll(predicate, set$) {\n    return FSharpSet__ForAll(set$, predicate);\n}\n\nexport function exists(predicate, set$) {\n    return FSharpSet__Exists(set$, predicate);\n}\n\nexport function filter(predicate, set$) {\n    return FSharpSet__Filter(set$, predicate);\n}\n\nexport function partition(predicate, set$) {\n    return FSharpSet__Partition(set$, predicate);\n}\n\nexport function fold(folder, state, set$) {\n    return SetTreeModule_fold(folder, state, FSharpSet__get_Tree(set$));\n}\n\nexport function foldBack(folder, set$, state) {\n    return SetTreeModule_foldBack(folder, FSharpSet__get_Tree(set$), state);\n}\n\nexport function map(mapping, set$, comparer) {\n    return FSharpSet__Map(set$, mapping, comparer);\n}\n\nexport function count(set$) {\n    return FSharpSet__get_Count(set$);\n}\n\nexport function ofList(elements, comparer) {\n    return FSharpSet_$ctor(comparer, SetTreeModule_ofSeq(comparer, elements));\n}\n\nexport function ofArray(array, comparer) {\n    return FSharpSet_$ctor(comparer, SetTreeModule_ofArray(comparer, array));\n}\n\nexport function toList(set$) {\n    return FSharpSet__ToList(set$);\n}\n\nexport function toArray(set$) {\n    return FSharpSet__ToArray(set$);\n}\n\nexport function toSeq(set$) {\n    return map_1((x) => x, set$);\n}\n\nexport function ofSeq(elements, comparer) {\n    return FSharpSet_$ctor(comparer, SetTreeModule_ofSeq(comparer, elements));\n}\n\nexport function difference(set1, set2) {\n    return FSharpSet_op_Subtraction(set1, set2);\n}\n\nexport function isSubset(set1, set2) {\n    return SetTreeModule_subset(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set1), FSharpSet__get_Tree(set2));\n}\n\nexport function isSuperset(set1, set2) {\n    return SetTreeModule_subset(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set2), FSharpSet__get_Tree(set1));\n}\n\nexport function isProperSubset(set1, set2) {\n    return SetTreeModule_properSubset(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set1), FSharpSet__get_Tree(set2));\n}\n\nexport function isProperSuperset(set1, set2) {\n    return SetTreeModule_properSubset(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set2), FSharpSet__get_Tree(set1));\n}\n\nexport function minElement(set$) {\n    return FSharpSet__get_MinimumElement(set$);\n}\n\nexport function maxElement(set$) {\n    return FSharpSet__get_MaximumElement(set$);\n}\n\nexport function createMutable(source, comparer) {\n    return HashSet_$ctor_Z6150332D(source, comparer);\n}\n\nexport function distinct(xs, comparer) {\n    return delay(() => {\n        const set$ = HashSet_$ctor_Z6150332D(empty_1(), comparer);\n        return collect((x) => (HashSet__Add_2B595(set$, x) ? singleton_1(x) : empty_1()), xs);\n    });\n}\n\nexport function distinctBy(projection, xs, comparer) {\n    return delay(() => {\n        const set$ = HashSet_$ctor_Z6150332D(empty_1(), comparer);\n        return collect((x) => (HashSet__Add_2B595(set$, projection(x)) ? singleton_1(x) : empty_1()), xs);\n    });\n}\n\nexport function unionWith(s1, s2) {\n    return fold_2((acc, x) => acc.add(x), s1, s2);\n}\n\nexport function intersectWith(s1, s2, comparer) {\n    const s2_1 = ofSeq(s2, comparer);\n    const enumerator = getEnumerator(s1.keys());\n    try {\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            const x = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n            if (!FSharpSet__Contains(s2_1, x)) {\n                void s1.delete(x);\n            }\n        }\n    }\n    finally {\n        enumerator.Dispose();\n    }\n}\n\nexport function exceptWith(s1, s2) {\n    const enumerator = getEnumerator(s2);\n    try {\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            void s1.delete(enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n        }\n    }\n    finally {\n        enumerator.Dispose();\n    }\n}\n\nexport function isSubsetOf(s1, s2, comparer) {\n    return isSubset(ofSeq(s1.values(), comparer), ofSeq(s2, comparer));\n}\n\nexport function isSupersetOf(s1, s2, comparer) {\n    return isSuperset(ofSeq(s1.values(), comparer), ofSeq(s2, comparer));\n}\n\nexport function isProperSubsetOf(s1, s2, comparer) {\n    return isProperSubset(ofSeq(s1.values(), comparer), ofSeq(s2, comparer));\n}\n\nexport function isProperSupersetOf(s1, s2, comparer) {\n    return isProperSuperset(ofSeq(s1.values(), comparer), ofSeq(s2, comparer));\n}\n\n","import { Union, Record } from \"../fable-library.3.1.5/Types.js\";\nimport { union_type, tuple_type, lambda_type, unit_type, array_type, record_type, class_type, string_type } from \"../fable-library.3.1.5/Reflection.js\";\n\nexport class RecordField extends Record {\n    constructor(FieldName, FieldType, PropertyInfo) {\n        super();\n        this.FieldName = FieldName;\n        this.FieldType = FieldType;\n        this.PropertyInfo = PropertyInfo;\n    }\n}\n\nexport function RecordField$reflection() {\n    return record_type(\"Fable.SimpleJson.RecordField\", [], RecordField, () => [[\"FieldName\", string_type], [\"FieldType\", TypeInfo$reflection()], [\"PropertyInfo\", class_type(\"System.Reflection.PropertyInfo\")]]);\n}\n\nexport class UnionCase extends Record {\n    constructor(CaseName, CaseTypes, Info) {\n        super();\n        this.CaseName = CaseName;\n        this.CaseTypes = CaseTypes;\n        this.Info = Info;\n    }\n}\n\nexport function UnionCase$reflection() {\n    return record_type(\"Fable.SimpleJson.UnionCase\", [], UnionCase, () => [[\"CaseName\", string_type], [\"CaseTypes\", array_type(TypeInfo$reflection())], [\"Info\", class_type(\"Microsoft.FSharp.Reflection.UnionCaseInfo\")]]);\n}\n\nexport class TypeInfo extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Unit\", \"String\", \"UInt16\", \"UInt32\", \"UInt64\", \"Int32\", \"Bool\", \"Float32\", \"Float\", \"Decimal\", \"Short\", \"Long\", \"Byte\", \"DateTime\", \"DateTimeOffset\", \"BigInt\", \"TimeSpan\", \"Guid\", \"Object\", \"Any\", \"Async\", \"Promise\", \"Option\", \"List\", \"Set\", \"Array\", \"Seq\", \"Tuple\", \"Map\", \"Dictionary\", \"ResizeArray\", \"HashSet\", \"Func\", \"Enum\", \"Record\", \"Union\"];\n    }\n}\n\nexport function TypeInfo$reflection() {\n    return union_type(\"Fable.SimpleJson.TypeInfo\", [], TypeInfo, () => [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [[\"Item\", lambda_type(unit_type, class_type(\"System.Type\"))]], [[\"Item\", lambda_type(unit_type, TypeInfo$reflection())]], [[\"Item\", lambda_type(unit_type, TypeInfo$reflection())]], [[\"Item\", lambda_type(unit_type, TypeInfo$reflection())]], [[\"Item\", lambda_type(unit_type, TypeInfo$reflection())]], [[\"Item\", lambda_type(unit_type, TypeInfo$reflection())]], [[\"Item\", lambda_type(unit_type, TypeInfo$reflection())]], [[\"Item\", lambda_type(unit_type, TypeInfo$reflection())]], [[\"Item\", lambda_type(unit_type, array_type(TypeInfo$reflection()))]], [[\"Item\", lambda_type(unit_type, tuple_type(TypeInfo$reflection(), TypeInfo$reflection()))]], [[\"Item\", lambda_type(unit_type, tuple_type(TypeInfo$reflection(), TypeInfo$reflection(), class_type(\"System.Type\")))]], [[\"Item\", lambda_type(unit_type, TypeInfo$reflection())]], [[\"Item\", lambda_type(unit_type, TypeInfo$reflection())]], [[\"Item\", lambda_type(unit_type, array_type(TypeInfo$reflection()))]], [[\"Item\", lambda_type(unit_type, tuple_type(TypeInfo$reflection(), class_type(\"System.Type\")))]], [[\"Item\", lambda_type(unit_type, tuple_type(array_type(RecordField$reflection()), class_type(\"System.Type\")))]], [[\"Item\", lambda_type(unit_type, tuple_type(array_type(UnionCase$reflection()), class_type(\"System.Type\")))]]]);\n}\n\n","import { equals, getEnumUnderlyingType, isEnum, getTupleElements, isTuple, getElementType, isArray, getFunctionElements, isFunction, getUnionCases, getUnionCaseFields, isUnion, getGenerics, getRecordElements, name, isRecord, fullName } from \"../fable-library.3.1.5/Reflection.js\";\nimport { UnionCase, RecordField, TypeInfo } from \"./TypeInfo.fs.js\";\nimport { map } from \"../fable-library.3.1.5/Array.js\";\nimport { collect, singleton, append, delay } from \"../fable-library.3.1.5/Seq.js\";\nimport { structuralHash, Lazy } from \"../fable-library.3.1.5/Util.js\";\nimport { Dictionary } from \"../fable-library.3.1.5/MutableMap.js\";\nimport { tryGetValue } from \"../fable-library.3.1.5/MapUtil.js\";\nimport { FSharpRef } from \"../fable-library.3.1.5/Types.js\";\nimport { endsWith, isNullOrEmpty } from \"../fable-library.3.1.5/String.js\";\n\nexport function $007CPrimitiveType$007C_$007C(primType) {\n    const matchValue = fullName(primType);\n    switch (matchValue) {\n        case \"System.String\": {\n            return new TypeInfo(1);\n        }\n        case \"System.Int16\": {\n            return new TypeInfo(10);\n        }\n        case \"System.Int32\": {\n            return new TypeInfo(5);\n        }\n        case \"Microsoft.FSharp.Core.int64`1\":\n        case \"System.Int64\": {\n            return new TypeInfo(11);\n        }\n        case \"System.UInt16\": {\n            return new TypeInfo(2);\n        }\n        case \"System.UInt32\": {\n            return new TypeInfo(3);\n        }\n        case \"System.UInt64\": {\n            return new TypeInfo(4);\n        }\n        case \"System.DateTime\": {\n            return new TypeInfo(13);\n        }\n        case \"System.TimeSpan\": {\n            return new TypeInfo(16);\n        }\n        case \"System.DateTimeOffset\": {\n            return new TypeInfo(14);\n        }\n        case \"System.Boolean\": {\n            return new TypeInfo(6);\n        }\n        case \"System.Single\": {\n            return new TypeInfo(7);\n        }\n        case \"System.Double\": {\n            return new TypeInfo(8);\n        }\n        case \"Microsoft.FSharp.Core.decimal`1\":\n        case \"System.Decimal\": {\n            return new TypeInfo(9);\n        }\n        case \"System.Numerics.BigInteger\": {\n            return new TypeInfo(15);\n        }\n        case \"Microsoft.FSharp.Core.Unit\": {\n            return new TypeInfo(0);\n        }\n        case \"System.Guid\": {\n            return new TypeInfo(17);\n        }\n        case \"System.Byte\": {\n            return new TypeInfo(12);\n        }\n        case \"System.Object\": {\n            return new TypeInfo(18);\n        }\n        default: {\n            return void 0;\n        }\n    }\n}\n\nexport function $007CRecordType$007C_$007C(t) {\n    if (isRecord(t)) {\n        return map((field) => [field, name(field), field[1]], getRecordElements(t));\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function $007CSetType$007C_$007C(t) {\n    if (fullName(t).indexOf(\"Microsoft.FSharp.Collections.FSharpSet`1\") === 0) {\n        return getGenerics(t)[0];\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function $007CNullable$007C_$007C(t) {\n    if (fullName(t).indexOf(\"System.Nullable`1\") === 0) {\n        return getGenerics(t)[0];\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function $007CUnionType$007C_$007C(t) {\n    if (isUnion(t)) {\n        return map((info) => [name(info), info, map((prop) => prop[1], getUnionCaseFields(info))], getUnionCases(t));\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function $007CMapType$007C_$007C(t) {\n    if (fullName(t).indexOf(\"Microsoft.FSharp.Collections.FSharpMap`2\") === 0) {\n        const genArgs = getGenerics(t);\n        return [genArgs[0], genArgs[1]];\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function $007CListType$007C_$007C(t) {\n    if (fullName(t).indexOf(\"Microsoft.FSharp.Collections.FSharpList`1\") === 0) {\n        return getGenerics(t)[0];\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function flattenFuncTypes(typeDef) {\n    return Array.from(delay(() => {\n        if (isFunction(typeDef)) {\n            const patternInput = getFunctionElements(typeDef);\n            return append(flattenFuncTypes(patternInput[0]), delay(() => flattenFuncTypes(patternInput[1])));\n        }\n        else {\n            return singleton(typeDef);\n        }\n    }));\n}\n\nexport function $007CFuncType$007C_$007C(t) {\n    if (isFunction(t)) {\n        return flattenFuncTypes(t);\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function $007CArrayType$007C_$007C(t) {\n    if (isArray(t)) {\n        return getElementType(t);\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function $007COptionType$007C_$007C(t) {\n    if (fullName(t).indexOf(\"Microsoft.FSharp.Core.FSharpOption`1\") === 0) {\n        return getGenerics(t)[0];\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function $007CTupleType$007C_$007C(t) {\n    if (isTuple(t)) {\n        return getTupleElements(t);\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function $007CSeqType$007C_$007C(t) {\n    if (fullName(t).indexOf(\"System.Collections.Generic.IEnumerable`1\") === 0) {\n        return getGenerics(t)[0];\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function $007CDictionaryType$007C_$007C(t) {\n    if (fullName(t).indexOf(\"System.Collections.Generic.Dictionary\") === 0) {\n        const genArgs = getGenerics(t);\n        return [genArgs[0], genArgs[1]];\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function $007CResizeArrayType$007C_$007C(t) {\n    if (fullName(t).indexOf(\"System.Collections.Generic.List\") === 0) {\n        return getGenerics(t)[0];\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function $007CHashSetType$007C_$007C(t) {\n    if (fullName(t).indexOf(\"System.Collections.Generic.HashSet\") === 0) {\n        return getGenerics(t)[0];\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function $007CAsyncType$007C_$007C(t) {\n    if (fullName(t).indexOf(\"Microsoft.FSharp.Control.FSharpAsync`1\") === 0) {\n        return getGenerics(t)[0];\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function $007CPromiseType$007C_$007C(t) {\n    if (fullName(t).indexOf(\"Fable.Core.JS.Promise`1\") === 0) {\n        return getGenerics(t)[0];\n    }\n    else {\n        return void 0;\n    }\n}\n\nfunction lazyToDelayed(l, unitVar0) {\n    return l.Value;\n}\n\nexport function $007CEnumType$007C_$007C(t) {\n    if (isEnum(t)) {\n        return getEnumUnderlyingType(t);\n    }\n    else {\n        return void 0;\n    }\n}\n\nfunction _createTypeInfo(resolvedType) {\n    let l, l_3, l_4, l_5, l_6, l_7, l_8, l_9, l_10, l_11, l_12, l_13, l_14, l_15, l_16, l_17;\n    const activePatternResult3345 = $007CPrimitiveType$007C_$007C(resolvedType);\n    if (activePatternResult3345 != null) {\n        const typeInfo = activePatternResult3345;\n        return typeInfo;\n    }\n    else {\n        const activePatternResult3344 = $007CFuncType$007C_$007C(resolvedType);\n        if (activePatternResult3344 != null) {\n            const types = activePatternResult3344;\n            return new TypeInfo(32, (l = (new Lazy(() => map((resolvedType_1) => createTypeInfo(resolvedType_1), types))), () => lazyToDelayed(l, void 0)));\n        }\n        else {\n            const activePatternResult3343 = $007CRecordType$007C_$007C(resolvedType);\n            if (activePatternResult3343 != null) {\n                const fields = activePatternResult3343;\n                const l_1 = new Lazy(() => [Array.from(delay(() => collect((matchValue) => singleton(new RecordField(matchValue[1], createTypeInfo(matchValue[2]), matchValue[0])), fields))), resolvedType]);\n                return new TypeInfo(34, () => lazyToDelayed(l_1, void 0));\n            }\n            else {\n                const activePatternResult3342 = $007CUnionType$007C_$007C(resolvedType);\n                if (activePatternResult3342 != null) {\n                    const cases = activePatternResult3342;\n                    const l_2 = new Lazy(() => [Array.from(delay(() => collect((matchValue_1) => singleton(new UnionCase(matchValue_1[0], map((resolvedType_2) => createTypeInfo(resolvedType_2), matchValue_1[2]), matchValue_1[1])), cases))), resolvedType]);\n                    return new TypeInfo(35, () => lazyToDelayed(l_2, void 0));\n                }\n                else {\n                    const activePatternResult3341 = $007CEnumType$007C_$007C(resolvedType);\n                    if (activePatternResult3341 != null) {\n                        const elemType = activePatternResult3341;\n                        return new TypeInfo(33, (l_3 = (new Lazy(() => [createTypeInfo(elemType), resolvedType])), () => lazyToDelayed(l_3, void 0)));\n                    }\n                    else {\n                        const activePatternResult3340 = $007CListType$007C_$007C(resolvedType);\n                        if (activePatternResult3340 != null) {\n                            const elemType_1 = activePatternResult3340;\n                            return new TypeInfo(23, (l_4 = (new Lazy(() => createTypeInfo(elemType_1))), () => lazyToDelayed(l_4, void 0)));\n                        }\n                        else {\n                            const activePatternResult3339 = $007CResizeArrayType$007C_$007C(resolvedType);\n                            if (activePatternResult3339 != null) {\n                                const elemType_2 = activePatternResult3339;\n                                return new TypeInfo(30, (l_5 = (new Lazy(() => createTypeInfo(elemType_2))), () => lazyToDelayed(l_5, void 0)));\n                            }\n                            else {\n                                const activePatternResult3338 = $007CHashSetType$007C_$007C(resolvedType);\n                                if (activePatternResult3338 != null) {\n                                    const elemType_3 = activePatternResult3338;\n                                    return new TypeInfo(31, (l_6 = (new Lazy(() => createTypeInfo(elemType_3))), () => lazyToDelayed(l_6, void 0)));\n                                }\n                                else {\n                                    const activePatternResult3337 = $007CArrayType$007C_$007C(resolvedType);\n                                    if (activePatternResult3337 != null) {\n                                        const elemType_4 = activePatternResult3337;\n                                        return new TypeInfo(25, (l_7 = (new Lazy(() => createTypeInfo(elemType_4))), () => lazyToDelayed(l_7, void 0)));\n                                    }\n                                    else {\n                                        const activePatternResult3336 = $007CTupleType$007C_$007C(resolvedType);\n                                        if (activePatternResult3336 != null) {\n                                            const types_1 = activePatternResult3336;\n                                            return new TypeInfo(27, (l_8 = (new Lazy(() => map((resolvedType_3) => createTypeInfo(resolvedType_3), types_1))), () => lazyToDelayed(l_8, void 0)));\n                                        }\n                                        else {\n                                            const activePatternResult3335 = $007COptionType$007C_$007C(resolvedType);\n                                            if (activePatternResult3335 != null) {\n                                                const elemType_5 = activePatternResult3335;\n                                                return new TypeInfo(22, (l_9 = (new Lazy(() => createTypeInfo(elemType_5))), () => lazyToDelayed(l_9, void 0)));\n                                            }\n                                            else {\n                                                const activePatternResult3334 = $007CNullable$007C_$007C(resolvedType);\n                                                if (activePatternResult3334 != null) {\n                                                    const elemType_6 = activePatternResult3334;\n                                                    return new TypeInfo(22, (l_10 = (new Lazy(() => createTypeInfo(elemType_6))), () => lazyToDelayed(l_10, void 0)));\n                                                }\n                                                else {\n                                                    const activePatternResult3333 = $007CSetType$007C_$007C(resolvedType);\n                                                    if (activePatternResult3333 != null) {\n                                                        const elemType_7 = activePatternResult3333;\n                                                        return new TypeInfo(24, (l_11 = (new Lazy(() => createTypeInfo(elemType_7))), () => lazyToDelayed(l_11, void 0)));\n                                                    }\n                                                    else {\n                                                        const activePatternResult3332 = $007CMapType$007C_$007C(resolvedType);\n                                                        if (activePatternResult3332 != null) {\n                                                            const keyType = activePatternResult3332[0];\n                                                            const valueType = activePatternResult3332[1];\n                                                            return new TypeInfo(28, (l_12 = (new Lazy(() => [createTypeInfo(keyType), createTypeInfo(valueType)])), () => lazyToDelayed(l_12, void 0)));\n                                                        }\n                                                        else {\n                                                            const activePatternResult3331 = $007CDictionaryType$007C_$007C(resolvedType);\n                                                            if (activePatternResult3331 != null) {\n                                                                const keyType_1 = activePatternResult3331[0];\n                                                                const valueType_1 = activePatternResult3331[1];\n                                                                return new TypeInfo(29, (l_13 = (new Lazy(() => [createTypeInfo(keyType_1), createTypeInfo(valueType_1), valueType_1])), () => lazyToDelayed(l_13, void 0)));\n                                                            }\n                                                            else {\n                                                                const activePatternResult3330 = $007CSeqType$007C_$007C(resolvedType);\n                                                                if (activePatternResult3330 != null) {\n                                                                    const elemType_8 = activePatternResult3330;\n                                                                    return new TypeInfo(26, (l_14 = (new Lazy(() => createTypeInfo(elemType_8))), () => lazyToDelayed(l_14, void 0)));\n                                                                }\n                                                                else {\n                                                                    const activePatternResult3329 = $007CAsyncType$007C_$007C(resolvedType);\n                                                                    if (activePatternResult3329 != null) {\n                                                                        const elemType_9 = activePatternResult3329;\n                                                                        return new TypeInfo(20, (l_15 = (new Lazy(() => createTypeInfo(elemType_9))), () => lazyToDelayed(l_15, void 0)));\n                                                                    }\n                                                                    else {\n                                                                        const activePatternResult3328 = $007CPromiseType$007C_$007C(resolvedType);\n                                                                        if (activePatternResult3328 != null) {\n                                                                            const elemType_10 = activePatternResult3328;\n                                                                            return new TypeInfo(21, (l_16 = (new Lazy(() => createTypeInfo(elemType_10))), () => lazyToDelayed(l_16, void 0)));\n                                                                        }\n                                                                        else {\n                                                                            return new TypeInfo(19, (l_17 = (new Lazy(() => resolvedType)), () => lazyToDelayed(l_17, void 0)));\n                                                                        }\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nconst typeInfoCache = new Dictionary([], {\n    Equals: (x, y) => equals(x, y),\n    GetHashCode: (x) => structuralHash(x),\n});\n\nexport function createTypeInfo(resolvedType) {\n    let matchValue;\n    let outArg = null;\n    matchValue = [tryGetValue(typeInfoCache, resolvedType, new FSharpRef(() => outArg, (v) => {\n        outArg = v;\n    })), outArg];\n    if (matchValue[0]) {\n        return matchValue[1];\n    }\n    else {\n        const ti_1 = _createTypeInfo(resolvedType);\n        if (((!isNullOrEmpty(fullName(resolvedType))) ? (!endsWith(fullName(resolvedType), \"`1[]\")) : false) ? (!endsWith(fullName(resolvedType), \"`2[]\")) : false) {\n            typeInfoCache.set(resolvedType, ti_1);\n            return ti_1;\n        }\n        else {\n            return ti_1;\n        }\n    }\n}\n\nexport function isPrimitive(_arg1) {\n    switch (_arg1.tag) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n        case 6:\n        case 7:\n        case 8:\n        case 9:\n        case 10:\n        case 11:\n        case 12:\n        case 13:\n        case 14:\n        case 15:\n        case 17:\n        case 22: {\n            return true;\n        }\n        default: {\n            return false;\n        }\n    }\n}\n\nexport function enumUnion(_arg1) {\n    if (_arg1.tag === 35) {\n        return _arg1.fields[0]()[0].every((case$) => (case$.CaseTypes.length === 0));\n    }\n    else {\n        return false;\n    }\n}\n\n","import { toArray, isEmpty, find, count, containsKey, toList, tryFind, remove, ofList } from \"../fable-library.3.1.5/Map.js\";\nimport { map as map_3, choose, tryFind as tryFind_2, length, empty, ofSeq, singleton, ofArray } from \"../fable-library.3.1.5/List.js\";\nimport { FSharpRef, Union } from \"../fable-library.3.1.5/Types.js\";\nimport { getUnionFields, getRecordField, makeRecord, fullName, makeUnion, name as name_2, union_type, string_type } from \"../fable-library.3.1.5/Reflection.js\";\nimport { Json, Json$reflection } from \"./Json.fs.js\";\nimport { map as map_4, getEnumerator, collect, tryFind as tryFind_3, forAll, empty as empty_1, singleton as singleton_1, append, delay } from \"../fable-library.3.1.5/Seq.js\";\nimport { value as value_83, some, map as map_1 } from \"../fable-library.3.1.5/Option.js\";\nimport { toText, join, fromBase64String, printf, toFail, substring, endsWith } from \"../fable-library.3.1.5/String.js\";\nimport { parse } from \"../fable-library.3.1.5/Double.js\";\nimport { tryParse, parse as parse_1 } from \"../fable-library.3.1.5/Int32.js\";\nimport { toString as toString_2 } from \"../fable-library.3.1.5/Decimal.js\";\nimport Decimal from \"../fable-library.3.1.5/Decimal.js\";\nimport { toString, fromInteger, toNumber, tryParse as tryParse_1, fromInt, parse as parse_2, fromNumber } from \"../fable-library.3.1.5/Long.js\";\nimport { SimpleJson_stringify, SimpleJson_parseNative, SimpleJson_parse, SimpleJson_toString, SimpleJson_toPlainObject } from \"./SimpleJson.fs.js\";\nimport { toString as toString_1, fromInt32, parse as parse_3 } from \"../fable-library.3.1.5/BigInt.js\";\nimport { toString as toString_3, parse as parse_4 } from \"../fable-library.3.1.5/Date.js\";\nimport { parse as parse_5 } from \"../fable-library.3.1.5/DateOffset.js\";\nimport DateOffset from \"../fable-library.3.1.5/DateOffset.js\";\nimport { concat, mapIndexed, equalsWith, zip, map as map_2, tryFind as tryFind_1 } from \"../fable-library.3.1.5/Array.js\";\nimport { int32ToString, structuralHash, safeHash, equals, compare } from \"../fable-library.3.1.5/Util.js\";\nimport { parse as parse_6 } from \"../fable-library.3.1.5/Guid.js\";\nimport { getBytesInt32, toInt64 } from \"../fable-library.3.1.5/BitConverter.js\";\nimport { ofList as ofList_1 } from \"../fable-library.3.1.5/Set.js\";\nimport { TypeInfo } from \"./TypeInfo.fs.js\";\nimport { Dictionary } from \"../fable-library.3.1.5/MutableMap.js\";\nimport { addToSet, addToDict } from \"../fable-library.3.1.5/MapUtil.js\";\nimport { HashSet } from \"../fable-library.3.1.5/MutableSet.js\";\nimport { enumUnion, isPrimitive } from \"./TypeInfo.Converter.fs.js\";\nimport quote from \"./quote.js\";\n\nexport const Convert_insideBrowser = (new Function(\"try {return this===window;}catch(e){ return false;}\"))();\n\nfunction Convert_isDefined(value) {\n    return !((value === undefined));\n}\n\nexport function Convert_usingFable3() {\n    const map = JSON.parse(JSON.stringify(ofList(ofArray([[1, 1], [2, 2]]))));\n    const tree = map[\"tree\"];\n    if (Convert_isDefined(tree[\"k\"]) ? Convert_isDefined(tree[\"v\"]) : false) {\n        return Convert_isDefined(tree[\"h\"]);\n    }\n    else {\n        return false;\n    }\n}\n\nexport const Convert_isUsingFable3 = Convert_usingFable3();\n\nexport class Convert_InternalMap extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"MapEmpty\", \"MapOne\", \"MapNode\"];\n    }\n}\n\nexport function Convert_InternalMap$reflection() {\n    return union_type(\"Fable.SimpleJson.Convert.InternalMap\", [], Convert_InternalMap, () => [[], [[\"Item1\", string_type], [\"Item2\", Json$reflection()]], [[\"Item1\", string_type], [\"Item2\", Json$reflection()], [\"Item3\", Convert_InternalMap$reflection()], [\"Item4\", Convert_InternalMap$reflection()]]]);\n}\n\nexport function Convert_flattenMap(_arg1) {\n    switch (_arg1.tag) {\n        case 1: {\n            return singleton([_arg1.fields[0], _arg1.fields[1]]);\n        }\n        case 2: {\n            return ofSeq(delay(() => append(Convert_flattenMap(_arg1.fields[2]), delay(() => append(Convert_flattenMap(_arg1.fields[3]), delay(() => singleton_1([_arg1.fields[0], _arg1.fields[1]])))))));\n        }\n        default: {\n            return empty();\n        }\n    }\n}\n\nexport function Convert_$007CKeyValue$007C_$007C(key, map) {\n    return map_1((value) => [key, value, remove(key, map)], tryFind(key, map));\n}\n\nexport function Convert_$007CNonArray$007C_$007C(_arg1) {\n    if (_arg1.tag === 4) {\n        return void 0;\n    }\n    else {\n        return _arg1;\n    }\n}\n\nexport function Convert_$007CMapEmpty$007C_$007C(json) {\n    let pattern_matching_result;\n    if (json.tag === 1) {\n        if (json.fields[0] === \"MapEmpty\") {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return json;\n        }\n        case 1: {\n            return void 0;\n        }\n    }\n}\n\nexport function Convert_$007CMapKey$007C_$007C(_arg1) {\n    switch (_arg1.tag) {\n        case 0: {\n            return _arg1.fields[0].toString();\n        }\n        case 1: {\n            return _arg1.fields[0];\n        }\n        default: {\n            return void 0;\n        }\n    }\n}\n\nexport function Convert_$007CMapOne$007C_$007C(_arg1) {\n    let pattern_matching_result, key, value;\n    if (_arg1.tag === 4) {\n        if (_arg1.fields[0].tail != null) {\n            if (_arg1.fields[0].head.tag === 1) {\n                if (_arg1.fields[0].head.fields[0] === \"MapOne\") {\n                    if (_arg1.fields[0].tail.tail != null) {\n                        const activePatternResult3503 = Convert_$007CMapKey$007C_$007C(_arg1.fields[0].tail.head);\n                        if (activePatternResult3503 != null) {\n                            if (_arg1.fields[0].tail.tail.tail != null) {\n                                if (_arg1.fields[0].tail.tail.tail.tail == null) {\n                                    pattern_matching_result = 0;\n                                    key = activePatternResult3503;\n                                    value = _arg1.fields[0].tail.tail.head;\n                                }\n                                else {\n                                    pattern_matching_result = 1;\n                                }\n                            }\n                            else {\n                                pattern_matching_result = 1;\n                            }\n                        }\n                        else {\n                            pattern_matching_result = 1;\n                        }\n                    }\n                    else {\n                        pattern_matching_result = 1;\n                    }\n                }\n                else {\n                    pattern_matching_result = 1;\n                }\n            }\n            else {\n                pattern_matching_result = 1;\n            }\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return [key, value];\n        }\n        case 1: {\n            return void 0;\n        }\n    }\n}\n\nexport function Convert_$007CMapNode$007C_$007C(_arg1) {\n    let pattern_matching_result, key, left, right, value;\n    if (_arg1.tag === 4) {\n        if (_arg1.fields[0].tail != null) {\n            if (_arg1.fields[0].head.tag === 1) {\n                if (_arg1.fields[0].head.fields[0] === \"MapNode\") {\n                    if (_arg1.fields[0].tail.tail != null) {\n                        const activePatternResult3505 = Convert_$007CMapKey$007C_$007C(_arg1.fields[0].tail.head);\n                        if (activePatternResult3505 != null) {\n                            if (_arg1.fields[0].tail.tail.tail != null) {\n                                if (_arg1.fields[0].tail.tail.tail.tail != null) {\n                                    if (_arg1.fields[0].tail.tail.tail.tail.tail != null) {\n                                        if (_arg1.fields[0].tail.tail.tail.tail.tail.tail != null) {\n                                            if (_arg1.fields[0].tail.tail.tail.tail.tail.head.tag === 0) {\n                                                if (_arg1.fields[0].tail.tail.tail.tail.tail.tail.tail == null) {\n                                                    pattern_matching_result = 0;\n                                                    key = activePatternResult3505;\n                                                    left = _arg1.fields[0].tail.tail.tail.head;\n                                                    right = _arg1.fields[0].tail.tail.tail.tail.head;\n                                                    value = _arg1.fields[0].tail.tail.head;\n                                                }\n                                                else {\n                                                    pattern_matching_result = 1;\n                                                }\n                                            }\n                                            else {\n                                                pattern_matching_result = 1;\n                                            }\n                                        }\n                                        else {\n                                            pattern_matching_result = 1;\n                                        }\n                                    }\n                                    else {\n                                        pattern_matching_result = 1;\n                                    }\n                                }\n                                else {\n                                    pattern_matching_result = 1;\n                                }\n                            }\n                            else {\n                                pattern_matching_result = 1;\n                            }\n                        }\n                        else {\n                            pattern_matching_result = 1;\n                        }\n                    }\n                    else {\n                        pattern_matching_result = 1;\n                    }\n                }\n                else {\n                    pattern_matching_result = 1;\n                }\n            }\n            else {\n                pattern_matching_result = 1;\n            }\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return [key, value, left, right];\n        }\n        case 1: {\n            return void 0;\n        }\n    }\n}\n\nexport function Convert_generateMap(json) {\n    if (Convert_$007CMapEmpty$007C_$007C(json) != null) {\n        return new Convert_InternalMap(0);\n    }\n    else {\n        const activePatternResult3508 = Convert_$007CMapOne$007C_$007C(json);\n        if (activePatternResult3508 != null) {\n            const key = activePatternResult3508[0];\n            const value = activePatternResult3508[1];\n            return new Convert_InternalMap(1, key, value);\n        }\n        else {\n            const activePatternResult3507 = Convert_$007CMapNode$007C_$007C(json);\n            if (activePatternResult3507 != null) {\n                const key_1 = activePatternResult3507[0];\n                const left = activePatternResult3507[2];\n                const right = activePatternResult3507[3];\n                const value_1 = activePatternResult3507[1];\n                const matchValue = [Convert_generateMap(left), Convert_generateMap(right)];\n                let pattern_matching_result, leftMap, rightMap;\n                if (matchValue[0] != null) {\n                    if (matchValue[1] != null) {\n                        pattern_matching_result = 0;\n                        leftMap = matchValue[0];\n                        rightMap = matchValue[1];\n                    }\n                    else {\n                        pattern_matching_result = 1;\n                    }\n                }\n                else {\n                    pattern_matching_result = 1;\n                }\n                switch (pattern_matching_result) {\n                    case 0: {\n                        return new Convert_InternalMap(2, key_1, value_1, leftMap, rightMap);\n                    }\n                    case 1: {\n                        return void 0;\n                    }\n                }\n            }\n            else {\n                return void 0;\n            }\n        }\n    }\n}\n\nexport function Convert_flatteFable3Map(tree) {\n    return ofSeq(delay(() => {\n        let matchValue, key, value;\n        return append((matchValue = [tryFind(\"k\", tree), tryFind(\"v\", tree)], (matchValue[0] != null) ? ((matchValue[0].tag === 1) ? ((matchValue[1] != null) ? (key = matchValue[0].fields[0], (value = matchValue[1], singleton_1([key, value]))) : (void 0, empty_1())) : (void 0, empty_1())) : (void 0, empty_1())), delay(() => {\n            let matchValue_1, left;\n            return append((matchValue_1 = tryFind(\"left\", tree), (matchValue_1 != null) ? ((matchValue_1.tag === 5) ? (left = matchValue_1.fields[0], Convert_flatteFable3Map(left)) : (void 0, empty_1())) : (void 0, empty_1())), delay(() => {\n                const matchValue_2 = tryFind(\"right\", tree);\n                let pattern_matching_result, right;\n                if (matchValue_2 != null) {\n                    if (matchValue_2.tag === 5) {\n                        pattern_matching_result = 0;\n                        right = matchValue_2.fields[0];\n                    }\n                    else {\n                        pattern_matching_result = 1;\n                    }\n                }\n                else {\n                    pattern_matching_result = 1;\n                }\n                switch (pattern_matching_result) {\n                    case 0: {\n                        return Convert_flatteFable3Map(right);\n                    }\n                    case 1: {\n                        return empty_1();\n                    }\n                }\n            }));\n        }));\n    }));\n}\n\nexport function Convert_flattenFable3Lists(linkedList) {\n    return ofSeq(delay(() => {\n        let matchValue;\n        return append((matchValue = tryFind(\"head\", linkedList), (matchValue == null) ? (void 0, empty_1()) : singleton_1(matchValue)), delay(() => {\n            const matchValue_1 = tryFind(\"tail\", linkedList);\n            let pattern_matching_result, tail;\n            if (matchValue_1 != null) {\n                if (matchValue_1.tag === 5) {\n                    pattern_matching_result = 0;\n                    tail = matchValue_1.fields[0];\n                }\n                else {\n                    pattern_matching_result = 1;\n                }\n            }\n            else {\n                pattern_matching_result = 1;\n            }\n            switch (pattern_matching_result) {\n                case 0: {\n                    return Convert_flattenFable3Lists(tail);\n                }\n                case 1: {\n                    return empty_1();\n                }\n            }\n        }));\n    }));\n}\n\nexport function Convert_arrayLike(_arg1) {\n    switch (_arg1.tag) {\n        case 25: {\n            return true;\n        }\n        case 23: {\n            return true;\n        }\n        case 26: {\n            return true;\n        }\n        case 27: {\n            return true;\n        }\n        case 24: {\n            return true;\n        }\n        case 30: {\n            return true;\n        }\n        case 31: {\n            return true;\n        }\n        default: {\n            return false;\n        }\n    }\n}\n\nexport function Convert_isRecord(_arg1) {\n    if (_arg1.tag === 34) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nexport function Convert_unionOfRecords(_arg1) {\n    if (_arg1.tag === 35) {\n        return forAll((case$) => {\n            if (case$.CaseTypes.length === 1) {\n                return Convert_isRecord(case$.CaseTypes[0]);\n            }\n            else {\n                return false;\n            }\n        }, _arg1.fields[0]()[0]);\n    }\n    else {\n        return false;\n    }\n}\n\nexport function Convert_optional(_arg1) {\n    if (_arg1.tag === 22) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nexport function Convert_isQuoted(input) {\n    if (input.indexOf(\"\\\"\") === 0) {\n        return endsWith(input, \"\\\"\");\n    }\n    else {\n        return false;\n    }\n}\n\nexport function Convert_betweenQuotes(input) {\n    return (\"\\\"\" + input) + \"\\\"\";\n}\n\nexport function Convert_removeQuotes(input) {\n    return substring(input, 1, input.length - 2);\n}\n\nexport function Convert_fromJsonAs(input_mut, typeInfo_mut) {\n    let foundCase, foundCase_2, testExpr, values_8, tree_2, tree;\n    Convert_fromJsonAs:\n    while (true) {\n        const input = input_mut, typeInfo = typeInfo_mut;\n        const matchValue = [input, typeInfo];\n        let pattern_matching_result, value_1;\n        if (matchValue[0].tag === 0) {\n            if (matchValue[1].tag === 8) {\n                pattern_matching_result = 0;\n                value_1 = matchValue[0].fields[0];\n            }\n            else {\n                pattern_matching_result = 2;\n            }\n        }\n        else if (matchValue[0].tag === 1) {\n            if (matchValue[1].tag === 8) {\n                if (matchValue[0].fields[0].toLocaleLowerCase() === \"nan\") {\n                    pattern_matching_result = 1;\n                }\n                else {\n                    pattern_matching_result = 2;\n                }\n            }\n            else {\n                pattern_matching_result = 2;\n            }\n        }\n        else {\n            pattern_matching_result = 2;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return value_1;\n            }\n            case 1: {\n                return NaN;\n            }\n            case 2: {\n                let pattern_matching_result_1, value_4, value_5;\n                if (matchValue[0].tag === 1) {\n                    if (matchValue[1].tag === 8) {\n                        pattern_matching_result_1 = 0;\n                        value_4 = matchValue[0].fields[0];\n                    }\n                    else if (matchValue[1].tag === 7) {\n                        if (matchValue[0].fields[0].toLocaleLowerCase() === \"nan\") {\n                            pattern_matching_result_1 = 2;\n                        }\n                        else {\n                            pattern_matching_result_1 = 3;\n                        }\n                    }\n                    else {\n                        pattern_matching_result_1 = 3;\n                    }\n                }\n                else if (matchValue[0].tag === 0) {\n                    if (matchValue[1].tag === 7) {\n                        pattern_matching_result_1 = 1;\n                        value_5 = matchValue[0].fields[0];\n                    }\n                    else {\n                        pattern_matching_result_1 = 3;\n                    }\n                }\n                else {\n                    pattern_matching_result_1 = 3;\n                }\n                switch (pattern_matching_result_1) {\n                    case 0: {\n                        return parse(value_4);\n                    }\n                    case 1: {\n                        return value_5;\n                    }\n                    case 2: {\n                        return NaN;\n                    }\n                    case 3: {\n                        let pattern_matching_result_2, value_7, value_8, value_9, value_10, value_11, value_12, value_13, value_14, value_15, value_16, value_17, value_18, value_19, value_20, value_21, value_22, value_23, getlElemType, value_24, getElemType, value_25, getElemType_1, value_26, genericJson, value_27, value_28, value_29, value_30, value_31, value_32, value_33, value_34, getTypes, values, jsonValue_5, optionalTypeDelayed_5;\n                        if (matchValue[0].tag === 1) {\n                            if (matchValue[1].tag === 7) {\n                                pattern_matching_result_2 = 0;\n                                value_7 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 5) {\n                                pattern_matching_result_2 = 3;\n                                value_10 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 1) {\n                                pattern_matching_result_2 = 4;\n                                value_11 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 9) {\n                                pattern_matching_result_2 = 6;\n                                value_13 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 10) {\n                                pattern_matching_result_2 = 8;\n                                value_15 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 2) {\n                                pattern_matching_result_2 = 11;\n                                value_18 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 3) {\n                                pattern_matching_result_2 = 13;\n                                value_20 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 4) {\n                                pattern_matching_result_2 = 15;\n                                value_22 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 33) {\n                                pattern_matching_result_2 = 17;\n                                getlElemType = matchValue[1].fields[0];\n                                value_24 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 25) {\n                                pattern_matching_result_2 = 19;\n                                getElemType_1 = matchValue[1].fields[0];\n                                value_26 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 18) {\n                                pattern_matching_result_2 = 22;\n                                genericJson = matchValue[0];\n                            }\n                            else if (matchValue[1].tag === 11) {\n                                pattern_matching_result_2 = 23;\n                                value_27 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 12) {\n                                pattern_matching_result_2 = 24;\n                                value_28 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 15) {\n                                pattern_matching_result_2 = 26;\n                                value_30 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 13) {\n                                pattern_matching_result_2 = 28;\n                                value_32 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 14) {\n                                pattern_matching_result_2 = 29;\n                                value_33 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 22) {\n                                if (!equals(matchValue[0], new Json(3))) {\n                                    pattern_matching_result_2 = 33;\n                                    jsonValue_5 = matchValue[0];\n                                    optionalTypeDelayed_5 = matchValue[1].fields[0];\n                                }\n                                else {\n                                    pattern_matching_result_2 = 34;\n                                }\n                            }\n                            else {\n                                pattern_matching_result_2 = 34;\n                            }\n                        }\n                        else if (matchValue[0].tag === 0) {\n                            if (matchValue[1].tag === 5) {\n                                pattern_matching_result_2 = 1;\n                                value_8 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 1) {\n                                pattern_matching_result_2 = 5;\n                                value_12 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 9) {\n                                pattern_matching_result_2 = 7;\n                                value_14 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 10) {\n                                pattern_matching_result_2 = 9;\n                                value_16 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 2) {\n                                pattern_matching_result_2 = 10;\n                                value_17 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 3) {\n                                pattern_matching_result_2 = 12;\n                                value_19 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 4) {\n                                pattern_matching_result_2 = 14;\n                                value_21 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 16) {\n                                pattern_matching_result_2 = 16;\n                                value_23 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 33) {\n                                pattern_matching_result_2 = 18;\n                                getElemType = matchValue[1].fields[0];\n                                value_25 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 18) {\n                                pattern_matching_result_2 = 22;\n                                genericJson = matchValue[0];\n                            }\n                            else if (matchValue[1].tag === 12) {\n                                pattern_matching_result_2 = 25;\n                                value_29 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 15) {\n                                pattern_matching_result_2 = 27;\n                                value_31 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 14) {\n                                pattern_matching_result_2 = 30;\n                                value_34 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 22) {\n                                if (!equals(matchValue[0], new Json(3))) {\n                                    pattern_matching_result_2 = 33;\n                                    jsonValue_5 = matchValue[0];\n                                    optionalTypeDelayed_5 = matchValue[1].fields[0];\n                                }\n                                else {\n                                    pattern_matching_result_2 = 34;\n                                }\n                            }\n                            else {\n                                pattern_matching_result_2 = 34;\n                            }\n                        }\n                        else if (matchValue[0].tag === 2) {\n                            if (matchValue[1].tag === 6) {\n                                pattern_matching_result_2 = 2;\n                                value_9 = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 18) {\n                                pattern_matching_result_2 = 22;\n                                genericJson = matchValue[0];\n                            }\n                            else if (matchValue[1].tag === 22) {\n                                if (!equals(matchValue[0], new Json(3))) {\n                                    pattern_matching_result_2 = 33;\n                                    jsonValue_5 = matchValue[0];\n                                    optionalTypeDelayed_5 = matchValue[1].fields[0];\n                                }\n                                else {\n                                    pattern_matching_result_2 = 34;\n                                }\n                            }\n                            else {\n                                pattern_matching_result_2 = 34;\n                            }\n                        }\n                        else if (matchValue[0].tag === 3) {\n                            if (matchValue[1].tag === 1) {\n                                pattern_matching_result_2 = 20;\n                            }\n                            else if (matchValue[1].tag === 0) {\n                                pattern_matching_result_2 = 21;\n                            }\n                            else if (matchValue[1].tag === 18) {\n                                pattern_matching_result_2 = 22;\n                                genericJson = matchValue[0];\n                            }\n                            else if (matchValue[1].tag === 22) {\n                                pattern_matching_result_2 = 32;\n                            }\n                            else {\n                                pattern_matching_result_2 = 34;\n                            }\n                        }\n                        else if (matchValue[0].tag === 5) {\n                            if (matchValue[1].tag === 18) {\n                                pattern_matching_result_2 = 22;\n                                genericJson = matchValue[0];\n                            }\n                            else if (matchValue[1].tag === 35) {\n                                pattern_matching_result_2 = 31;\n                                getTypes = matchValue[1].fields[0];\n                                values = matchValue[0].fields[0];\n                            }\n                            else if (matchValue[1].tag === 22) {\n                                if (!equals(matchValue[0], new Json(3))) {\n                                    pattern_matching_result_2 = 33;\n                                    jsonValue_5 = matchValue[0];\n                                    optionalTypeDelayed_5 = matchValue[1].fields[0];\n                                }\n                                else {\n                                    pattern_matching_result_2 = 34;\n                                }\n                            }\n                            else {\n                                pattern_matching_result_2 = 34;\n                            }\n                        }\n                        else if (matchValue[1].tag === 18) {\n                            pattern_matching_result_2 = 22;\n                            genericJson = matchValue[0];\n                        }\n                        else if (matchValue[1].tag === 22) {\n                            if (!equals(matchValue[0], new Json(3))) {\n                                pattern_matching_result_2 = 33;\n                                jsonValue_5 = matchValue[0];\n                                optionalTypeDelayed_5 = matchValue[1].fields[0];\n                            }\n                            else {\n                                pattern_matching_result_2 = 34;\n                            }\n                        }\n                        else {\n                            pattern_matching_result_2 = 34;\n                        }\n                        switch (pattern_matching_result_2) {\n                            case 0: {\n                                return parse(value_7);\n                            }\n                            case 1: {\n                                return Math.floor(value_8);\n                            }\n                            case 2: {\n                                return value_9;\n                            }\n                            case 3: {\n                                return parse_1(value_10, 511, false, 32);\n                            }\n                            case 4: {\n                                return value_11;\n                            }\n                            case 5: {\n                                return value_12.toString();\n                            }\n                            case 6: {\n                                return new Decimal(value_13);\n                            }\n                            case 7: {\n                                return new Decimal(value_14);\n                            }\n                            case 8: {\n                                return parse_1(value_15, 511, false, 16);\n                            }\n                            case 9: {\n                                return (value_16 + 0x8000 & 0xFFFF) - 0x8000;\n                            }\n                            case 10: {\n                                return value_17 & 0xFFFF;\n                            }\n                            case 11: {\n                                return parse_1(value_18, 511, true, 16);\n                            }\n                            case 12: {\n                                return value_19 >>> 0;\n                            }\n                            case 13: {\n                                return parse_1(value_20, 511, true, 32);\n                            }\n                            case 14: {\n                                return fromNumber(value_21, true);\n                            }\n                            case 15: {\n                                return parse_2(value_22, 511, true, 64);\n                            }\n                            case 16: {\n                                return Math.floor(value_23);\n                            }\n                            case 17: {\n                                const patternInput = getlElemType();\n                                const underlyingType = patternInput[0];\n                                const originalType = patternInput[1];\n                                switch (underlyingType.tag) {\n                                    case 5: {\n                                        let matchValue_1;\n                                        let outArg = 0;\n                                        matchValue_1 = [tryParse(value_24, 511, false, 32, new FSharpRef(() => outArg, (v) => {\n                                            outArg = v;\n                                        })), outArg];\n                                        if (matchValue_1[0]) {\n                                            return matchValue_1[1];\n                                        }\n                                        else {\n                                            const arg20 = name_2(originalType);\n                                            return toFail(printf(\"The value \\u0027%s\\u0027 is not valid for enum of type \\u0027%s\\u0027\"))(value_24)(arg20);\n                                        }\n                                    }\n                                    case 11: {\n                                        let matchValue_2;\n                                        let outArg_1 = fromInt(0);\n                                        matchValue_2 = [tryParse_1(value_24, 511, false, 64, new FSharpRef(() => outArg_1, (v_1) => {\n                                            outArg_1 = v_1;\n                                        })), outArg_1];\n                                        if (matchValue_2[0]) {\n                                            return matchValue_2[1];\n                                        }\n                                        else {\n                                            const arg20_1 = name_2(originalType);\n                                            return toFail(printf(\"The value \\u0027%s\\u0027 is not valid for enum of type \\u0027%s\\u0027\"))(value_24)(arg20_1);\n                                        }\n                                    }\n                                    default: {\n                                        const arg20_2 = name_2(originalType);\n                                        return toFail(printf(\"The value \\u0027%s\\u0027 cannot be converted to enum of type \\u0027%s\\u0027\"))(value_24)(arg20_2);\n                                    }\n                                }\n                            }\n                            case 18: {\n                                const patternInput_1 = getElemType();\n                                return value_25;\n                            }\n                            case 19: {\n                                const elemType = getElemType_1();\n                                if (elemType.tag === 12) {\n                                    if ((typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) ? true : Convert_insideBrowser) {\n                                        return fromBase64String(value_26);\n                                    }\n                                    else {\n                                        return Array.prototype.slice.call(Buffer.from(value_26, 'base64'));\n                                    }\n                                }\n                                else {\n                                    return toFail(printf(\"Cannot convert arbitrary string \\u0027%s\\u0027 to %A\"))(value_26)(elemType);\n                                }\n                            }\n                            case 20: {\n                                return null;\n                            }\n                            case 21: {\n                                return void 0;\n                            }\n                            case 22: {\n                                return SimpleJson_toPlainObject(genericJson);\n                            }\n                            case 23: {\n                                return parse_2(value_27, 511, false, 64);\n                            }\n                            case 24: {\n                                return parse_1(value_28, 511, true, 8);\n                            }\n                            case 25: {\n                                return value_29 & 0xFF;\n                            }\n                            case 26: {\n                                return parse_3(value_30);\n                            }\n                            case 27: {\n                                return fromInt32(Math.floor(value_31));\n                            }\n                            case 28: {\n                                return parse_4(value_32);\n                            }\n                            case 29: {\n                                return parse_5(value_33);\n                            }\n                            case 30: {\n                                return DateOffset(toNumber(fromNumber(Math.floor(value_34), false)) * 1000, 0);\n                            }\n                            case 31: {\n                                const patternInput_2 = getTypes();\n                                const unionType = patternInput_2[1];\n                                const cases = patternInput_2[0];\n                                const matchValue_3 = toList(values);\n                                let pattern_matching_result_3, caseName, values_1, caseName_1, json;\n                                if (matchValue_3.tail != null) {\n                                    if (matchValue_3.head[1].tag === 4) {\n                                        if (matchValue_3.tail.tail == null) {\n                                            pattern_matching_result_3 = 0;\n                                            caseName = matchValue_3.head[0];\n                                            values_1 = matchValue_3.head[1].fields[0];\n                                        }\n                                        else {\n                                            pattern_matching_result_3 = 2;\n                                        }\n                                    }\n                                    else {\n                                        const activePatternResult3537 = Convert_$007CNonArray$007C_$007C(matchValue_3.head[1]);\n                                        if (activePatternResult3537 != null) {\n                                            if (matchValue_3.tail.tail == null) {\n                                                pattern_matching_result_3 = 1;\n                                                caseName_1 = matchValue_3.head[0];\n                                                json = activePatternResult3537;\n                                            }\n                                            else {\n                                                pattern_matching_result_3 = 2;\n                                            }\n                                        }\n                                        else {\n                                            pattern_matching_result_3 = 2;\n                                        }\n                                    }\n                                }\n                                else {\n                                    pattern_matching_result_3 = 2;\n                                }\n                                switch (pattern_matching_result_3) {\n                                    case 0: {\n                                        const _arg1 = tryFind_1((case$) => (case$.CaseName === caseName), cases);\n                                        if (_arg1 != null) {\n                                            if (foundCase = _arg1, (foundCase.CaseTypes.length === 1) ? Convert_arrayLike(foundCase.CaseTypes[0]) : false) {\n                                                const foundCase_1 = _arg1;\n                                                return makeUnion(foundCase_1.Info, [Convert_fromJsonAs(new Json(4, values_1), foundCase_1.CaseTypes[0])]);\n                                            }\n                                            else {\n                                                let pattern_matching_result_4, foundCase_3;\n                                                if (_arg1 != null) {\n                                                    if (foundCase_2 = _arg1, (foundCase_2.CaseTypes.length === 1) ? Convert_optional(foundCase_2.CaseTypes[0]) : false) {\n                                                        pattern_matching_result_4 = 0;\n                                                        foundCase_3 = _arg1;\n                                                    }\n                                                    else {\n                                                        pattern_matching_result_4 = 1;\n                                                    }\n                                                }\n                                                else {\n                                                    pattern_matching_result_4 = 1;\n                                                }\n                                                switch (pattern_matching_result_4) {\n                                                    case 0: {\n                                                        return makeUnion(foundCase_3.Info, [Convert_fromJsonAs(new Json(4, values_1), foundCase_3.CaseTypes[0])]);\n                                                    }\n                                                    case 1: {\n                                                        if (_arg1 != null) {\n                                                            const foundCase_4 = _arg1;\n                                                            if (((foundCase_4.CaseTypes.length === 1) ? (!Convert_arrayLike(foundCase_4.CaseTypes[0])) : false) ? (foundCase_4.CaseTypes.length !== length(values_1)) : false) {\n                                                                const arg30_1 = length(values_1) | 0;\n                                                                const arg20_5 = foundCase_4.CaseTypes.length | 0;\n                                                                toFail(printf(\"Expected case \\u0027%s\\u0027 to have %d argument types but the JSON data only contained %d values\"))(foundCase_4.CaseName)(arg20_5)(arg30_1);\n                                                            }\n                                                            return makeUnion(foundCase_4.Info, map_2((tupledArg) => Convert_fromJsonAs(tupledArg[1], tupledArg[0]), zip(foundCase_4.CaseTypes, Array.from(values_1))));\n                                                        }\n                                                        else {\n                                                            throw (new Error(\"The match cases were incomplete\"));\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            const expectedCases = join(\", \", map_2((case$_1) => toText(printf(\" \\u0027%s\\u0027 \"))(case$_1.CaseName), cases));\n                                            const arg20_4 = name_2(unionType);\n                                            return toFail(printf(\"Case %s was not valid for type \\u0027%s\\u0027, expected one of the cases [%s]\"))(caseName)(arg20_4)(expectedCases);\n                                        }\n                                    }\n                                    case 1: {\n                                        const _arg2 = tryFind_1((case$_2) => (case$_2.CaseName === caseName_1), cases);\n                                        let pattern_matching_result_5, caseInfo, caseName_2, caseType;\n                                        if (_arg2 != null) {\n                                            if (testExpr = _arg2.CaseTypes, (!equalsWith((x, y) => compare(x, y), testExpr, null)) ? (testExpr.length === 1) : false) {\n                                                pattern_matching_result_5 = 0;\n                                                caseInfo = _arg2.Info;\n                                                caseName_2 = _arg2.CaseName;\n                                                caseType = _arg2.CaseTypes[0];\n                                            }\n                                            else {\n                                                pattern_matching_result_5 = 1;\n                                            }\n                                        }\n                                        else {\n                                            pattern_matching_result_5 = 1;\n                                        }\n                                        switch (pattern_matching_result_5) {\n                                            case 0: {\n                                                return makeUnion(caseInfo, [((input_1) => ((typeInfo_1) => Convert_fromJsonAs(input_1, typeInfo_1)))(json)(caseType)]);\n                                            }\n                                            case 1: {\n                                                const expectedCases_1 = join(\", \", map_2((case$_3) => toText(printf(\" \\u0027%s\\u0027 \"))(case$_3.CaseName), cases));\n                                                const arg20_7 = name_2(unionType);\n                                                return toFail(printf(\"Case %s was not valid for type \\u0027%s\\u0027, expected one of the cases [%s]\"))(caseName_1)(arg20_7)(expectedCases_1);\n                                            }\n                                        }\n                                    }\n                                    case 2: {\n                                        if ((containsKey(\"tag\", values) ? containsKey(\"fields\", values) : false) ? (count(values) === 2) : false) {\n                                            const matchValue_4 = [tryFind(\"tag\", values), tryFind(\"fields\", values)];\n                                            let pattern_matching_result_6, caseIndex, fieldValues;\n                                            if (matchValue_4[0] != null) {\n                                                if (matchValue_4[0].tag === 0) {\n                                                    if (matchValue_4[1] != null) {\n                                                        if (matchValue_4[1].tag === 4) {\n                                                            pattern_matching_result_6 = 0;\n                                                            caseIndex = matchValue_4[0].fields[0];\n                                                            fieldValues = matchValue_4[1].fields[0];\n                                                        }\n                                                        else {\n                                                            pattern_matching_result_6 = 1;\n                                                        }\n                                                    }\n                                                    else {\n                                                        pattern_matching_result_6 = 1;\n                                                    }\n                                                }\n                                                else {\n                                                    pattern_matching_result_6 = 1;\n                                                }\n                                            }\n                                            else {\n                                                pattern_matching_result_6 = 1;\n                                            }\n                                            switch (pattern_matching_result_6) {\n                                                case 0: {\n                                                    const foundCase_5 = cases[~(~caseIndex)];\n                                                    return makeUnion(foundCase_5.Info, mapIndexed((index, value_40) => Convert_fromJsonAs(value_40, foundCase_5.CaseTypes[index]), Array.from(fieldValues)));\n                                                }\n                                                case 1: {\n                                                    const arg20_8 = fullName(unionType);\n                                                    const arg10_10 = SimpleJson_toString(new Json(5, values));\n                                                    return toFail(printf(\"Could not deserialize JSON(%s) into type %s\"))(arg10_10)(arg20_8);\n                                                }\n                                            }\n                                        }\n                                        else if (Convert_unionOfRecords(typeInfo)) {\n                                            const foundDiscriminatorKey = tryFind_2((keyword) => containsKey(keyword, values), ofArray([\"__typename\", \"$typename\", \"$type\"]));\n                                            if (foundDiscriminatorKey != null) {\n                                                const discriminatorValueJson = find(foundDiscriminatorKey, values);\n                                                if (discriminatorValueJson.tag === 1) {\n                                                    const discriminatorValue = discriminatorValueJson.fields[0];\n                                                    const foundUnionCase = tryFind_3((case$_4) => (case$_4.CaseName.toUpperCase() === discriminatorValue.toUpperCase()), cases);\n                                                    if (foundUnionCase != null) {\n                                                        const case$_5 = foundUnionCase;\n                                                        return makeUnion(case$_5.Info, [Convert_fromJsonAs(new Json(5, values), case$_5.CaseTypes[0])]);\n                                                    }\n                                                    else {\n                                                        const arg10_12 = name_2(unionType);\n                                                        return toFail(printf(\"Union of records of type \\u0027%s\\u0027 does not have a matching case \\u0027%s\\u0027\"))(arg10_12)(discriminatorValue);\n                                                    }\n                                                }\n                                                else {\n                                                    const arg10_13 = name_2(unionType);\n                                                    return toFail(printf(\"Union of records of type \\u0027%s\\u0027 cannot be deserialized with the value of the discriminator key is not a string to match against a specific union case\"))(arg10_13);\n                                                }\n                                            }\n                                            else {\n                                                const arg10_11 = name_2(unionType);\n                                                return toFail(printf(\"Could not serialize the JSON object into the union of records of type %s because the JSON did not contain a known discriminator. Expected \\u0027__typename\\u0027, \\u0027$typeName\\u0027 or \\u0027$type\\u0027\"))(arg10_11);\n                                            }\n                                        }\n                                        else {\n                                            const unexpectedJson = JSON.stringify(matchValue_3);\n                                            const expectedType = JSON.stringify(cases);\n                                            return toFail(printf(\"Expected JSON:\\n%s\\nto match the type\\n%s\"))(unexpectedJson)(expectedType);\n                                        }\n                                    }\n                                }\n                            }\n                            case 32: {\n                                return void 0;\n                            }\n                            case 33: {\n                                return ((arg0) => some(arg0))(Convert_fromJsonAs(jsonValue_5, optionalTypeDelayed_5()));\n                            }\n                            case 34: {\n                                let pattern_matching_result_7, value_41, value_42, dict, caseName_4, getTypes_2;\n                                if (matchValue[0].tag === 1) {\n                                    if (matchValue[1].tag === 17) {\n                                        pattern_matching_result_7 = 0;\n                                        value_41 = matchValue[0].fields[0];\n                                    }\n                                    else if (matchValue[1].tag === 35) {\n                                        if (Convert_isQuoted(matchValue[0].fields[0])) {\n                                            pattern_matching_result_7 = 3;\n                                            caseName_4 = matchValue[0].fields[0];\n                                            getTypes_2 = matchValue[1].fields[0];\n                                        }\n                                        else {\n                                            pattern_matching_result_7 = 4;\n                                        }\n                                    }\n                                    else {\n                                        pattern_matching_result_7 = 4;\n                                    }\n                                }\n                                else if (matchValue[0].tag === 0) {\n                                    if (matchValue[1].tag === 11) {\n                                        pattern_matching_result_7 = 1;\n                                        value_42 = matchValue[0].fields[0];\n                                    }\n                                    else {\n                                        pattern_matching_result_7 = 4;\n                                    }\n                                }\n                                else if (matchValue[0].tag === 5) {\n                                    if (matchValue[1].tag === 11) {\n                                        pattern_matching_result_7 = 2;\n                                        dict = matchValue[0].fields[0];\n                                    }\n                                    else {\n                                        pattern_matching_result_7 = 4;\n                                    }\n                                }\n                                else {\n                                    pattern_matching_result_7 = 4;\n                                }\n                                switch (pattern_matching_result_7) {\n                                    case 0: {\n                                        return parse_6(value_41);\n                                    }\n                                    case 1: {\n                                        return ((value_43) => fromInteger(value_43, false, 2))(~(~value_42));\n                                    }\n                                    case 2: {\n                                        const get$ = (key) => tryFind(key, dict);\n                                        const _arg3 = choose((x_1) => x_1, ofArray([get$(\"low\"), get$(\"high\"), get$(\"unsigned\")]));\n                                        let pattern_matching_result_8, high, low;\n                                        if (_arg3.tail != null) {\n                                            if (_arg3.head.tag === 0) {\n                                                if (_arg3.tail.tail != null) {\n                                                    if (_arg3.tail.head.tag === 0) {\n                                                        if (_arg3.tail.tail.tail != null) {\n                                                            if (_arg3.tail.tail.head.tag === 2) {\n                                                                if (_arg3.tail.tail.tail.tail == null) {\n                                                                    pattern_matching_result_8 = 0;\n                                                                    high = _arg3.tail.head.fields[0];\n                                                                    low = _arg3.head.fields[0];\n                                                                }\n                                                                else {\n                                                                    pattern_matching_result_8 = 1;\n                                                                }\n                                                            }\n                                                            else {\n                                                                pattern_matching_result_8 = 1;\n                                                            }\n                                                        }\n                                                        else {\n                                                            pattern_matching_result_8 = 1;\n                                                        }\n                                                    }\n                                                    else {\n                                                        pattern_matching_result_8 = 1;\n                                                    }\n                                                }\n                                                else {\n                                                    pattern_matching_result_8 = 1;\n                                                }\n                                            }\n                                            else {\n                                                pattern_matching_result_8 = 1;\n                                            }\n                                        }\n                                        else {\n                                            pattern_matching_result_8 = 1;\n                                        }\n                                        switch (pattern_matching_result_8) {\n                                            case 0: {\n                                                return toInt64(concat([getBytesInt32(~(~low)), getBytesInt32(~(~high))], Uint8Array), 0);\n                                            }\n                                            case 1: {\n                                                return toFail(printf(\"Unable to construct int64 from object literal { low: int, high: int, unsigned: bool }\"));\n                                            }\n                                        }\n                                    }\n                                    case 3: {\n                                        const patternInput_3 = getTypes_2();\n                                        const caseTypes = patternInput_3[0];\n                                        const _arg4 = tryFind_1((case$_6) => (case$_6.CaseName === Convert_removeQuotes(caseName_4)), caseTypes);\n                                        if (_arg4 == null) {\n                                            const expectedCases_2 = join(\", \", map_2((case$_7) => toText(printf(\" \\u0027%s\\u0027 \"))(case$_7.CaseName), caseTypes));\n                                            const arg20_11 = name_2(patternInput_3[1]);\n                                            return toFail(printf(\"Case %s was not valid for type \\u0027%s\\u0027, expected one of the cases [%s]\"))(caseName_4)(arg20_11)(expectedCases_2);\n                                        }\n                                        else {\n                                            return makeUnion(_arg4.Info, []);\n                                        }\n                                    }\n                                    case 4: {\n                                        let pattern_matching_result_9, caseName_5, getTypes_3, getFields, serializedRecord, caseValue, getTypes_4, elementTypeDelayed, values_4, elementTypeDelayed_1, values_5, elementTypeDelayed_2, linkedList, elementTypeDelayed_3, values_6, elementTypeDelayed_4, values_7, array_9, tupleTypesDelayed, dict_1, getTypes_5, getTypes_6, tuples, getTypes_7, tuples_1, dict_2, getTypes_8, getType, items, getTypes_9, map, getType_1;\n                                        if (matchValue[0].tag === 1) {\n                                            if (matchValue[1].tag === 35) {\n                                                pattern_matching_result_9 = 0;\n                                                caseName_5 = matchValue[0].fields[0];\n                                                getTypes_3 = matchValue[1].fields[0];\n                                            }\n                                            else if (matchValue[1].tag === 34) {\n                                                pattern_matching_result_9 = 1;\n                                                getFields = matchValue[1].fields[0];\n                                                serializedRecord = matchValue[0].fields[0];\n                                            }\n                                            else if (matchValue[1].tag === 19) {\n                                                pattern_matching_result_9 = 15;\n                                                getType_1 = matchValue[1].fields[0];\n                                            }\n                                            else {\n                                                pattern_matching_result_9 = 16;\n                                            }\n                                        }\n                                        else if (matchValue[0].tag === 4) {\n                                            if (matchValue[1].tag === 35) {\n                                                pattern_matching_result_9 = 2;\n                                                caseValue = matchValue[0].fields[0];\n                                                getTypes_4 = matchValue[1].fields[0];\n                                            }\n                                            else if (matchValue[1].tag === 25) {\n                                                pattern_matching_result_9 = 3;\n                                                elementTypeDelayed = matchValue[1].fields[0];\n                                                values_4 = matchValue[0].fields[0];\n                                            }\n                                            else if (matchValue[1].tag === 23) {\n                                                pattern_matching_result_9 = 4;\n                                                elementTypeDelayed_1 = matchValue[1].fields[0];\n                                                values_5 = matchValue[0].fields[0];\n                                            }\n                                            else if (matchValue[1].tag === 24) {\n                                                pattern_matching_result_9 = 6;\n                                                elementTypeDelayed_3 = matchValue[1].fields[0];\n                                                values_6 = matchValue[0].fields[0];\n                                            }\n                                            else if (matchValue[1].tag === 26) {\n                                                pattern_matching_result_9 = 7;\n                                                elementTypeDelayed_4 = matchValue[1].fields[0];\n                                                values_7 = matchValue[0].fields[0];\n                                            }\n                                            else if (matchValue[1].tag === 27) {\n                                                pattern_matching_result_9 = 8;\n                                                array_9 = matchValue[0].fields[0];\n                                                tupleTypesDelayed = matchValue[1].fields[0];\n                                            }\n                                            else if (matchValue[1].tag === 28) {\n                                                pattern_matching_result_9 = 10;\n                                                getTypes_6 = matchValue[1].fields[0];\n                                                tuples = matchValue[0].fields[0];\n                                            }\n                                            else if (matchValue[1].tag === 29) {\n                                                pattern_matching_result_9 = 11;\n                                                getTypes_7 = matchValue[1].fields[0];\n                                                tuples_1 = matchValue[0].fields[0];\n                                            }\n                                            else if (matchValue[1].tag === 31) {\n                                                pattern_matching_result_9 = 13;\n                                                getType = matchValue[1].fields[0];\n                                                items = matchValue[0].fields[0];\n                                            }\n                                            else if (matchValue[1].tag === 19) {\n                                                pattern_matching_result_9 = 15;\n                                                getType_1 = matchValue[1].fields[0];\n                                            }\n                                            else {\n                                                pattern_matching_result_9 = 16;\n                                            }\n                                        }\n                                        else if (matchValue[0].tag === 5) {\n                                            if (matchValue[1].tag === 23) {\n                                                pattern_matching_result_9 = 5;\n                                                elementTypeDelayed_2 = matchValue[1].fields[0];\n                                                linkedList = matchValue[0].fields[0];\n                                            }\n                                            else if (matchValue[1].tag === 34) {\n                                                pattern_matching_result_9 = 9;\n                                                dict_1 = matchValue[0].fields[0];\n                                                getTypes_5 = matchValue[1].fields[0];\n                                            }\n                                            else if (matchValue[1].tag === 29) {\n                                                pattern_matching_result_9 = 12;\n                                                dict_2 = matchValue[0].fields[0];\n                                                getTypes_8 = matchValue[1].fields[0];\n                                            }\n                                            else if (matchValue[1].tag === 28) {\n                                                pattern_matching_result_9 = 14;\n                                                getTypes_9 = matchValue[1].fields[0];\n                                                map = matchValue[0].fields[0];\n                                            }\n                                            else if (matchValue[1].tag === 19) {\n                                                pattern_matching_result_9 = 15;\n                                                getType_1 = matchValue[1].fields[0];\n                                            }\n                                            else {\n                                                pattern_matching_result_9 = 16;\n                                            }\n                                        }\n                                        else if (matchValue[1].tag === 19) {\n                                            pattern_matching_result_9 = 15;\n                                            getType_1 = matchValue[1].fields[0];\n                                        }\n                                        else {\n                                            pattern_matching_result_9 = 16;\n                                        }\n                                        switch (pattern_matching_result_9) {\n                                            case 0: {\n                                                const patternInput_4 = getTypes_3();\n                                                const caseTypes_1 = patternInput_4[0];\n                                                const _arg5 = tryFind_1((case$_8) => (case$_8.CaseName === caseName_5), caseTypes_1);\n                                                if (_arg5 == null) {\n                                                    const expectedCases_3 = join(\", \", map_2((case$_9) => toText(printf(\" \\u0027%s\\u0027 \"))(case$_9.CaseName), caseTypes_1));\n                                                    const arg20_12 = name_2(patternInput_4[1]);\n                                                    return toFail(printf(\"Case %s was not valid for type \\u0027%s\\u0027, expected one of the cases [%s]\"))(caseName_5)(arg20_12)(expectedCases_3);\n                                                }\n                                                else {\n                                                    return makeUnion(_arg5.Info, []);\n                                                }\n                                            }\n                                            case 1: {\n                                                input_mut = SimpleJson_parse(serializedRecord);\n                                                typeInfo_mut = typeInfo;\n                                                continue Convert_fromJsonAs;\n                                            }\n                                            case 2: {\n                                                const patternInput_5 = getTypes_4();\n                                                const cases_1 = patternInput_5[0];\n                                                let pattern_matching_result_10, caseName_6, caseName_8, values_3, otherwise_6;\n                                                if (caseValue.tail != null) {\n                                                    if (caseValue.head.tag === 1) {\n                                                        if (caseValue.tail.tail == null) {\n                                                            pattern_matching_result_10 = 0;\n                                                            caseName_6 = caseValue.head.fields[0];\n                                                        }\n                                                        else {\n                                                            pattern_matching_result_10 = 1;\n                                                            caseName_8 = caseValue.head.fields[0];\n                                                            values_3 = caseValue.tail;\n                                                        }\n                                                    }\n                                                    else {\n                                                        pattern_matching_result_10 = 2;\n                                                        otherwise_6 = caseValue;\n                                                    }\n                                                }\n                                                else {\n                                                    pattern_matching_result_10 = 2;\n                                                    otherwise_6 = caseValue;\n                                                }\n                                                switch (pattern_matching_result_10) {\n                                                    case 0: {\n                                                        const _arg6 = tryFind_1((case$_10) => (case$_10.CaseName === caseName_6), cases_1);\n                                                        if (_arg6 == null) {\n                                                            const expectedCases_4 = join(\", \", map_2((case$_11) => toText(printf(\" \\u0027%s\\u0027 \"))(case$_11.CaseName), cases_1));\n                                                            const arg20_13 = name_2(patternInput_5[1]);\n                                                            return toFail(printf(\"Case \\u0027%s\\u0027 was not valid for type \\u0027%s\\u0027, expected one of the cases [%s]\"))(caseName_6)(arg20_13)(expectedCases_4);\n                                                        }\n                                                        else {\n                                                            const caseName_7 = _arg6.CaseName;\n                                                            const caseInfoTypes = _arg6.CaseTypes;\n                                                            return makeUnion(_arg6.Info, []);\n                                                        }\n                                                    }\n                                                    case 1: {\n                                                        const _arg7 = tryFind_1((case$_12) => (case$_12.CaseName === caseName_8), cases_1);\n                                                        if (_arg7 != null) {\n                                                            const types = _arg7.CaseTypes;\n                                                            const foundCaseName = _arg7.CaseName;\n                                                            const caseInfo_4 = _arg7.Info;\n                                                            if (types.length !== length(values_3)) {\n                                                                toFail(printf(\"The number of union case parameters for \\u0027%s\\u0027 is different\"))(foundCaseName);\n                                                            }\n                                                            return makeUnion(caseInfo_4, map_2((tupledArg_1) => Convert_fromJsonAs(tupledArg_1[1], tupledArg_1[0]), zip(types, Array.from(values_3))));\n                                                        }\n                                                        else {\n                                                            const expectedCases_5 = join(\", \", map_2((_arg1_1) => _arg1_1.CaseName, cases_1));\n                                                            return toFail(printf(\"Case %s was not valid, expected one of [%s]\"))(caseName_8)(expectedCases_5);\n                                                        }\n                                                    }\n                                                    case 2: {\n                                                        const unexpectedJson_1 = JSON.stringify(otherwise_6);\n                                                        const expectedType_1 = JSON.stringify(cases_1);\n                                                        return toFail(printf(\"Expected JSON:\\n%s\\nto match the type\\n%s\"))(unexpectedJson_1)(expectedType_1);\n                                                    }\n                                                }\n                                            }\n                                            case 3: {\n                                                const elementType = elementTypeDelayed();\n                                                return Array.from(map_3((value_47) => Convert_fromJsonAs(value_47, elementType), values_4));\n                                            }\n                                            case 4: {\n                                                const elementType_1 = elementTypeDelayed_1();\n                                                return map_3((value_49) => Convert_fromJsonAs(value_49, elementType_1), values_5);\n                                            }\n                                            case 5: {\n                                                const elementType_2 = elementTypeDelayed_2();\n                                                return map_3((value_51) => Convert_fromJsonAs(value_51, elementType_2), Convert_flattenFable3Lists(linkedList));\n                                            }\n                                            case 6: {\n                                                const elementType_3 = elementTypeDelayed_3();\n                                                return ofList_1(map_3((value_53) => Convert_fromJsonAs(value_53, elementType_3), values_6), {\n                                                    Compare: (x_2, y_1) => compare(x_2, y_1),\n                                                });\n                                            }\n                                            case 7: {\n                                                const elementType_4 = elementTypeDelayed_4();\n                                                return map_3((value_55) => Convert_fromJsonAs(value_55, elementType_4), values_7);\n                                            }\n                                            case 8: {\n                                                return map_2((tupledArg_2) => Convert_fromJsonAs(tupledArg_2[1], tupledArg_2[0]), zip(tupleTypesDelayed(), Array.from(array_9)));\n                                            }\n                                            case 9: {\n                                                const patternInput_6 = getTypes_5();\n                                                const recordType = patternInput_6[1];\n                                                const fields = patternInput_6[0];\n                                                return makeRecord(recordType, (values_8 = toList(dict_1), map_2((_arg3_1) => {\n                                                    const fieldType = _arg3_1.FieldType;\n                                                    const fieldName = _arg3_1.FieldName;\n                                                    const _arg8 = tryFind_2((tupledArg_3) => (fieldName === tupledArg_3[0]), values_8);\n                                                    if (_arg8 == null) {\n                                                        if (fieldType.tag === 22) {\n                                                            return void 0;\n                                                        }\n                                                        else {\n                                                            let dictKeys;\n                                                            const arg10_27 = join(\", \", map_3((arg) => toText(printf(\"\\u0027%s\\u0027\"))(arg[0]), toList(dict_1)));\n                                                            dictKeys = toText(printf(\"[ %s ]\"))(arg10_27);\n                                                            let recordFields;\n                                                            const arg10_30 = join(\", \", map_2((_arg2_1) => {\n                                                                const name_1 = _arg2_1.FieldName;\n                                                                if (_arg2_1.FieldType.tag === 22) {\n                                                                    return toText(printf(\"optional(\\u0027%s\\u0027)\"))(name_1);\n                                                                }\n                                                                else {\n                                                                    return toText(printf(\"required(\\u0027%s\\u0027)\"))(name_1);\n                                                                }\n                                                            }, fields));\n                                                            recordFields = toText(printf(\"[ %s ]\"))(arg10_30);\n                                                            const arg30_6 = name_2(recordType);\n                                                            return toFail(printf(\"Could not find the required key \\u0027%s\\u0027 in the JSON object literal with keys %s to match with record type \\u0027%s\\u0027 that has fields %s\"))(fieldName)(dictKeys)(arg30_6)(recordFields);\n                                                        }\n                                                    }\n                                                    else {\n                                                        const key_2 = _arg8[0];\n                                                        return Convert_fromJsonAs(_arg8[1], fieldType);\n                                                    }\n                                                }, fields)));\n                                            }\n                                            case 10: {\n                                                const patternInput_7 = getTypes_6();\n                                                const keyType = patternInput_7[0];\n                                                const pairs = ofSeq(delay(() => collect((keyValuePair) => {\n                                                    let a;\n                                                    return singleton_1(Convert_fromJsonAs(keyValuePair, new TypeInfo(27, (a = [keyType, patternInput_7[1]], () => a))));\n                                                }, tuples)));\n                                                switch (keyType.tag) {\n                                                    case 5:\n                                                    case 1:\n                                                    case 6: {\n                                                        return ofList(pairs);\n                                                    }\n                                                    default: {\n                                                        return ofList(pairs);\n                                                    }\n                                                }\n                                            }\n                                            case 11: {\n                                                const patternInput_8 = getTypes_7();\n                                                const keyType_1 = patternInput_8[0];\n                                                const pairs_1 = ofSeq(delay(() => collect((keyValuePair_1) => singleton_1(Convert_fromJsonAs(keyValuePair_1, new TypeInfo(27, () => [keyType_1, patternInput_8[1]]))), tuples_1)));\n                                                const output = (keyType_1.tag === 35) ? (new Dictionary([], {\n                                                    Equals: (x_3, y_2) => equals(x_3, y_2),\n                                                    GetHashCode: (x_3) => safeHash(x_3),\n                                                })) : ((keyType_1.tag === 34) ? (new Dictionary([], {\n                                                    Equals: (x_4, y_3) => equals(x_4, y_3),\n                                                    GetHashCode: (x_4) => structuralHash(x_4),\n                                                })) : (new Dictionary([], {\n                                                    Equals: (x_5, y_4) => equals(x_5, y_4),\n                                                    GetHashCode: (x_5) => structuralHash(x_5),\n                                                })));\n                                                const enumerator = getEnumerator(pairs_1);\n                                                try {\n                                                    while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                                                        const forLoopVar = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n                                                        addToDict(output, forLoopVar[0], forLoopVar[1]);\n                                                    }\n                                                }\n                                                finally {\n                                                    enumerator.Dispose();\n                                                }\n                                                return output;\n                                            }\n                                            case 12: {\n                                                const patternInput_9 = getTypes_8();\n                                                const keyType_2 = patternInput_9[0];\n                                                const pairs_2 = map_3((tupledArg_4) => [Convert_fromJsonAs(new Json(1, tupledArg_4[0]), keyType_2), Convert_fromJsonAs(tupledArg_4[1], patternInput_9[1])], toList(dict_2));\n                                                const output_1 = (keyType_2.tag === 35) ? (new Dictionary([], {\n                                                    Equals: (x_6, y_5) => equals(x_6, y_5),\n                                                    GetHashCode: (x_6) => safeHash(x_6),\n                                                })) : ((keyType_2.tag === 34) ? (new Dictionary([], {\n                                                    Equals: (x_7, y_6) => equals(x_7, y_6),\n                                                    GetHashCode: (x_7) => structuralHash(x_7),\n                                                })) : (new Dictionary([], {\n                                                    Equals: (x_8, y_7) => equals(x_8, y_7),\n                                                    GetHashCode: (x_8) => structuralHash(x_8),\n                                                })));\n                                                const enumerator_1 = getEnumerator(pairs_2);\n                                                try {\n                                                    while (enumerator_1[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                                                        const forLoopVar_1 = enumerator_1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n                                                        addToDict(output_1, forLoopVar_1[0], forLoopVar_1[1]);\n                                                    }\n                                                }\n                                                finally {\n                                                    enumerator_1.Dispose();\n                                                }\n                                                return output_1;\n                                            }\n                                            case 13: {\n                                                const elemType_1 = getType();\n                                                const hashset = (elemType_1.tag === 35) ? (new HashSet([], {\n                                                    Equals: (x_9, y_8) => equals(x_9, y_8),\n                                                    GetHashCode: (x_9) => safeHash(x_9),\n                                                })) : ((elemType_1.tag === 34) ? (new HashSet([], {\n                                                    Equals: (x_10, y_9) => equals(x_10, y_9),\n                                                    GetHashCode: (x_10) => structuralHash(x_10),\n                                                })) : (new HashSet([], {\n                                                    Equals: (x_11, y_10) => equals(x_11, y_10),\n                                                    GetHashCode: (x_11) => structuralHash(x_11),\n                                                })));\n                                                const enumerator_2 = getEnumerator(items);\n                                                try {\n                                                    while (enumerator_2[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                                                        void addToSet(Convert_fromJsonAs(enumerator_2[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), elemType_1), hashset);\n                                                    }\n                                                }\n                                                finally {\n                                                    enumerator_2.Dispose();\n                                                }\n                                                return hashset;\n                                            }\n                                            case 14: {\n                                                const patternInput_10 = getTypes_9();\n                                                const valueType_5 = patternInput_10[1];\n                                                const keyType_3 = patternInput_10[0];\n                                                const matchValue_5 = [tryFind(\"comparer\", map), tryFind(\"tree\", map)];\n                                                let pattern_matching_result_11, comparer_1, tree_1;\n                                                if (matchValue_5[0] != null) {\n                                                    if (matchValue_5[0].tag === 5) {\n                                                        if (matchValue_5[1] != null) {\n                                                            if (matchValue_5[1].tag === 4) {\n                                                                if (tree = matchValue_5[1].fields[0], isEmpty(matchValue_5[0].fields[0])) {\n                                                                    pattern_matching_result_11 = 0;\n                                                                    comparer_1 = matchValue_5[0].fields[0];\n                                                                    tree_1 = matchValue_5[1].fields[0];\n                                                                }\n                                                                else {\n                                                                    pattern_matching_result_11 = 1;\n                                                                }\n                                                            }\n                                                            else {\n                                                                pattern_matching_result_11 = 1;\n                                                            }\n                                                        }\n                                                        else {\n                                                            pattern_matching_result_11 = 1;\n                                                        }\n                                                    }\n                                                    else {\n                                                        pattern_matching_result_11 = 1;\n                                                    }\n                                                }\n                                                else {\n                                                    pattern_matching_result_11 = 1;\n                                                }\n                                                switch (pattern_matching_result_11) {\n                                                    case 0: {\n                                                        const matchValue_6 = Convert_generateMap(new Json(4, tree_1));\n                                                        if (matchValue_6 == null) {\n                                                            const inputJson = SimpleJson_toString(new Json(4, tree_1));\n                                                            return toFail(printf(\"Could not generate map from JSON\\n %s\"))(inputJson);\n                                                        }\n                                                        else {\n                                                            const pairs_3 = map_3((tupledArg_5) => {\n                                                                const key_6 = tupledArg_5[0];\n                                                                return [(!Convert_isQuoted(key_6)) ? Convert_fromJsonAs(new Json(1, key_6), keyType_3) : Convert_fromJsonAs(SimpleJson_parseNative(key_6), keyType_3), Convert_fromJsonAs(tupledArg_5[1], valueType_5)];\n                                                            }, Convert_flattenMap(matchValue_6));\n                                                            switch (keyType_3.tag) {\n                                                                case 5:\n                                                                case 1:\n                                                                case 6: {\n                                                                    return ofList(pairs_3);\n                                                                }\n                                                                default: {\n                                                                    return ofList(pairs_3);\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                    case 1: {\n                                                        let pattern_matching_result_12, comparer_3, tree_3;\n                                                        if (matchValue_5[0] != null) {\n                                                            if (matchValue_5[0].tag === 5) {\n                                                                if (matchValue_5[1] != null) {\n                                                                    if (matchValue_5[1].tag === 5) {\n                                                                        if (tree_2 = matchValue_5[1].fields[0], isEmpty(matchValue_5[0].fields[0])) {\n                                                                            pattern_matching_result_12 = 0;\n                                                                            comparer_3 = matchValue_5[0].fields[0];\n                                                                            tree_3 = matchValue_5[1].fields[0];\n                                                                        }\n                                                                        else {\n                                                                            pattern_matching_result_12 = 1;\n                                                                        }\n                                                                    }\n                                                                    else {\n                                                                        pattern_matching_result_12 = 1;\n                                                                    }\n                                                                }\n                                                                else {\n                                                                    pattern_matching_result_12 = 1;\n                                                                }\n                                                            }\n                                                            else {\n                                                                pattern_matching_result_12 = 1;\n                                                            }\n                                                        }\n                                                        else {\n                                                            pattern_matching_result_12 = 1;\n                                                        }\n                                                        switch (pattern_matching_result_12) {\n                                                            case 0: {\n                                                                input_mut = (new Json(5, ofList(Convert_flatteFable3Map(tree_3))));\n                                                                typeInfo_mut = typeInfo;\n                                                                continue Convert_fromJsonAs;\n                                                            }\n                                                            case 1: {\n                                                                const pairs_4 = map_3((tupledArg_6) => {\n                                                                    const key_7 = tupledArg_6[0];\n                                                                    return [(!Convert_isQuoted(key_7)) ? ((isPrimitive(keyType_3) ? true : enumUnion(keyType_3)) ? Convert_fromJsonAs(new Json(1, key_7), keyType_3) : Convert_fromJsonAs(SimpleJson_parseNative(key_7), keyType_3)) : Convert_fromJsonAs(SimpleJson_parseNative(key_7), keyType_3), Convert_fromJsonAs(tupledArg_6[1], valueType_5)];\n                                                                }, toList(map));\n                                                                switch (keyType_3.tag) {\n                                                                    case 5:\n                                                                    case 1:\n                                                                    case 6: {\n                                                                        return ofList(pairs_4);\n                                                                    }\n                                                                    default: {\n                                                                        return ofList(pairs_4);\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                            case 15: {\n                                                const arg20_17 = fullName(getType_1());\n                                                const arg10_33 = SimpleJson_toString(input);\n                                                return toFail(printf(\"Cannot convert %s to %s\"))(arg10_33)(arg20_17);\n                                            }\n                                            case 16: {\n                                                const arg20_18 = JSON.stringify(typeInfo);\n                                                const arg10_34 = SimpleJson_toString(input);\n                                                return toFail(printf(\"Cannot convert %s to %s\"))(arg10_34)(arg20_18);\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        break;\n    }\n}\n\nexport function Convert_fromJson(json, typeInfo) {\n    return Convert_fromJsonAs(json, typeInfo);\n}\n\nexport const Convert_quoteText = quote;\n\nexport function Convert_serialize(value_mut, typeInfo_mut) {\n    let copyOfStruct, copyOfStruct_1, copyOfStruct_2;\n    Convert_serialize:\n    while (true) {\n        const value = value_mut, typeInfo = typeInfo_mut;\n        switch (typeInfo.tag) {\n            case 1: {\n                const content = value;\n                if (content == null) {\n                    return \"null\";\n                }\n                else {\n                    return Convert_quoteText(content);\n                }\n            }\n            case 0: {\n                return \"null\";\n            }\n            case 8:\n            case 7: {\n                if (Number.isNaN(value)) {\n                    return Convert_quoteText(\"NaN\");\n                }\n                else {\n                    return value.toString();\n                }\n            }\n            case 12:\n            case 2:\n            case 3:\n            case 10:\n            case 33:\n            case 16:\n            case 5: {\n                return int32ToString(value);\n            }\n            case 4:\n            case 11: {\n                return Convert_betweenQuotes(toString(value));\n            }\n            case 15: {\n                return Convert_betweenQuotes(toString_1(value));\n            }\n            case 9: {\n                return Convert_betweenQuotes(toString_2(value));\n            }\n            case 6: {\n                if (value) {\n                    return \"true\";\n                }\n                else {\n                    return \"false\";\n                }\n            }\n            case 17: {\n                return Convert_betweenQuotes((copyOfStruct = value, copyOfStruct));\n            }\n            case 13: {\n                return Convert_betweenQuotes((copyOfStruct_1 = value, toString_3(copyOfStruct_1, \"O\")));\n            }\n            case 14: {\n                return Convert_betweenQuotes((copyOfStruct_2 = value, toString_3(copyOfStruct_2, \"O\")));\n            }\n            case 34: {\n                return (\"{\" + join(\", \", map_2((field) => {\n                    const arg20 = Convert_serialize(getRecordField(value, field.PropertyInfo), field.FieldType);\n                    return toText(printf(\"\\\"%s\\\": %s\"))(field.FieldName)(arg20);\n                }, typeInfo.fields[0]()[0]))) + \"}\";\n            }\n            case 30: {\n                const elementType = typeInfo.fields[0]();\n                return (\"[\" + join(\", \", map_4((element) => Convert_serialize(element, elementType), value))) + \"]\";\n            }\n            case 31: {\n                const elementType_1 = typeInfo.fields[0]();\n                return (\"[\" + join(\", \", map_4((element_1) => Convert_serialize(element_1, elementType_1), value))) + \"]\";\n            }\n            case 24: {\n                const elementType_2 = typeInfo.fields[0]();\n                return (\"[\" + join(\", \", map_4((element_2) => Convert_serialize(element_2, elementType_2), value))) + \"]\";\n            }\n            case 25: {\n                const elementType_3 = typeInfo.fields[0]();\n                return (\"[\" + join(\", \", map_2((element_3) => Convert_serialize(element_3, elementType_3), value))) + \"]\";\n            }\n            case 23: {\n                const elementType_4 = typeInfo.fields[0]();\n                return (\"[\" + join(\", \", map_3((element_4) => Convert_serialize(element_4, elementType_4), value))) + \"]\";\n            }\n            case 26: {\n                const elementType_5 = typeInfo.fields[0]();\n                return (\"[\" + join(\", \", map_2((element_5) => Convert_serialize(element_5, elementType_5), Array.from(value)))) + \"]\";\n            }\n            case 22: {\n                const matchValue = value;\n                if (matchValue != null) {\n                    value_mut = value_83(matchValue);\n                    typeInfo_mut = typeInfo.fields[0]();\n                    continue Convert_serialize;\n                }\n                else {\n                    return \"null\";\n                }\n            }\n            case 35: {\n                const patternInput_1 = typeInfo.fields[0]();\n                const patternInput_2 = getUnionFields(value, patternInput_1[1]);\n                const usedCase = patternInput_2[0];\n                const fields = patternInput_2[1];\n                const caseTypes = patternInput_1[0].find((case$) => (case$.CaseName === name_2(usedCase))).CaseTypes;\n                if (enumUnion(typeInfo) ? true : (caseTypes.length === 0)) {\n                    return Convert_betweenQuotes(name_2(usedCase));\n                }\n                else if (caseTypes.length === 1) {\n                    return (((\"{\" + Convert_betweenQuotes(name_2(usedCase))) + \": \") + Convert_serialize(fields[0], caseTypes[0])) + \"}\";\n                }\n                else {\n                    const serializedFields_1 = join(\", \", mapIndexed((index, caseType) => Convert_serialize(fields[index], caseType), caseTypes));\n                    return ((((\"{\" + Convert_betweenQuotes(name_2(usedCase))) + \": \") + \"[\") + serializedFields_1) + \"] }\";\n                }\n            }\n            case 28: {\n                const patternInput_3 = typeInfo.fields[0]();\n                const keyType = patternInput_3[0];\n                const serializedValues = join(\", \", map_2((tupledArg) => {\n                    const serializedKey = Convert_serialize(tupledArg[0], keyType);\n                    const serializedValue = Convert_serialize(tupledArg[1], patternInput_3[1]);\n                    if (isPrimitive(keyType) ? true : enumUnion(keyType)) {\n                        if (!Convert_isQuoted(serializedKey)) {\n                            return (Convert_quoteText(serializedKey) + \": \") + serializedValue;\n                        }\n                        else {\n                            return (serializedKey + \": \") + serializedValue;\n                        }\n                    }\n                    else {\n                        return (((\"[\" + serializedKey) + \", \") + serializedValue) + \"]\";\n                    }\n                }, toArray(value)));\n                if (isPrimitive(keyType) ? true : enumUnion(keyType)) {\n                    return (\"{\" + serializedValues) + \"}\";\n                }\n                else {\n                    return (\"[\" + serializedValues) + \"]\";\n                }\n            }\n            case 29: {\n                const patternInput_4 = typeInfo.fields[0]();\n                const keyType_1 = patternInput_4[0];\n                const serializedValues_1 = join(\", \", map_4((pair) => {\n                    const patternInput_5 = [pair[0], pair[1]];\n                    const serializedKey_1 = Convert_serialize(patternInput_5[0], keyType_1);\n                    const serializedValue_1 = Convert_serialize(patternInput_5[1], patternInput_4[1]);\n                    if (isPrimitive(keyType_1) ? true : enumUnion(keyType_1)) {\n                        if (!Convert_isQuoted(serializedKey_1)) {\n                            return (Convert_betweenQuotes(serializedKey_1) + \": \") + serializedValue_1;\n                        }\n                        else {\n                            return (serializedKey_1 + \": \") + serializedValue_1;\n                        }\n                    }\n                    else {\n                        return (((\"[\" + serializedKey_1) + \", \") + serializedValue_1) + \"]\";\n                    }\n                }, value));\n                if (isPrimitive(keyType_1) ? true : enumUnion(keyType_1)) {\n                    return (\"{\" + serializedValues_1) + \"}\";\n                }\n                else {\n                    return (\"[\" + serializedValues_1) + \"]\";\n                }\n            }\n            case 27: {\n                const tupleTypes = typeInfo.fields[0]();\n                if (tupleTypes.length === 1) {\n                    return (\"[\" + Convert_serialize(value, tupleTypes[0])) + \"]\";\n                }\n                else {\n                    return (\"[\" + join(\", \", mapIndexed((index_1, element_6) => Convert_serialize(element_6, tupleTypes[index_1]), value))) + \"]\";\n                }\n            }\n            case 18: {\n                return SimpleJson_stringify(value);\n            }\n            case 19: {\n                return SimpleJson_stringify(value);\n            }\n            default: {\n                return \"null\";\n            }\n        }\n        break;\n    }\n}\n\nexport function Fable_SimpleJson_Json__Json_stringify_Static_4E60E31B(value) {\n    if (Convert_isUsingFable3) {\n        console.warn(some(\"It looks like you using the function Json.stringify from Fable.SimpleJson while also using Fable 3 (nagareyama). Please use Json.serialize instead which supports both Fable 3 and Fable 2.x\"));\n    }\n    return SimpleJson_stringify(value);\n}\n\n","export default function quote(inputText) {\r\n    var escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\r\n    var meta = {\r\n        '\\b': '\\\\b',\r\n        '\\t': '\\\\t',\r\n        '\\n': '\\\\n',\r\n        '\\f': '\\\\f',\r\n        '\\r': '\\\\r',\r\n        '\"': '\\\\\"',\r\n        '\\\\': '\\\\\\\\'\r\n    }\r\n\r\n    escapable.lastIndex = 0;\r\n    return escapable.test(inputText) ?\r\n        '\"' + inputText.replace(escapable, function (a) {\r\n            var c = meta[a];\r\n            return typeof c === 'string' ? c :\r\n                '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\r\n        }) + '\"' :\r\n        '\"' + inputText + '\"';\r\n}","export class CancellationToken {\n    constructor(cancelled = false) {\n        this._id = 0;\n        this._cancelled = cancelled;\n        this._listeners = new Map();\n    }\n    get isCancelled() {\n        return this._cancelled;\n    }\n    cancel() {\n        if (!this._cancelled) {\n            this._cancelled = true;\n            for (const [, listener] of this._listeners) {\n                listener();\n            }\n        }\n    }\n    addListener(f) {\n        const id = this._id;\n        this._listeners.set(this._id++, f);\n        return id;\n    }\n    removeListener(id) {\n        return this._listeners.delete(id);\n    }\n    register(f, state) {\n        const $ = this;\n        const id = this.addListener(state == null ? f : () => f(state));\n        return { Dispose() { $.removeListener(id); } };\n    }\n}\nexport class OperationCanceledError extends Error {\n    constructor() {\n        super(\"The operation was canceled\");\n        Object.setPrototypeOf(this, OperationCanceledError.prototype);\n    }\n}\nexport class Trampoline {\n    constructor() {\n        this.callCount = 0;\n    }\n    static get maxTrampolineCallCount() {\n        return 2000;\n    }\n    incrementAndCheck() {\n        return this.callCount++ > Trampoline.maxTrampolineCallCount;\n    }\n    hijack(f) {\n        this.callCount = 0;\n        setTimeout(f, 0);\n    }\n}\nexport function protectedCont(f) {\n    return (ctx) => {\n        if (ctx.cancelToken.isCancelled) {\n            ctx.onCancel(new OperationCanceledError());\n        }\n        else if (ctx.trampoline.incrementAndCheck()) {\n            ctx.trampoline.hijack(() => {\n                try {\n                    f(ctx);\n                }\n                catch (err) {\n                    ctx.onError(err);\n                }\n            });\n        }\n        else {\n            try {\n                f(ctx);\n            }\n            catch (err) {\n                ctx.onError(err);\n            }\n        }\n    };\n}\nexport function protectedBind(computation, binder) {\n    return protectedCont((ctx) => {\n        computation({\n            onSuccess: (x) => {\n                try {\n                    binder(x)(ctx);\n                }\n                catch (ex) {\n                    ctx.onError(ex);\n                }\n            },\n            onError: ctx.onError,\n            onCancel: ctx.onCancel,\n            cancelToken: ctx.cancelToken,\n            trampoline: ctx.trampoline,\n        });\n    });\n}\nexport function protectedReturn(value) {\n    return protectedCont((ctx) => ctx.onSuccess(value));\n}\nexport class AsyncBuilder {\n    Bind(computation, binder) {\n        return protectedBind(computation, binder);\n    }\n    Combine(computation1, computation2) {\n        return this.Bind(computation1, () => computation2);\n    }\n    Delay(generator) {\n        return protectedCont((ctx) => generator()(ctx));\n    }\n    For(sequence, body) {\n        const iter = sequence[Symbol.iterator]();\n        let cur = iter.next();\n        return this.While(() => !cur.done, this.Delay(() => {\n            const res = body(cur.value);\n            cur = iter.next();\n            return res;\n        }));\n    }\n    Return(value) {\n        return protectedReturn(value);\n    }\n    ReturnFrom(computation) {\n        return computation;\n    }\n    TryFinally(computation, compensation) {\n        return protectedCont((ctx) => {\n            computation({\n                onSuccess: (x) => {\n                    compensation();\n                    ctx.onSuccess(x);\n                },\n                onError: (x) => {\n                    compensation();\n                    ctx.onError(x);\n                },\n                onCancel: (x) => {\n                    compensation();\n                    ctx.onCancel(x);\n                },\n                cancelToken: ctx.cancelToken,\n                trampoline: ctx.trampoline,\n            });\n        });\n    }\n    TryWith(computation, catchHandler) {\n        return protectedCont((ctx) => {\n            computation({\n                onSuccess: ctx.onSuccess,\n                onCancel: ctx.onCancel,\n                cancelToken: ctx.cancelToken,\n                trampoline: ctx.trampoline,\n                onError: (ex) => {\n                    try {\n                        catchHandler(ex)(ctx);\n                    }\n                    catch (ex2) {\n                        ctx.onError(ex2);\n                    }\n                },\n            });\n        });\n    }\n    Using(resource, binder) {\n        return this.TryFinally(binder(resource), () => resource.Dispose());\n    }\n    While(guard, computation) {\n        if (guard()) {\n            return this.Bind(computation, () => this.While(guard, computation));\n        }\n        else {\n            return this.Return(void 0);\n        }\n    }\n    Zero() {\n        return protectedCont((ctx) => ctx.onSuccess(void 0));\n    }\n}\nexport const singleton = new AsyncBuilder();\n","import { OperationCanceledError, Trampoline } from \"./AsyncBuilder.js\";\nimport { CancellationToken } from \"./AsyncBuilder.js\";\nimport { protectedCont } from \"./AsyncBuilder.js\";\nimport { protectedBind } from \"./AsyncBuilder.js\";\nimport { protectedReturn } from \"./AsyncBuilder.js\";\nimport { Choice_makeChoice1Of2, Choice_makeChoice2Of2 } from \"./Choice.js\";\nimport { map } from \"./Seq.js\";\n// Implemented just for type references\nexport class Async {\n}\nfunction emptyContinuation(_x) {\n    // NOP\n}\n// MakeAsync: body:(AsyncActivation<'T> -> AsyncReturn) -> Async<'T>\nexport function makeAsync(body) {\n    return body;\n}\n// Invoke: computation: Async<'T> -> ctxt:AsyncActivation<'T> -> AsyncReturn\nexport function invoke(computation, ctx) {\n    return computation(ctx);\n}\n// CallThenInvoke: ctxt:AsyncActivation<'T> -> result1:'U -> part2:('U -> Async<'T>) -> AsyncReturn\nexport function callThenInvoke(ctx, result1, part2) {\n    return part2(result1)(ctx);\n}\n// Bind: ctxt:AsyncActivation<'T> -> part1:Async<'U> -> part2:('U -> Async<'T>) -> AsyncReturn\nexport function bind(ctx, part1, part2) {\n    return protectedBind(part1, part2)(ctx);\n}\nexport function createCancellationToken(arg) {\n    const token = new CancellationToken(typeof arg === \"boolean\" ? arg : false);\n    if (typeof arg === \"number\") {\n        setTimeout(() => { token.cancel(); }, arg);\n    }\n    return token;\n}\nexport function cancel(token) {\n    token.cancel();\n}\nexport function cancelAfter(token, ms) {\n    setTimeout(() => { token.cancel(); }, ms);\n}\nexport function isCancellationRequested(token) {\n    return token != null && token.isCancelled;\n}\nexport function throwIfCancellationRequested(token) {\n    if (token != null && token.isCancelled) {\n        throw new Error(\"Operation is cancelled\");\n    }\n}\nexport function startChild(computation) {\n    const promise = startAsPromise(computation);\n    // JS Promises are hot, computation has already started\n    // but we delay returning the result\n    return protectedCont((ctx) => protectedReturn(awaitPromise(promise))(ctx));\n}\nexport function awaitPromise(p) {\n    return fromContinuations((conts) => p.then(conts[0]).catch((err) => (err instanceof OperationCanceledError\n        ? conts[2] : conts[1])(err)));\n}\nexport function cancellationToken() {\n    return protectedCont((ctx) => ctx.onSuccess(ctx.cancelToken));\n}\nexport const defaultCancellationToken = new CancellationToken();\nexport function catchAsync(work) {\n    return protectedCont((ctx) => {\n        work({\n            onSuccess: (x) => ctx.onSuccess(Choice_makeChoice1Of2(x)),\n            onError: (ex) => ctx.onSuccess(Choice_makeChoice2Of2(ex)),\n            onCancel: ctx.onCancel,\n            cancelToken: ctx.cancelToken,\n            trampoline: ctx.trampoline,\n        });\n    });\n}\nexport function fromContinuations(f) {\n    return protectedCont((ctx) => f([ctx.onSuccess, ctx.onError, ctx.onCancel]));\n}\nexport function ignore(computation) {\n    return protectedBind(computation, (_x) => protectedReturn(void 0));\n}\nexport function parallel(computations) {\n    return awaitPromise(Promise.all(map((w) => startAsPromise(w), computations)));\n}\nexport function sleep(millisecondsDueTime) {\n    return protectedCont((ctx) => {\n        let tokenId;\n        const timeoutId = setTimeout(() => {\n            ctx.cancelToken.removeListener(tokenId);\n            ctx.onSuccess(void 0);\n        }, millisecondsDueTime);\n        tokenId = ctx.cancelToken.addListener(() => {\n            clearTimeout(timeoutId);\n            ctx.onCancel(new OperationCanceledError());\n        });\n    });\n}\nexport function start(computation, cancellationToken) {\n    return startWithContinuations(computation, cancellationToken);\n}\nexport function startImmediate(computation, cancellationToken) {\n    return start(computation, cancellationToken);\n}\nexport function startWithContinuations(computation, continuation, exceptionContinuation, cancellationContinuation, cancelToken) {\n    if (typeof continuation !== \"function\") {\n        cancelToken = continuation;\n        continuation = undefined;\n    }\n    const trampoline = new Trampoline();\n    computation({\n        onSuccess: continuation ? continuation : emptyContinuation,\n        onError: exceptionContinuation ? exceptionContinuation : emptyContinuation,\n        onCancel: cancellationContinuation ? cancellationContinuation : emptyContinuation,\n        cancelToken: cancelToken ? cancelToken : defaultCancellationToken,\n        trampoline,\n    });\n}\nexport function startAsPromise(computation, cancellationToken) {\n    return new Promise((resolve, reject) => startWithContinuations(computation, resolve, reject, reject, cancellationToken ? cancellationToken : defaultCancellationToken));\n}\nexport default Async;\n","import { singleton, concat, map, empty, iterate } from \"../fable-library.3.1.5/List.js\";\nimport { singleton as singleton_1 } from \"../fable-library.3.1.5/AsyncBuilder.js\";\nimport { startImmediate, catchAsync } from \"../fable-library.3.1.5/Async.js\";\nimport { Timer_delay } from \"./prelude.fs.js\";\n\nexport function Cmd_exec(onError, dispatch, cmd) {\n    iterate((call) => {\n        try {\n            call(dispatch);\n        }\n        catch (ex) {\n            onError(ex);\n        }\n    }, cmd);\n}\n\nexport function Cmd_none() {\n    return empty();\n}\n\nexport function Cmd_map(f, cmd) {\n    return map((g) => ((arg_1) => {\n        g((arg) => {\n            arg_1(f(arg));\n        });\n    }), cmd);\n}\n\nexport function Cmd_batch(cmds) {\n    return concat(cmds);\n}\n\nexport function Cmd_ofSub(sub) {\n    return singleton(sub);\n}\n\nexport function Cmd_OfFunc_either(task, arg, ofSuccess, ofError) {\n    return singleton((dispatch) => {\n        try {\n            return dispatch(ofSuccess(task(arg)));\n        }\n        catch (x) {\n            return dispatch(ofError(x));\n        }\n    });\n}\n\nexport function Cmd_OfFunc_perform(task, arg, ofSuccess) {\n    return singleton((dispatch) => {\n        try {\n            dispatch(ofSuccess(task(arg)));\n        }\n        catch (x) {\n        }\n    });\n}\n\nexport function Cmd_OfFunc_attempt(task, arg, ofError) {\n    return singleton((dispatch) => {\n        try {\n            task(arg);\n        }\n        catch (x) {\n            dispatch(ofError(x));\n        }\n    });\n}\n\nexport function Cmd_OfFunc_result(msg) {\n    return singleton((dispatch) => {\n        dispatch(msg);\n    });\n}\n\nexport function Cmd_OfAsyncWith_either(start, task, arg, ofSuccess, ofError) {\n    return singleton((arg_1) => {\n        start(singleton_1.Delay(() => singleton_1.Bind(catchAsync(task(arg)), (_arg1) => {\n            const r = _arg1;\n            arg_1((r.tag === 1) ? ofError(r.fields[0]) : ofSuccess(r.fields[0]));\n            return singleton_1.Zero();\n        })));\n    });\n}\n\nexport function Cmd_OfAsyncWith_perform(start, task, arg, ofSuccess) {\n    return singleton((arg_1) => {\n        start(singleton_1.Delay(() => singleton_1.Bind(catchAsync(task(arg)), (_arg1) => {\n            const r = _arg1;\n            if (r.tag === 0) {\n                arg_1(ofSuccess(r.fields[0]));\n                return singleton_1.Zero();\n            }\n            else {\n                return singleton_1.Zero();\n            }\n        })));\n    });\n}\n\nexport function Cmd_OfAsyncWith_attempt(start, task, arg, ofError) {\n    return singleton((arg_1) => {\n        start(singleton_1.Delay(() => singleton_1.Bind(catchAsync(task(arg)), (_arg1) => {\n            const r = _arg1;\n            if (r.tag === 1) {\n                arg_1(ofError(r.fields[0]));\n                return singleton_1.Zero();\n            }\n            else {\n                return singleton_1.Zero();\n            }\n        })));\n    });\n}\n\nexport function Cmd_OfAsyncWith_result(start, task) {\n    return singleton((arg) => {\n        start(singleton_1.Delay(() => singleton_1.Bind(task, (_arg1) => {\n            arg(_arg1);\n            return singleton_1.Zero();\n        })));\n    });\n}\n\nexport function Cmd_OfAsync_start(x) {\n    Timer_delay(0, (_arg1) => {\n        startImmediate(x);\n    });\n}\n\nexport function Cmd_OfPromise_either(task, arg, ofSuccess, ofError) {\n    return singleton((dispatch) => {\n        void task(arg).then((arg_1) => dispatch(ofSuccess(arg_1))).catch((arg_3) => dispatch(ofError(arg_3)));\n    });\n}\n\nexport function Cmd_OfPromise_perform(task, arg, ofSuccess) {\n    return singleton((dispatch) => {\n        void task(arg).then((arg_1) => dispatch(ofSuccess(arg_1)));\n    });\n}\n\nexport function Cmd_OfPromise_attempt(task, arg, ofError) {\n    return singleton((dispatch) => {\n        void task(arg).catch((arg_2) => {\n            dispatch(ofError(arg_2));\n        });\n    });\n}\n\nexport function Cmd_OfPromise_result(task) {\n    return singleton((dispatch) => {\n        void task.then(dispatch);\n    });\n}\n\nexport function Cmd_attemptFunc(task, arg, ofError) {\n    return Cmd_OfFunc_attempt(task, arg, ofError);\n}\n\n","import { some } from \"../fable-library.3.1.5/Option.js\";\nimport { create, isLeapYear } from \"../fable-library.3.1.5/Date.js\";\nimport { parse } from \"../fable-library.3.1.5/Int32.js\";\nimport { split, isNullOrWhiteSpace } from \"../fable-library.3.1.5/String.js\";\nimport { equalsWith } from \"../fable-library.3.1.5/Array.js\";\nimport { comparePrimitives } from \"../fable-library.3.1.5/Util.js\";\nimport react from \"react\";\n\nexport function DateParsing_$007CBetween$007C_$007C(x, y, input) {\n    if ((input >= x) ? (input <= y) : false) {\n        return some(void 0);\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function DateParsing_isLeapYear(year) {\n    return isLeapYear(year);\n}\n\nexport function DateParsing_$007CInt$007C_$007C(input) {\n    try {\n        return parse(input, 511, false, 32);\n    }\n    catch (matchValue) {\n        return void 0;\n    }\n}\n\nexport function DateParsing_parse(input) {\n    try {\n        if (isNullOrWhiteSpace(input)) {\n            return void 0;\n        }\n        else {\n            const parts = split(input, [\"-\"], null, 0);\n            let patternInput;\n            let pattern_matching_result, month, year;\n            if ((!equalsWith((x, y) => comparePrimitives(x, y), parts, null)) ? (parts.length === 2) : false) {\n                const activePatternResult3807 = DateParsing_$007CInt$007C_$007C(parts[0]);\n                if (activePatternResult3807 != null) {\n                    const activePatternResult3808 = DateParsing_$007CInt$007C_$007C(parts[1]);\n                    if (activePatternResult3808 != null) {\n                        pattern_matching_result = 0;\n                        month = activePatternResult3808;\n                        year = activePatternResult3807;\n                    }\n                    else {\n                        pattern_matching_result = 1;\n                    }\n                }\n                else {\n                    pattern_matching_result = 1;\n                }\n            }\n            else {\n                pattern_matching_result = 1;\n            }\n            switch (pattern_matching_result) {\n                case 0: {\n                    patternInput = [year, month, 1, 0, 0];\n                    break;\n                }\n                case 1: {\n                    let pattern_matching_result_1, day, month_1, year_1;\n                    if ((!equalsWith((x_1, y_1) => comparePrimitives(x_1, y_1), parts, null)) ? (parts.length === 3) : false) {\n                        const activePatternResult3804 = DateParsing_$007CInt$007C_$007C(parts[0]);\n                        if (activePatternResult3804 != null) {\n                            const activePatternResult3805 = DateParsing_$007CInt$007C_$007C(parts[1]);\n                            if (activePatternResult3805 != null) {\n                                const activePatternResult3806 = DateParsing_$007CInt$007C_$007C(parts[2]);\n                                if (activePatternResult3806 != null) {\n                                    pattern_matching_result_1 = 0;\n                                    day = activePatternResult3806;\n                                    month_1 = activePatternResult3805;\n                                    year_1 = activePatternResult3804;\n                                }\n                                else {\n                                    pattern_matching_result_1 = 1;\n                                }\n                            }\n                            else {\n                                pattern_matching_result_1 = 1;\n                            }\n                        }\n                        else {\n                            pattern_matching_result_1 = 1;\n                        }\n                    }\n                    else {\n                        pattern_matching_result_1 = 1;\n                    }\n                    switch (pattern_matching_result_1) {\n                        case 0: {\n                            patternInput = [year_1, month_1, day, 0, 0];\n                            break;\n                        }\n                        case 1: {\n                            let pattern_matching_result_2, day_1, month_2, year_2;\n                            if ((!equalsWith((x_2, y_2) => comparePrimitives(x_2, y_2), parts, null)) ? (parts.length === 3) : false) {\n                                const activePatternResult3802 = DateParsing_$007CInt$007C_$007C(parts[0]);\n                                if (activePatternResult3802 != null) {\n                                    const activePatternResult3803 = DateParsing_$007CInt$007C_$007C(parts[1]);\n                                    if (activePatternResult3803 != null) {\n                                        pattern_matching_result_2 = 0;\n                                        day_1 = parts[2];\n                                        month_2 = activePatternResult3803;\n                                        year_2 = activePatternResult3802;\n                                    }\n                                    else {\n                                        pattern_matching_result_2 = 1;\n                                    }\n                                }\n                                else {\n                                    pattern_matching_result_2 = 1;\n                                }\n                            }\n                            else {\n                                pattern_matching_result_2 = 1;\n                            }\n                            switch (pattern_matching_result_2) {\n                                case 0: {\n                                    if (day_1.indexOf(\"T\") >= 0) {\n                                        const matchValue = split(day_1, [\"T\"], null, 0);\n                                        let pattern_matching_result_3, parsedDay, time;\n                                        if ((!equalsWith((x_3, y_3) => comparePrimitives(x_3, y_3), matchValue, null)) ? (matchValue.length === 2) : false) {\n                                            const activePatternResult3801 = DateParsing_$007CInt$007C_$007C(matchValue[0]);\n                                            if (activePatternResult3801 != null) {\n                                                pattern_matching_result_3 = 0;\n                                                parsedDay = activePatternResult3801;\n                                                time = matchValue[1];\n                                            }\n                                            else {\n                                                pattern_matching_result_3 = 1;\n                                            }\n                                        }\n                                        else {\n                                            pattern_matching_result_3 = 1;\n                                        }\n                                        switch (pattern_matching_result_3) {\n                                            case 0: {\n                                                const matchValue_1 = split(time, [\":\"], null, 0);\n                                                let pattern_matching_result_4, hour, minute;\n                                                if ((!equalsWith((x_4, y_4) => comparePrimitives(x_4, y_4), matchValue_1, null)) ? (matchValue_1.length === 2) : false) {\n                                                    const activePatternResult3799 = DateParsing_$007CInt$007C_$007C(matchValue_1[0]);\n                                                    if (activePatternResult3799 != null) {\n                                                        const activePatternResult3800 = DateParsing_$007CInt$007C_$007C(matchValue_1[1]);\n                                                        if (activePatternResult3800 != null) {\n                                                            pattern_matching_result_4 = 0;\n                                                            hour = activePatternResult3799;\n                                                            minute = activePatternResult3800;\n                                                        }\n                                                        else {\n                                                            pattern_matching_result_4 = 1;\n                                                        }\n                                                    }\n                                                    else {\n                                                        pattern_matching_result_4 = 1;\n                                                    }\n                                                }\n                                                else {\n                                                    pattern_matching_result_4 = 1;\n                                                }\n                                                switch (pattern_matching_result_4) {\n                                                    case 0: {\n                                                        const matchValue_2 = [hour, minute];\n                                                        let pattern_matching_result_5;\n                                                        if (DateParsing_$007CBetween$007C_$007C(0, 59, matchValue_2[0]) != null) {\n                                                            if (DateParsing_$007CBetween$007C_$007C(0, 59, matchValue_2[1]) != null) {\n                                                                pattern_matching_result_5 = 0;\n                                                            }\n                                                            else {\n                                                                pattern_matching_result_5 = 1;\n                                                            }\n                                                        }\n                                                        else {\n                                                            pattern_matching_result_5 = 1;\n                                                        }\n                                                        switch (pattern_matching_result_5) {\n                                                            case 0: {\n                                                                patternInput = [year_2, month_2, parsedDay, hour, minute];\n                                                                break;\n                                                            }\n                                                            case 1: {\n                                                                patternInput = [-1, 1, 1, 0, 0];\n                                                                break;\n                                                            }\n                                                        }\n                                                        break;\n                                                    }\n                                                    case 1: {\n                                                        patternInput = [-1, 1, 1, 0, 0];\n                                                        break;\n                                                    }\n                                                }\n                                                break;\n                                            }\n                                            case 1: {\n                                                patternInput = [-1, 1, 1, 0, 0];\n                                                break;\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        patternInput = [-1, 1, 1, 0, 0];\n                                    }\n                                    break;\n                                }\n                                case 1: {\n                                    patternInput = [-1, 1, 1, 0, 0];\n                                    break;\n                                }\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n            const year_3 = patternInput[0] | 0;\n            const month_3 = patternInput[1] | 0;\n            const minute_1 = patternInput[4] | 0;\n            const hour_1 = patternInput[3] | 0;\n            const day_2 = patternInput[2] | 0;\n            if (year_3 <= 0) {\n                return void 0;\n            }\n            else {\n                const matchValue_3 = [month_3, day_2];\n                let pattern_matching_result_6;\n                if (matchValue_3[0] === 2) {\n                    if (DateParsing_$007CBetween$007C_$007C(1, 29, matchValue_3[1]) != null) {\n                        if (DateParsing_isLeapYear(year_3)) {\n                            pattern_matching_result_6 = 0;\n                        }\n                        else {\n                            pattern_matching_result_6 = 1;\n                        }\n                    }\n                    else {\n                        pattern_matching_result_6 = 1;\n                    }\n                }\n                else {\n                    pattern_matching_result_6 = 1;\n                }\n                switch (pattern_matching_result_6) {\n                    case 0: {\n                        return create(year_3, month_3, day_2, hour_1, minute_1, 0);\n                    }\n                    case 1: {\n                        let pattern_matching_result_7;\n                        if (matchValue_3[0] === 2) {\n                            if (DateParsing_$007CBetween$007C_$007C(1, 28, matchValue_3[1]) != null) {\n                                if (!DateParsing_isLeapYear(year_3)) {\n                                    pattern_matching_result_7 = 0;\n                                }\n                                else {\n                                    pattern_matching_result_7 = 1;\n                                }\n                            }\n                            else {\n                                pattern_matching_result_7 = 1;\n                            }\n                        }\n                        else {\n                            pattern_matching_result_7 = 1;\n                        }\n                        switch (pattern_matching_result_7) {\n                            case 0: {\n                                return create(year_3, month_3, day_2, hour_1, minute_1, 0);\n                            }\n                            case 1: {\n                                let pattern_matching_result_8;\n                                if (matchValue_3[0] === 1) {\n                                    if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) {\n                                        pattern_matching_result_8 = 0;\n                                    }\n                                    else {\n                                        pattern_matching_result_8 = 1;\n                                    }\n                                }\n                                else if (matchValue_3[0] === 3) {\n                                    if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) {\n                                        pattern_matching_result_8 = 0;\n                                    }\n                                    else {\n                                        pattern_matching_result_8 = 1;\n                                    }\n                                }\n                                else if (matchValue_3[0] === 5) {\n                                    if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) {\n                                        pattern_matching_result_8 = 0;\n                                    }\n                                    else {\n                                        pattern_matching_result_8 = 1;\n                                    }\n                                }\n                                else if (matchValue_3[0] === 7) {\n                                    if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) {\n                                        pattern_matching_result_8 = 0;\n                                    }\n                                    else {\n                                        pattern_matching_result_8 = 1;\n                                    }\n                                }\n                                else if (matchValue_3[0] === 8) {\n                                    if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) {\n                                        pattern_matching_result_8 = 0;\n                                    }\n                                    else {\n                                        pattern_matching_result_8 = 1;\n                                    }\n                                }\n                                else if (matchValue_3[0] === 10) {\n                                    if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) {\n                                        pattern_matching_result_8 = 0;\n                                    }\n                                    else {\n                                        pattern_matching_result_8 = 1;\n                                    }\n                                }\n                                else if (matchValue_3[0] === 12) {\n                                    if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) {\n                                        pattern_matching_result_8 = 0;\n                                    }\n                                    else {\n                                        pattern_matching_result_8 = 1;\n                                    }\n                                }\n                                else {\n                                    pattern_matching_result_8 = 1;\n                                }\n                                switch (pattern_matching_result_8) {\n                                    case 0: {\n                                        return create(year_3, month_3, day_2, hour_1, minute_1, 0);\n                                    }\n                                    case 1: {\n                                        let pattern_matching_result_9;\n                                        if (matchValue_3[0] === 4) {\n                                            if (DateParsing_$007CBetween$007C_$007C(1, 30, matchValue_3[1]) != null) {\n                                                pattern_matching_result_9 = 0;\n                                            }\n                                            else {\n                                                pattern_matching_result_9 = 1;\n                                            }\n                                        }\n                                        else if (matchValue_3[0] === 6) {\n                                            if (DateParsing_$007CBetween$007C_$007C(1, 30, matchValue_3[1]) != null) {\n                                                pattern_matching_result_9 = 0;\n                                            }\n                                            else {\n                                                pattern_matching_result_9 = 1;\n                                            }\n                                        }\n                                        else if (matchValue_3[0] === 9) {\n                                            if (DateParsing_$007CBetween$007C_$007C(1, 30, matchValue_3[1]) != null) {\n                                                pattern_matching_result_9 = 0;\n                                            }\n                                            else {\n                                                pattern_matching_result_9 = 1;\n                                            }\n                                        }\n                                        else if (matchValue_3[0] === 11) {\n                                            if (DateParsing_$007CBetween$007C_$007C(1, 30, matchValue_3[1]) != null) {\n                                                pattern_matching_result_9 = 0;\n                                            }\n                                            else {\n                                                pattern_matching_result_9 = 1;\n                                            }\n                                        }\n                                        else {\n                                            pattern_matching_result_9 = 1;\n                                        }\n                                        switch (pattern_matching_result_9) {\n                                            case 0: {\n                                                return create(year_3, month_3, day_2, hour_1, minute_1, 0);\n                                            }\n                                            case 1: {\n                                                return void 0;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    catch (matchValue_4) {\n        return void 0;\n    }\n}\n\nexport const Interop_reactApi = react;\n\n","import { reverse, empty, cons, fold } from \"../fable-library.3.1.5/List.js\";\nimport { uncurry } from \"../fable-library.3.1.5/Util.js\";\nimport { toString } from \"../fable-library.3.1.5/Types.js\";\nimport { join } from \"../fable-library.3.1.5/String.js\";\n\nexport function Helpers_extractClasses(xs) {\n    return fold(uncurry(2, (tupledArg) => {\n        const classes = tupledArg[0];\n        const props = tupledArg[1];\n        return (x) => {\n            const matchValue = x;\n            return (matchValue[0] === \"className\") ? [cons(toString(matchValue[1]), classes), props] : [classes, cons(x, props)];\n        };\n    }), [empty(), empty()], reverse(xs));\n}\n\nexport function Helpers_combineClasses(cn, xs) {\n    const tupledArg = Helpers_extractClasses(xs);\n    return cons([\"className\", join(\" \", cons(cn, tupledArg[0]))], tupledArg[1]);\n}\n\n","\nfunction key_create(key) {\n    return [key, false, false];\n}\n\nexport const key_enter = key_create(\"Enter\");\n\nexport const key_one = key_create(\"1\");\n\nexport const key_two = key_create(\"2\");\n\nexport const key_three = key_create(\"3\");\n\nexport const key_four = key_create(\"4\");\n\nexport const key_five = key_create(\"5\");\n\nexport const key_six = key_create(\"6\");\n\nexport const key_seven = key_create(\"7\");\n\nexport const key_eight = key_create(\"8\");\n\nexport const key_nine = key_create(\"9\");\n\nexport const key_zero = key_create(\"0\");\n\nexport const key_backspace = key_create(\"Backspace\");\n\nexport const key_plus = key_create(\"+\");\n\nexport const key_minus = key_create(\"-\");\n\nexport const key_space = key_create(\" \");\n\nexport const key_tilde = key_create(\"~\");\n\nexport const key_backtick = key_create(\"`\");\n\nexport const key_a = key_create(\"a\");\n\nexport const key_b = key_create(\"b\");\n\nexport const key_c = key_create(\"c\");\n\nexport const key_d = key_create(\"d\");\n\nexport const key_e = key_create(\"e\");\n\nexport const key_f = key_create(\"f\");\n\nexport const key_g = key_create(\"g\");\n\nexport const key_h = key_create(\"h\");\n\nexport const key_i = key_create(\"i\");\n\nexport const key_j = key_create(\"j\");\n\nexport const key_k = key_create(\"k\");\n\nexport const key_l = key_create(\"l\");\n\nexport const key_m = key_create(\"m\");\n\nexport const key_n = key_create(\"n\");\n\nexport const key_o = key_create(\"p\");\n\nexport const key_p = key_create(\"p\");\n\nexport const key_q = key_create(\"q\");\n\nexport const key_r = key_create(\"r\");\n\nexport const key_s = key_create(\"s\");\n\nexport const key_t = key_create(\"t\");\n\nexport const key_u = key_create(\"u\");\n\nexport const key_v = key_create(\"v\");\n\nexport const key_w = key_create(\"w\");\n\nexport const key_x = key_create(\"x\");\n\nexport const key_y = key_create(\"y\");\n\nexport const key_z = key_create(\"z\");\n\nexport function key_ctrl(key) {\n    const patternInput = key;\n    return [patternInput[0], true, patternInput[2]];\n}\n\nexport function key_shift(key) {\n    const patternInput = key;\n    return [patternInput[0], patternInput[1], true];\n}\n\nexport function key_ctrlAndShift(key) {\n    return [key[0], true, true];\n}\n\n","import { join } from \"../fable-library.3.1.5/String.js\";\nimport { ofArray, choose } from \"../fable-library.3.1.5/List.js\";\nimport { toString } from \"../fable-library.3.1.5/Types.js\";\n\nexport function op_PlusPlus(prop1, prop2) {\n    return [\"className\", join(\" \", choose((arg) => {\n        const _arg1 = arg;\n        if (_arg1[0] === \"className\") {\n            return toString(_arg1[1]);\n        }\n        else {\n            return void 0;\n        }\n    }, ofArray([prop1, prop2])))];\n}\n\n","import { useLayoutEffectWithDeps, useLayoutEffect, useEffectWithDeps, useEffect, useDebugValue } from \"./ReactInterop.js\";\nimport { class_type } from \"../fable-library.3.1.5/Reflection.js\";\nimport { iterate } from \"../fable-library.3.1.5/Seq.js\";\nimport { defaultArg, some, toArray } from \"../fable-library.3.1.5/Option.js\";\nimport { Interop_reactApi } from \"./Interop.fs.js\";\nimport { curry, uncurry } from \"../fable-library.3.1.5/Util.js\";\nimport { useState } from \"react\";\nimport * as react from \"react\";\n\nexport const ReactInterop_useDebugValueWithFormatter = useDebugValue;\n\nexport const ReactInterop_useEffect = useEffect;\n\nexport const ReactInterop_useEffectWithDeps = useEffectWithDeps;\n\nexport const ReactInterop_useLayoutEffect = useLayoutEffect;\n\nexport const ReactInterop_useLayoutEffectWithDeps = useLayoutEffectWithDeps;\n\nexport class Internal {\n    constructor() {\n    }\n}\n\nexport function Internal$reflection() {\n    return class_type(\"Feliz.Internal\", void 0, Internal);\n}\n\nexport function Internal_$ctor() {\n    return new Internal();\n}\n\n(() => {\n})();\n\nexport function Internal_functionComponent_Z1B155329(renderElement, name, withKey) {\n    iterate((name_1) => {\n        renderElement.displayName = name_1;\n    }, toArray(name));\n    console.warn(some(\"Feliz: using React.functionComponent in Fable 3 is obsolete, please consider using the [\\u003cReactComponent\\u003e] attribute instead which makes Feliz output better Javascript code that is compatible with react-refresh\"));\n    return (props) => Interop_reactApi.createElement(renderElement, Internal_propsWithKey(withKey, props));\n}\n\nexport function Internal_memo_Z603636D8(renderElement, name, areEqual, withKey) {\n    const memoElementType = Interop_reactApi.memo(renderElement, uncurry(2, defaultArg(curry(2, areEqual), null)));\n    iterate((name_1) => {\n        renderElement.displayName = name_1;\n    }, toArray(name));\n    return (props) => Interop_reactApi.createElement(memoElementType, Internal_propsWithKey(withKey, props));\n}\n\nfunction Internal_propsWithKey(withKey, props) {\n    if (withKey == null) {\n        return props;\n    }\n    else {\n        const f = withKey;\n        props.key = f(props);\n        return props;\n    }\n}\n\nexport class React {\n    constructor() {\n    }\n}\n\nexport function React$reflection() {\n    return class_type(\"Feliz.React\", void 0, React);\n}\n\nexport function React_createDisposable_3A5B6456(dispose) {\n    return {\n        Dispose() {\n            dispose();\n        },\n    };\n}\n\nexport function useReact_useState_FCFD9EF(initializer) {\n    return Interop_reactApi.useState(initializer);\n}\n\nexport function useReact_useReducer_2B9E6EA0(update, initialState) {\n    return Interop_reactApi.useReducer(update, initialState);\n}\n\nexport function useReact_useEffect_Z5ECA432F(effect) {\n    ReactInterop_useEffect(effect);\n}\n\nexport function useReact_useEffect_Z5234A374(effect, dependencies) {\n    ReactInterop_useEffectWithDeps(effect, dependencies);\n}\n\nexport function useReact_useLayoutEffect_Z5ECA432F(effect) {\n    ReactInterop_useLayoutEffect(effect);\n}\n\nexport function useReact_useLayoutEffect_Z5234A374(effect, dependencies) {\n    ReactInterop_useLayoutEffectWithDeps(effect, dependencies);\n}\n\nexport function useReact_useLayoutEffect_3A5B6456(effect) {\n    ReactInterop_useLayoutEffect((_arg1) => {\n        effect();\n        return React_createDisposable_3A5B6456(() => {\n        });\n    });\n}\n\nexport function useReact_useLayoutEffect_Z101E1A95(effect, dependencies) {\n    ReactInterop_useLayoutEffectWithDeps((_arg2) => {\n        effect();\n        return React_createDisposable_3A5B6456(() => {\n        });\n    }, dependencies);\n}\n\nexport function useReact_useEffectOnce_3A5B6456(effect) {\n    useReact_useEffect_Z101E1A95(effect, []);\n}\n\nexport function useReact_useEffectOnce_Z5ECA432F(effect) {\n    useReact_useEffect_Z5234A374(effect, []);\n}\n\nexport function useReact_useEffectOnce_6E825304(effect) {\n    useReact_useEffect_Z5234A374(() => {\n        const disposeOption = effect();\n        return {\n            Dispose() {\n                iterate((d) => {\n                    let copyOfStruct = d;\n                    copyOfStruct.Dispose();\n                }, toArray(disposeOption));\n            },\n        };\n    }, []);\n}\n\nexport function useReact_useEffect_3A5B6456(effect) {\n    ReactInterop_useEffect((_arg3) => {\n        effect();\n        return React_createDisposable_3A5B6456(() => {\n        });\n    });\n}\n\nexport function useReact_useEffect_Z101E1A95(effect, dependencies) {\n    ReactInterop_useEffectWithDeps((_arg4) => {\n        effect();\n        return React_createDisposable_3A5B6456(() => {\n        });\n    }, dependencies);\n}\n\nexport function useReact_useDebugValue_Z721C83C5(value) {\n    ReactInterop_useDebugValueWithFormatter(value, (x) => x);\n}\n\nexport function useReact_useDebugValue_77A55D6D(value, formatter) {\n    ReactInterop_useDebugValueWithFormatter(value, formatter);\n}\n\nexport function useReact_useCallback_93353E(callbackFunction, dependencies) {\n    return Interop_reactApi.useCallback(callbackFunction, defaultArg(dependencies, []));\n}\n\nexport function useReact_useRef_1505(initialValue) {\n    return Interop_reactApi.useRef(initialValue);\n}\n\nexport function useReact_useInputRef() {\n    return useReact_useRef_1505(void 0);\n}\n\nexport function useReact_useButtonRef() {\n    return useReact_useRef_1505(void 0);\n}\n\nexport function useReact_useElementRef() {\n    return useReact_useRef_1505(void 0);\n}\n\nexport function useReact_useMemo_CF4EA67(createFunction, dependencies) {\n    return Interop_reactApi.useMemo(createFunction, defaultArg(dependencies, []));\n}\n\nexport function React_functionComponent_2F9D7239(render, withKey) {\n    return Internal_functionComponent_Z1B155329(render, void 0, withKey);\n}\n\nexport function React_functionComponent_Z4C5FE1BE(name, render, withKey) {\n    return Internal_functionComponent_Z1B155329(render, name, withKey);\n}\n\nexport function React_functionComponent_19A12FB2(render, withKey) {\n    return Internal_functionComponent_Z1B155329((arg) => react.createElement(react.Fragment, {}, ...render(arg)), void 0, withKey);\n}\n\nexport function React_functionComponent_2E1DD889(name, render, withKey) {\n    return Internal_functionComponent_Z1B155329((arg) => react.createElement(react.Fragment, {}, ...render(arg)), name, withKey);\n}\n\nexport function React_memo_62A0F746(render, withKey, areEqual) {\n    return Internal_memo_Z603636D8(render, void 0, areEqual, withKey);\n}\n\nexport function React_memo_6648A89D(name, render, withKey, areEqual) {\n    return Internal_memo_Z603636D8(render, name, areEqual, withKey);\n}\n\nexport function React_memo_C2C6BED(render, withKey, areEqual) {\n    return Internal_memo_Z603636D8((arg) => react.createElement(react.Fragment, {}, ...render(arg)), void 0, areEqual, withKey);\n}\n\nexport function React_memo_Z4FCC584A(name, render, withKey, areEqual) {\n    return Internal_memo_Z603636D8((arg) => react.createElement(react.Fragment, {}, ...render(arg)), name, areEqual, withKey);\n}\n\nexport function React_createContext_1AE444D8(name, defaultValue) {\n    const contextObject = Interop_reactApi.createContext(defaultArg(defaultValue, void 0));\n    iterate((name_1) => {\n        contextObject.displayName = name_1;\n    }, toArray(name));\n    return contextObject;\n}\n\nexport function React_contextProvider_34D9BBBD(contextObject, contextValue, child) {\n    return Interop_reactApi.createElement(contextObject.Provider, {\n        value: contextValue,\n    }, child);\n}\n\nexport function React_contextProvider_138D2F56(contextObject, contextValue, children) {\n    return Interop_reactApi.createElement(contextObject.Provider, {\n        value: contextValue,\n    }, ...children);\n}\n\nexport function React_contextConsumer_Z68910595(contextObject, render) {\n    return Interop_reactApi.createElement(contextObject.Consumer, null, render);\n}\n\nexport function React_contextConsumer_56D53A40(contextObject, render) {\n    return Interop_reactApi.createElement(contextObject.Consumer, null, (arg) => react.createElement(react.Fragment, {}, ...render(arg)));\n}\n\nexport function useReact_useContext_37FA55CF(contextObject) {\n    return Interop_reactApi.useContext(contextObject);\n}\n\nexport function useReact_useCallbackRef_7C4B0DD6(callback) {\n    const lastRenderCallbackRef = useReact_useRef_1505(callback);\n    const callbackRef = useReact_useCallback_93353E((arg) => lastRenderCallbackRef.current(arg), []);\n    useReact_useLayoutEffect_3A5B6456(() => {\n        lastRenderCallbackRef.current = callback;\n    });\n    return callbackRef;\n}\n\nexport const React_useStateWithUpdater_1505 = useState;\n\nexport function React_forwardRef_3790D881(render) {\n    const forwardRefType = Interop_reactApi.forwardRef((props, ref) => render([props, ref]));\n    return (tupledArg) => {\n        let o;\n        return Interop_reactApi.createElement(forwardRefType, (o = {\n            props: tupledArg[0],\n            ref: tupledArg[1],\n        }, Object.assign({}, o)));\n    };\n}\n\nexport function React_forwardRef_7DC3DB1A(name, render) {\n    const forwardRefType = Interop_reactApi.forwardRef((props, ref) => render([props, ref]));\n    render.displayName = name;\n    return (tupledArg) => {\n        let o;\n        return Interop_reactApi.createElement(forwardRefType, (o = {\n            props: tupledArg[0],\n            ref: tupledArg[1],\n        }, Object.assign({}, o)));\n    };\n}\n\nexport function React_strictMode_6E3A73D(children) {\n    return Interop_reactApi.createElement(Interop_reactApi.StrictMode, void 0, ...children);\n}\n\nexport function React_lazy$0027_4712D3AE(dynamicImport, props) {\n    return Interop_reactApi.createElement(Interop_reactApi.lazy((() => dynamicImport)), props);\n}\n\nexport function React_lazy$0027_Z3D8450FC(dynamicImport, props) {\n    return Interop_reactApi.createElement(Interop_reactApi.lazy(dynamicImport), props);\n}\n\nexport function React_suspense_6E3A73D(children) {\n    let o;\n    return Interop_reactApi.createElement(Interop_reactApi.Suspense, (o = {\n        fallback: null,\n    }, Object.assign({}, o)), ...children);\n}\n\nexport function React_suspense_Z3796A576(children, fallback) {\n    let o;\n    return Interop_reactApi.createElement(Interop_reactApi.Suspense, (o = {\n        fallback: fallback,\n    }, Object.assign({}, o)), ...children);\n}\n\nexport function useReact_useImperativeHandle_596DDC25(ref, createHandle) {\n    Interop_reactApi.useImperativeHandle(ref, createHandle);\n}\n\nexport function useReact_useImperativeHandle_Z12F09548(ref, createHandle, dependencies) {\n    Interop_reactApi.useImperativeHandle(ref, createHandle, dependencies);\n}\n\nexport function useFeliz_React__React_useState_Static_1505(initial) {\n    return Interop_reactApi.useState(initial);\n}\n\nexport const Feliz_React__React_useStateWithUpdater_Static_FCFD9EF = useState;\n\n","import {\r\n    useEffect as useEffectReact,\r\n    useLayoutEffect as useLayoutEffectReact,\r\n    useDebugValue as useDebugValueReact } from 'react'\r\n\r\nexport const useEffect = getDisposable => {\r\n    useEffectReact(() => {\r\n        const disposable = getDisposable()\r\n        return () => {\r\n            disposable.Dispose();\r\n        }\r\n    })\r\n}\r\n\r\nexport const useEffectWithDeps = (getDisposable, deps) => {\r\n    useEffectReact(() => {\r\n        const disposable = getDisposable()\r\n        return () => {\r\n            disposable.Dispose();\r\n        }\r\n    }, deps)\r\n}\r\n\r\nexport const useLayoutEffect = getDisposable => {\r\n    useLayoutEffectReact(() => {\r\n        const disposable = getDisposable()\r\n        return () => {\r\n            disposable.Dispose();\r\n        }\r\n    })\r\n}\r\n\r\nexport const useLayoutEffectWithDeps = (getDisposable, deps) => {\r\n    useLayoutEffectReact(() => {\r\n        const disposable = getDisposable()\r\n        return () => {\r\n            disposable.Dispose();\r\n        }\r\n    }, deps)\r\n}\r\n\r\nexport const useDebugValue = (value, formatter) => useDebugValueReact(value, formatter)","import { Result_MapError, Result_Map, FSharpResult$2 } from \"../fable-library.3.1.5/Choice.js\";\nimport { class_type } from \"../fable-library.3.1.5/Reflection.js\";\nimport { getEnumerator } from \"../fable-library.3.1.5/Seq.js\";\nimport { equals } from \"../fable-library.3.1.5/Util.js\";\n\nexport function reject(reason) {\n    return Promise.reject(reason);\n}\n\nexport function result(a) {\n    return a.then(((arg) => (new FSharpResult$2(0, arg))),((arg_1) => (new FSharpResult$2(1, arg_1))));\n}\n\nexport function mapResult(fn, a) {\n    return a.then(((result_1) => Result_Map(fn, result_1)));\n}\n\nexport function bindResult(fn, a) {\n    return a.then(((a_1) => {\n        if (a_1.tag === 1) {\n            return Promise.resolve((new FSharpResult$2(1, a_1.fields[0])));\n        }\n        else {\n            return result(fn(a_1.fields[0]));\n        }\n    }));\n}\n\nexport function mapResultError(fn, a) {\n    return a.then(((result_1) => Result_MapError(fn, result_1)));\n}\n\nexport function tap(fn, a) {\n    return a.then(((x) => {\n        fn(x);\n        return x;\n    }));\n}\n\nexport class PromiseBuilder {\n    constructor() {\n    }\n}\n\nexport function PromiseBuilder$reflection() {\n    return class_type(\"Promise.PromiseBuilder\", void 0, PromiseBuilder);\n}\n\nexport function PromiseBuilder_$ctor() {\n    return new PromiseBuilder();\n}\n\nexport function PromiseBuilder__For_1565554B(x, seq, body) {\n    let p = Promise.resolve(undefined);\n    const enumerator = getEnumerator(seq);\n    try {\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            const a = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n            p = (p.then((() => body(a))));\n        }\n    }\n    finally {\n        enumerator.Dispose();\n    }\n    return p;\n}\n\nexport function PromiseBuilder__While_2044D34(x, guard, p) {\n    if (guard()) {\n        return p.then((() => PromiseBuilder__While_2044D34(x, guard, p)));\n    }\n    else {\n        return Promise.resolve(undefined);\n    }\n}\n\nexport function PromiseBuilder__TryFinally_7D49A2FD(x, p, compensation) {\n    return p.then(((x_1) => {\n        compensation();\n        return x_1;\n    }),((er) => {\n        compensation();\n        throw er;\n    }));\n}\n\nexport function PromiseBuilder__Delay_62FBFDE1(x, generator) {\n    return {\n        then: (f1, f2) => {\n            try {\n                return generator().then(f1, f2);\n            }\n            catch (er) {\n                if (equals(f2, null)) {\n                    return Promise.reject(er);\n                }\n                else {\n                    try {\n                        return Promise.resolve(f2(er));\n                    }\n                    catch (er_1) {\n                        return Promise.reject(er_1);\n                    }\n                }\n            }\n        },\n        catch: (f) => {\n            try {\n                return generator().catch(f);\n            }\n            catch (er_2) {\n                try {\n                    return Promise.resolve(f(er_2));\n                }\n                catch (er_3) {\n                    return Promise.reject(er_3);\n                }\n            }\n        },\n    };\n}\n\nexport function PromiseBuilder__Run_212F1D4B(x, p) {\n    return new Promise(((success, fail) => {\n        try {\n            const p_1 = Promise.resolve(p);\n            p_1.then(success, fail);\n        }\n        catch (er) {\n            fail(er);\n        }\n    }));\n}\n\nexport function PromiseBuilder__Using_74F7E79D(x, resource, binder) {\n    return PromiseBuilder__TryFinally_7D49A2FD(x, binder(resource), () => {\n        let copyOfStruct = resource;\n        copyOfStruct.Dispose();\n    });\n}\n\n","import { PromiseBuilder_$ctor } from \"./Promise.fs.js\";\n\nexport const promise = PromiseBuilder_$ctor();\n\n","import { Union } from \"../fable-library.3.1.5/Types.js\";\nimport { class_type, union_type, int32_type, array_type } from \"../fable-library.3.1.5/Reflection.js\";\nimport { fill } from \"../fable-library.3.1.5/Array.js\";\nimport { isDisposable, comparePrimitives, max } from \"../fable-library.3.1.5/Util.js\";\nimport { toArray, value as value_1, some } from \"../fable-library.3.1.5/Option.js\";\nimport { iterate as iterate_1, rangeNumber, singleton, collect, take, skip, append, delay } from \"../fable-library.3.1.5/Seq.js\";\nimport { useReact_useMemo_CF4EA67, useReact_useEffect_3A5B6456, useReact_useEffect_Z101E1A95, useReact_useEffect_Z5234A374, useReact_useCallbackRef_7C4B0DD6, React_createDisposable_3A5B6456, useReact_useEffectOnce_Z5ECA432F, useFeliz_React__React_useState_Static_1505, useReact_useRef_1505 } from \"../Feliz.1.37.0/React.fs.js\";\nimport { isCancellationRequested, cancel, createCancellationToken } from \"../fable-library.3.1.5/Async.js\";\nimport { PromiseBuilder__While_2044D34, PromiseBuilder__Delay_62FBFDE1, PromiseBuilder__Run_212F1D4B } from \"../Fable.Promise.2.0.0/Promise.fs.js\";\nimport { iterate } from \"../fable-library.3.1.5/List.js\";\nimport { promise } from \"../Fable.Promise.2.0.0/PromiseImpl.fs.js\";\n\nexport class RingState$1 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Writable\", \"ReadWritable\"];\n    }\n}\n\nexport function RingState$1$reflection(gen0) {\n    return union_type(\"Feliz.UseElmish.RingState`1\", [gen0], RingState$1, () => [[[\"wx\", array_type(gen0)], [\"ix\", int32_type]], [[\"rw\", array_type(gen0)], [\"wix\", int32_type], [\"rix\", int32_type]]]);\n}\n\nexport class RingBuffer$1 {\n    constructor(size) {\n        this.state = (new RingState$1(0, fill(new Array(max((x, y) => comparePrimitives(x, y), size, 10)), 0, max((x, y) => comparePrimitives(x, y), size, 10), null), 0));\n    }\n}\n\nexport function RingBuffer$1$reflection(gen0) {\n    return class_type(\"Feliz.UseElmish.RingBuffer`1\", [gen0], RingBuffer$1);\n}\n\nexport function RingBuffer$1_$ctor_Z524259A4(size) {\n    return new RingBuffer$1(size);\n}\n\nexport function RingBuffer$1__Pop(_) {\n    const matchValue = _.state;\n    if (matchValue.tag === 1) {\n        const wix = matchValue.fields[1] | 0;\n        const rix = matchValue.fields[2] | 0;\n        const items = matchValue.fields[0];\n        const rix$0027 = ((rix + 1) % items.length) | 0;\n        if (rix$0027 === wix) {\n            _.state = (new RingState$1(0, items, wix));\n        }\n        else {\n            _.state = (new RingState$1(1, items, wix, rix$0027));\n        }\n        return some(items[rix]);\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function RingBuffer$1__Push_2B595(_, item) {\n    const matchValue = _.state;\n    if (matchValue.tag === 1) {\n        const wix_1 = matchValue.fields[1] | 0;\n        const rix = matchValue.fields[2] | 0;\n        const items_1 = matchValue.fields[0];\n        items_1[wix_1] = item;\n        const wix$0027 = ((wix_1 + 1) % items_1.length) | 0;\n        if (wix$0027 === rix) {\n            _.state = (new RingState$1(1, RingBuffer$1__doubleSize(_, rix, items_1), items_1.length, 0));\n        }\n        else {\n            _.state = (new RingState$1(1, items_1, wix$0027, rix));\n        }\n    }\n    else {\n        const ix = matchValue.fields[1] | 0;\n        const items = matchValue.fields[0];\n        items[ix] = item;\n        const wix = ((ix + 1) % items.length) | 0;\n        _.state = (new RingState$1(1, items, wix, ix));\n    }\n}\n\nfunction RingBuffer$1__doubleSize(this$, ix, items) {\n    return Array.from(delay(() => append(skip(ix, items), delay(() => append(take(ix, items), delay(() => collect((matchValue) => singleton(null), rangeNumber(0, 1, items.length))))))));\n}\n\nexport function useFeliz_React__React_useElmish_Static_17DC4F1D(init, update, dependencies) {\n    const state = useReact_useRef_1505(init[0]);\n    const ring = useReact_useRef_1505(RingBuffer$1_$ctor_Z524259A4(10));\n    const patternInput = useFeliz_React__React_useState_Static_1505(init[0]);\n    let token_1;\n    const cts = useReact_useRef_1505(createCancellationToken());\n    const token = useReact_useRef_1505(cts.current);\n    useReact_useEffectOnce_Z5ECA432F(() => React_createDisposable_3A5B6456(() => {\n        cancel(cts.current);\n    }));\n    token_1 = token;\n    const setChildState_1 = () => {\n        void setTimeout(() => {\n            let copyOfStruct;\n            if (!(copyOfStruct = token_1.current, isCancellationRequested(copyOfStruct))) {\n                patternInput[1](state.current);\n            }\n        }, 0);\n    };\n    const dispatch = (msg) => {\n        const pr = PromiseBuilder__Run_212F1D4B(promise, PromiseBuilder__Delay_62FBFDE1(promise, () => {\n            let nextMsg = some(msg);\n            return PromiseBuilder__While_2044D34(promise, () => {\n                let copyOfStruct_1;\n                return (nextMsg != null) ? (!(copyOfStruct_1 = token_1.current, isCancellationRequested(copyOfStruct_1))) : false;\n            }, PromiseBuilder__Delay_62FBFDE1(promise, () => {\n                const patternInput_1 = update(value_1(nextMsg), state.current);\n                iterate((sub) => {\n                    sub(dispatch);\n                }, patternInput_1[1]);\n                nextMsg = RingBuffer$1__Pop(ring.current);\n                state.current = patternInput_1[0];\n                setChildState_1();\n                return Promise.resolve();\n            }));\n        }));\n        pr.then();\n    };\n    const dispatch_1 = useReact_useCallbackRef_7C4B0DD6(dispatch);\n    useReact_useEffect_Z5234A374(() => React_createDisposable_3A5B6456(() => {\n        let matchValue;\n        iterate_1((o) => {\n            o.Dispose();\n        }, toArray((matchValue = state.current, isDisposable(matchValue) ? matchValue : (void 0))));\n    }), dependencies);\n    useReact_useEffect_Z101E1A95(() => {\n        state.current = init[0];\n        setChildState_1();\n        iterate((sub_1) => {\n            sub_1(dispatch_1);\n        }, init[1]);\n    }, dependencies);\n    useReact_useEffect_3A5B6456(() => {\n        iterate_1(dispatch_1, toArray(RingBuffer$1__Pop(ring.current)));\n    });\n    return [patternInput[0], dispatch_1];\n}\n\nexport function useFeliz_React__React_useElmish_Static_645B1FB7(init, update, dependencies) {\n    return useFeliz_React__React_useElmish_Static_17DC4F1D(useReact_useMemo_CF4EA67(init, dependencies), update, dependencies);\n}\n\n","import { Record, Union } from \"./.fable/fable-library.3.1.5/Types.js\";\nimport { list_type, option_type, record_type, string_type, class_type, union_type } from \"./.fable/fable-library.3.1.5/Reflection.js\";\nimport { FSharpResult$2 } from \"./.fable/fable-library.3.1.5/Choice.js\";\nimport { SimpleJson_tryParse } from \"./.fable/Fable.SimpleJson.3.18.1/SimpleJson.fs.js\";\nimport { Convert_serialize, Convert_fromJson } from \"./.fable/Fable.SimpleJson.3.18.1/Json.Converter.fs.js\";\nimport { createTypeInfo } from \"./.fable/Fable.SimpleJson.3.18.1/TypeInfo.Converter.fs.js\";\nimport { newGuid } from \"./.fable/fable-library.3.1.5/Guid.js\";\nimport { addHours, addMonths, addDays, utcNow } from \"./.fable/fable-library.3.1.5/Date.js\";\nimport { sortBy, ofSeq, cons, singleton, append, filter, map, ofArray } from \"./.fable/fable-library.3.1.5/List.js\";\nimport { Cmd_none } from \"./.fable/Fable.Elmish.3.1.0/cmd.fs.js\";\nimport { Interop_reactApi } from \"./.fable/Feliz.1.37.0/Interop.fs.js\";\nimport { createElement } from \"react\";\nimport { join } from \"./.fable/fable-library.3.1.5/String.js\";\nimport { compareArrays, equals, createObj } from \"./.fable/fable-library.3.1.5/Util.js\";\nimport { Helpers_combineClasses } from \"./.fable/Feliz.Bulma.2.11.0/ElementBuilders.fs.js\";\nimport { PropHelpers_createOnKey } from \"./.fable/Feliz.1.37.0/Properties.fs.js\";\nimport { key_enter } from \"./.fable/Feliz.1.37.0/Key.fs.js\";\nimport { op_PlusPlus } from \"./.fable/Feliz.Bulma.2.11.0/Operators.fs.js\";\nimport { map as map_1, empty, singleton as singleton_1, append as append_1, delay } from \"./.fable/fable-library.3.1.5/Seq.js\";\nimport { useFeliz_React__React_useElmish_Static_645B1FB7 } from \"./.fable/Feliz.UseElmish.1.5.1/UseElmish.fs.js\";\n\nclass Filter extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"All\", \"Completed\", \"NotCompleted\"];\n    }\n}\n\nfunction Filter$reflection() {\n    return union_type(\"Todo.Filter\", [], Filter, () => [[], [], []]);\n}\n\nclass TodoBeingEdited extends Record {\n    constructor(Id, Description) {\n        super();\n        this.Id = Id;\n        this.Description = Description;\n    }\n}\n\nfunction TodoBeingEdited$reflection() {\n    return record_type(\"Todo.TodoBeingEdited\", [], TodoBeingEdited, () => [[\"Id\", class_type(\"System.Guid\")], [\"Description\", string_type]]);\n}\n\nclass Todo extends Record {\n    constructor(Id, Description, CompletedOn, CreatedOn, TodoBeingEdited) {\n        super();\n        this.Id = Id;\n        this.Description = Description;\n        this.CompletedOn = CompletedOn;\n        this.CreatedOn = CreatedOn;\n        this.TodoBeingEdited = TodoBeingEdited;\n    }\n}\n\nfunction Todo$reflection() {\n    return record_type(\"Todo.Todo\", [], Todo, () => [[\"Id\", class_type(\"System.Guid\")], [\"Description\", string_type], [\"CompletedOn\", option_type(class_type(\"System.DateTime\"))], [\"CreatedOn\", class_type(\"System.DateTime\")], [\"TodoBeingEdited\", option_type(TodoBeingEdited$reflection())]]);\n}\n\nclass State extends Record {\n    constructor(TodoList, NewTodo, Filter) {\n        super();\n        this.TodoList = TodoList;\n        this.NewTodo = NewTodo;\n        this.Filter = Filter;\n    }\n}\n\nfunction State$reflection() {\n    return record_type(\"Todo.State\", [], State, () => [[\"TodoList\", list_type(Todo$reflection())], [\"NewTodo\", string_type], [\"Filter\", Filter$reflection()]]);\n}\n\nclass Msg extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"SetNewTodo\", \"AddNewTodo\", \"ToggleCompleted\", \"DeleteTodo\", \"CancelEdit\", \"ApplyEdit\", \"StartEditingTodo\", \"SetEditedDescription\", \"SetFilter\"];\n    }\n}\n\nfunction Msg$reflection() {\n    return union_type(\"Todo.Msg\", [], Msg, () => [[[\"Item\", string_type]], [], [[\"Item\", class_type(\"System.Guid\")]], [[\"Item\", class_type(\"System.Guid\")]], [[\"Item\", class_type(\"System.Guid\")]], [[\"Item\", class_type(\"System.Guid\")]], [[\"Item\", class_type(\"System.Guid\")]], [[\"Item1\", class_type(\"System.Guid\")], [\"Item2\", string_type]], [[\"Item\", Filter$reflection()]]]);\n}\n\nfunction init() {\n    let matchValue, copyOfStruct, copyOfStruct_1, copyOfStruct_2;\n    let storedState;\n    const arg00_1 = localStorage.getItem(\"state\");\n    try {\n        storedState = (new FSharpResult$2(0, (matchValue = SimpleJson_tryParse(arg00_1), (matchValue != null) ? Convert_fromJson(matchValue, createTypeInfo(State$reflection())) : (() => {\n            throw (new Error(\"Couldn\\u0027t parse the input JSON string because it seems to be invalid\"));\n        })())));\n    }\n    catch (ex) {\n        storedState = (new FSharpResult$2(1, ex.message));\n    }\n    if (storedState.tag === 1) {\n        return [new State(ofArray([new Todo(newGuid(), \"Learn F#\", (copyOfStruct = utcNow(), addDays(copyOfStruct, -1)), (copyOfStruct_1 = utcNow(), addMonths(copyOfStruct_1, -1)), void 0), new Todo(newGuid(), \"Learn Elmish\", void 0, (copyOfStruct_2 = utcNow(), addHours(copyOfStruct_2, -3)), void 0)]), \"\", new Filter(0)), Cmd_none()];\n    }\n    else {\n        const state = storedState.fields[0];\n        return [new State(map((todo) => (new Todo(todo.Id, todo.Description, todo.CompletedOn, todo.CreatedOn, void 0)), state.TodoList), state.NewTodo, state.Filter), Cmd_none()];\n    }\n}\n\nfunction update(msg, state) {\n    let pattern_matching_result;\n    if (msg.tag === 0) {\n        pattern_matching_result = 0;\n    }\n    else if (msg.tag === 3) {\n        pattern_matching_result = 1;\n    }\n    else if (msg.tag === 2) {\n        pattern_matching_result = 2;\n    }\n    else if (msg.tag === 1) {\n        if (state.NewTodo === \"\") {\n            pattern_matching_result = 3;\n        }\n        else {\n            pattern_matching_result = 4;\n        }\n    }\n    else {\n        pattern_matching_result = 4;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return [new State(state.TodoList, msg.fields[0], state.Filter), Cmd_none()];\n        }\n        case 1: {\n            const newState = new State(filter((todo) => (todo.Id !== msg.fields[0]), state.TodoList), state.NewTodo, state.Filter);\n            localStorage.setItem(\"state\", Convert_serialize(newState, createTypeInfo(State$reflection())));\n            return [newState, Cmd_none()];\n        }\n        case 2: {\n            const newState_1 = new State(map((todo_1) => {\n                if (todo_1.Id === msg.fields[0]) {\n                    return new Todo(todo_1.Id, todo_1.Description, (todo_1.CompletedOn == null) ? utcNow() : (void 0), todo_1.CreatedOn, todo_1.TodoBeingEdited);\n                }\n                else {\n                    return todo_1;\n                }\n            }, state.TodoList), state.NewTodo, state.Filter);\n            localStorage.setItem(\"state\", Convert_serialize(newState_1, createTypeInfo(State$reflection())));\n            return [newState_1, Cmd_none()];\n        }\n        case 3: {\n            return [state, Cmd_none()];\n        }\n        case 4: {\n            switch (msg.tag) {\n                case 1: {\n                    const newState_2 = new State(append(state.TodoList, singleton(new Todo(newGuid(), state.NewTodo, void 0, utcNow(), void 0))), \"\", state.Filter);\n                    localStorage.setItem(\"state\", Convert_serialize(newState_2, createTypeInfo(State$reflection())));\n                    return [newState_2, Cmd_none()];\n                }\n                case 6: {\n                    return [new State(map((todo_2) => {\n                        if (todo_2.Id === msg.fields[0]) {\n                            return new Todo(todo_2.Id, todo_2.Description, todo_2.CompletedOn, todo_2.CreatedOn, new TodoBeingEdited(todo_2.Id, todo_2.Description));\n                        }\n                        else {\n                            return todo_2;\n                        }\n                    }, state.TodoList), state.NewTodo, state.Filter), Cmd_none()];\n                }\n                case 4: {\n                    return [new State(map((todo_3) => {\n                        if (todo_3.Id === msg.fields[0]) {\n                            return new Todo(todo_3.Id, todo_3.Description, todo_3.CompletedOn, todo_3.CreatedOn, void 0);\n                        }\n                        else {\n                            return todo_3;\n                        }\n                    }, state.TodoList), state.NewTodo, state.Filter), Cmd_none()];\n                }\n                case 5: {\n                    const newState_3 = new State(map((todo_4) => {\n                        if (todo_4.Id === msg.fields[0]) {\n                            const matchValue = todo_4.TodoBeingEdited;\n                            if (matchValue != null) {\n                                if (matchValue.Description === \"\") {\n                                    const todoBeingEdited_1 = matchValue;\n                                    return todo_4;\n                                }\n                                else if (matchValue != null) {\n                                    return new Todo(todo_4.Id, matchValue.Description, todo_4.CompletedOn, todo_4.CreatedOn, void 0);\n                                }\n                                else {\n                                    throw (new Error(\"The match cases were incomplete\"));\n                                }\n                            }\n                            else {\n                                return todo_4;\n                            }\n                        }\n                        else {\n                            return todo_4;\n                        }\n                    }, state.TodoList), state.NewTodo, state.Filter);\n                    localStorage.setItem(\"state\", Convert_serialize(newState_3, createTypeInfo(State$reflection())));\n                    return [newState_3, Cmd_none()];\n                }\n                case 7: {\n                    return [new State(map((todo_5) => {\n                        if (todo_5.Id === msg.fields[0]) {\n                            return new Todo(todo_5.Id, todo_5.Description, todo_5.CompletedOn, todo_5.CreatedOn, new TodoBeingEdited(todo_5.Id, msg.fields[1]));\n                        }\n                        else {\n                            return todo_5;\n                        }\n                    }, state.TodoList), state.NewTodo, state.Filter), Cmd_none()];\n                }\n                case 8: {\n                    const newState_4 = new State(state.TodoList, state.NewTodo, msg.fields[0]);\n                    localStorage.setItem(\"state\", Convert_serialize(newState_4, createTypeInfo(State$reflection())));\n                    return [newState_4, Cmd_none()];\n                }\n                default: {\n                    throw (new Error(\"The match cases were incomplete against type of \\u0027Msg\\u0027 at /Users/pat/Code/Tasks/src/Todo.fs\"));\n                }\n            }\n        }\n    }\n}\n\nconst appTitle = (() => {\n    let elms_3, elms_1, elms, elms_2, props_4;\n    const props_8 = ofArray([[\"className\", \"is-spaced\"], [\"children\", Interop_reactApi.Children.toArray([(elms_3 = ofArray([(elms_1 = singleton((elms = singleton(createElement(\"h1\", {\n        className: \"title is-1\",\n        children: \"Elmish To-Do List\",\n    })), createElement(\"a\", {\n        className: \"navbar-item\",\n        children: Interop_reactApi.Children.toArray(Array.from(elms)),\n    }))), createElement(\"div\", {\n        className: \"navbar-brand\",\n        children: Interop_reactApi.Children.toArray(Array.from(elms_1)),\n    })), (elms_2 = singleton((props_4 = ofArray([[\"href\", \"https://github.com/the-pat/elmish-todo\"], [\"target\", \"_blank\"], [\"children\", Interop_reactApi.Children.toArray([createElement(\"i\", {\n        className: join(\" \", [\"is-size-2\", \"fab\", \"fa-github\"]),\n    })])]]), createElement(\"a\", createObj(Helpers_combineClasses(\"navbar-item\", props_4))))), createElement(\"div\", {\n        className: \"navbar-end\",\n        children: Interop_reactApi.Children.toArray(Array.from(elms_2)),\n    }))]), createElement(\"div\", {\n        className: \"container\",\n        children: Interop_reactApi.Children.toArray(Array.from(elms_3)),\n    }))])]]);\n    return createElement(\"nav\", createObj(Helpers_combineClasses(\"navbar\", props_8)));\n})();\n\nfunction inputField(state, dispatch) {\n    let props_2, props, value_6, props_7, props_5;\n    const props_9 = ofArray([[\"className\", \"has-addons\"], [\"children\", Interop_reactApi.Children.toArray([(props_2 = ofArray([[\"className\", \"is-expanded\"], [\"children\", Interop_reactApi.Children.toArray([(props = ofArray([[\"className\", \"is-medium\"], (value_6 = state.NewTodo, [\"ref\", (e) => {\n        if ((!(e == null)) ? (!equals(e.value, value_6)) : false) {\n            e.value = value_6;\n        }\n    }]), [\"onChange\", (ev) => {\n        dispatch(new Msg(0, ev.target.value));\n    }], [\"onKeyDown\", (ev_1) => {\n        PropHelpers_createOnKey(key_enter, (_arg1) => {\n            dispatch(new Msg(1));\n        }, ev_1);\n    }]]), createElement(\"input\", createObj(cons([\"type\", \"text\"], Helpers_combineClasses(\"input\", props)))))])]]), createElement(\"div\", createObj(Helpers_combineClasses(\"control\", props_2)))), (props_7 = singleton([\"children\", Interop_reactApi.Children.toArray([(props_5 = ofArray([op_PlusPlus([\"className\", \"is-primary\"], [\"className\", \"is-medium\"]), [\"onClick\", (_arg2) => {\n        dispatch(new Msg(1));\n    }], [\"children\", Interop_reactApi.Children.toArray([createElement(\"i\", {\n        className: join(\" \", [\"fas\", \"fa-plus\"]),\n    })])]]), createElement(\"button\", createObj(Helpers_combineClasses(\"button\", props_5))))])]), createElement(\"div\", createObj(Helpers_combineClasses(\"control\", props_7))))])]]);\n    return createElement(\"div\", createObj(Helpers_combineClasses(\"field\", props_9)));\n}\n\nfunction renderEditForm(uneditedTodoDescription, todoBeingEdited, dispatch) {\n    let props_11, props_2, props, value_6, elms, props_5, props_8;\n    const elms_1 = singleton((props_11 = ofArray([[\"className\", \"is-grouped\"], [\"children\", Interop_reactApi.Children.toArray([(props_2 = ofArray([[\"className\", \"is-expanded\"], [\"children\", Interop_reactApi.Children.toArray([(props = ofArray([[\"className\", \"is-medium\"], (value_6 = todoBeingEdited.Description, [\"ref\", (e) => {\n        if ((!(e == null)) ? (!equals(e.value, value_6)) : false) {\n            e.value = value_6;\n        }\n    }]), [\"onChange\", (ev) => {\n        dispatch(new Msg(7, todoBeingEdited.Id, ev.target.value));\n    }]]), createElement(\"input\", createObj(cons([\"type\", \"text\"], Helpers_combineClasses(\"input\", props)))))])]]), createElement(\"div\", createObj(Helpers_combineClasses(\"control\", props_2)))), (elms = ofArray([(props_5 = ofSeq(delay(() => append_1(singleton_1([\"className\", \"is-primary\"]), delay(() => append_1((todoBeingEdited.Description === uneditedTodoDescription) ? singleton_1([\"disabled\", true]) : empty(), delay(() => append_1((todoBeingEdited.Description !== uneditedTodoDescription) ? singleton_1([\"onClick\", (_arg1) => {\n        dispatch(new Msg(5, todoBeingEdited.Id));\n    }]) : empty(), delay(() => singleton_1([\"children\", Interop_reactApi.Children.toArray([createElement(\"i\", {\n        className: join(\" \", [\"fas\", \"fa-save\"]),\n    })])]))))))))), createElement(\"button\", createObj(Helpers_combineClasses(\"button\", props_5)))), (props_8 = ofArray([[\"className\", \"is-warning\"], [\"onClick\", (_arg2) => {\n        dispatch(new Msg(4, todoBeingEdited.Id));\n    }], [\"children\", Interop_reactApi.Children.toArray([createElement(\"i\", {\n        className: join(\" \", [\"fas\", \"fa-arrow-right\"]),\n    })])]]), createElement(\"button\", createObj(Helpers_combineClasses(\"button\", props_8))))]), createElement(\"div\", {\n        className: \"buttons\",\n        children: Interop_reactApi.Children.toArray(Array.from(elms)),\n    }))])]]), createElement(\"div\", createObj(Helpers_combineClasses(\"field\", props_11)))));\n    return createElement(\"div\", {\n        className: \"box\",\n        children: Interop_reactApi.Children.toArray(Array.from(elms_1)),\n    });\n}\n\nfunction renderTodo(todo, dispatch) {\n    let props_15, elms, props, props_13, elms_1, props_4, props_7, props_10;\n    const elms_2 = singleton((props_15 = ofArray([op_PlusPlus([\"className\", \"is-mobile\"], [\"className\", \"is-vcentered\"]), [\"children\", Interop_reactApi.Children.toArray([(elms = singleton((props = ofSeq(delay(() => append_1((todo.CompletedOn != null) ? singleton_1([\"className\", \"has-text-grey-light\"]) : empty(), delay(() => append_1(singleton_1([\"className\", \"subtitle\"]), delay(() => singleton_1([\"children\", todo.Description]))))))), createElement(\"p\", createObj(Helpers_combineClasses(\"\", props))))), createElement(\"div\", {\n        className: \"column\",\n        children: Interop_reactApi.Children.toArray(Array.from(elms)),\n    })), (props_13 = ofArray([[\"className\", \"is-narrow\"], [\"children\", Interop_reactApi.Children.toArray([(elms_1 = ofArray([(props_4 = ofSeq(delay(() => append_1((todo.CompletedOn != null) ? singleton_1([\"className\", \"is-success\"]) : empty(), delay(() => append_1(singleton_1([\"onClick\", (_arg1) => {\n        dispatch(new Msg(2, todo.Id));\n    }]), delay(() => singleton_1([\"children\", Interop_reactApi.Children.toArray([createElement(\"i\", {\n        className: join(\" \", [\"fas\", \"fa-check\"]),\n    })])]))))))), createElement(\"button\", createObj(Helpers_combineClasses(\"button\", props_4)))), (props_7 = ofSeq(delay(() => append_1(singleton_1([\"className\", \"is-primary\"]), delay(() => append_1((todo.CompletedOn != null) ? singleton_1([\"disabled\", true]) : empty(), delay(() => append_1((todo.CompletedOn == null) ? singleton_1([\"onClick\", (_arg2) => {\n        dispatch(new Msg(6, todo.Id));\n    }]) : empty(), delay(() => singleton_1([\"children\", Interop_reactApi.Children.toArray([createElement(\"i\", {\n        className: join(\" \", [\"fas\", \"fa-edit\"]),\n    })])]))))))))), createElement(\"button\", createObj(Helpers_combineClasses(\"button\", props_7)))), (props_10 = ofArray([[\"className\", \"is-danger\"], [\"onClick\", (_arg3) => {\n        dispatch(new Msg(3, todo.Id));\n    }], [\"children\", Interop_reactApi.Children.toArray([createElement(\"i\", {\n        className: join(\" \", [\"fas\", \"fa-trash\"]),\n    })])]]), createElement(\"button\", createObj(Helpers_combineClasses(\"button\", props_10))))]), createElement(\"div\", {\n        className: \"buttons\",\n        children: Interop_reactApi.Children.toArray(Array.from(elms_1)),\n    }))])]]), createElement(\"div\", createObj(Helpers_combineClasses(\"column\", props_13))))])]]), createElement(\"div\", createObj(Helpers_combineClasses(\"columns\", props_15)))));\n    return createElement(\"div\", {\n        className: \"box\",\n        children: Interop_reactApi.Children.toArray(Array.from(elms_2)),\n    });\n}\n\nfunction todoList(state, dispatch) {\n    const sortedTodoList = sortBy((todo_1) => [todo_1.CompletedOn, todo_1.CreatedOn], filter((todo) => {\n        const matchValue = state.Filter;\n        switch (matchValue.tag) {\n            case 1: {\n                return todo.CompletedOn != null;\n            }\n            case 2: {\n                return todo.CompletedOn == null;\n            }\n            default: {\n                return true;\n            }\n        }\n    }, state.TodoList), {\n        Compare: (x, y) => compareArrays(x, y),\n    });\n    return createElement(\"ul\", {\n        children: Interop_reactApi.Children.toArray(Array.from(ofSeq(delay(() => map_1((todo_2) => {\n            const matchValue_1 = todo_2.TodoBeingEdited;\n            let pattern_matching_result, todoBeingEdited_1;\n            if (matchValue_1 != null) {\n                if (matchValue_1.Id === todo_2.Id) {\n                    pattern_matching_result = 0;\n                    todoBeingEdited_1 = matchValue_1;\n                }\n                else {\n                    pattern_matching_result = 1;\n                }\n            }\n            else {\n                pattern_matching_result = 1;\n            }\n            switch (pattern_matching_result) {\n                case 0: {\n                    return renderEditForm(todo_2.Description, todoBeingEdited_1, dispatch);\n                }\n                case 1: {\n                    return renderTodo(todo_2, dispatch);\n                }\n            }\n        }, sortedTodoList))))),\n    });\n}\n\nfunction renderFilterTabs(state, dispatch) {\n    let children, props_1, props_4, props_7;\n    const props_10 = ofArray([op_PlusPlus([\"className\", \"is-toggle\"], [\"className\", \"is-fullwidth\"]), [\"children\", Interop_reactApi.Children.toArray([(children = ofArray([(props_1 = ofSeq(delay(() => append_1(equals(state.Filter, new Filter(0)) ? singleton_1([\"className\", \"is-active\"]) : empty(), delay(() => append_1(singleton_1([\"onClick\", (_arg1) => {\n        dispatch(new Msg(8, new Filter(0)));\n    }]), delay(() => singleton_1([\"children\", Interop_reactApi.Children.toArray([createElement(\"a\", {\n        children: \"All\",\n    })])]))))))), createElement(\"li\", createObj(Helpers_combineClasses(\"\", props_1)))), (props_4 = ofSeq(delay(() => append_1(equals(state.Filter, new Filter(1)) ? singleton_1([\"className\", \"is-active\"]) : empty(), delay(() => append_1(singleton_1([\"onClick\", (_arg2) => {\n        dispatch(new Msg(8, new Filter(1)));\n    }]), delay(() => singleton_1([\"children\", Interop_reactApi.Children.toArray([createElement(\"a\", {\n        children: \"Completed\",\n    })])]))))))), createElement(\"li\", createObj(Helpers_combineClasses(\"\", props_4)))), (props_7 = ofSeq(delay(() => append_1(equals(state.Filter, new Filter(2)) ? singleton_1([\"className\", \"is-active\"]) : empty(), delay(() => append_1(singleton_1([\"onClick\", (_arg3) => {\n        dispatch(new Msg(8, new Filter(2)));\n    }]), delay(() => singleton_1([\"children\", Interop_reactApi.Children.toArray([createElement(\"a\", {\n        children: \"Not Completed\",\n    })])]))))))), createElement(\"li\", createObj(Helpers_combineClasses(\"\", props_7))))]), createElement(\"ul\", {\n        children: Interop_reactApi.Children.toArray(Array.from(children)),\n    }))])]]);\n    return createElement(\"div\", createObj(Helpers_combineClasses(\"tabs\", props_10)));\n}\n\nexport function App() {\n    let elms_1, elms;\n    const patternInput = useFeliz_React__React_useElmish_Static_645B1FB7(init, (msg, state) => update(msg, state), []);\n    const state_1 = patternInput[0];\n    const dispatch = patternInput[1];\n    const children_2 = ofArray([appTitle, (elms_1 = singleton((elms = ofArray([inputField(state_1, dispatch), renderFilterTabs(state_1, dispatch), todoList(state_1, dispatch)]), createElement(\"div\", {\n        className: \"container\",\n        children: Interop_reactApi.Children.toArray(Array.from(elms)),\n    }))), createElement(\"section\", {\n        className: \"section\",\n        children: Interop_reactApi.Children.toArray(Array.from(elms_1)),\n    }))]);\n    return createElement(\"div\", {\n        children: Interop_reactApi.Children.toArray(Array.from(children_2)),\n    });\n}\n\n","import { join } from \"../fable-library.3.1.5/String.js\";\nimport { length, ofArray, map } from \"../fable-library.3.1.5/List.js\";\nimport { milliseconds, seconds, minutes, hours } from \"../fable-library.3.1.5/TimeSpan.js\";\nimport { map as map_1 } from \"../fable-library.3.1.5/Seq.js\";\n\nexport function PropHelpers_createClockValue(duration) {\n    let i_1;\n    return (join(\":\", map((i) => ((i < 10) ? (\"0\" + i) : i), ofArray([hours(duration), minutes(duration), seconds(duration)]))) + \".\") + (i_1 = (milliseconds(duration) | 0), (i_1 < 10) ? (\"0\" + i_1) : i_1);\n}\n\nexport function PropHelpers_createKeySplines(values) {\n    return join(\"; \", map_1((tupledArg) => ((((((tupledArg[0] + \" \") + tupledArg[1]) + \" \") + tupledArg[2]) + \" \") + tupledArg[3]), values));\n}\n\nexport function PropHelpers_createOnKey(key, handler, ev) {\n    const patternInput = key;\n    const pressedKey = patternInput[0];\n    const matchValue = [patternInput[1], patternInput[2]];\n    let pattern_matching_result;\n    if (matchValue[0]) {\n        if (matchValue[1]) {\n            if (((pressedKey.toLocaleLowerCase() === ev.key.toLocaleLowerCase()) ? ev.ctrlKey : false) ? ev.shiftKey : false) {\n                pattern_matching_result = 0;\n            }\n            else {\n                pattern_matching_result = 1;\n            }\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            handler(ev);\n            break;\n        }\n        case 1: {\n            let pattern_matching_result_1;\n            if (matchValue[0]) {\n                if (matchValue[1]) {\n                    pattern_matching_result_1 = 1;\n                }\n                else if ((pressedKey.toLocaleLowerCase() === ev.key.toLocaleLowerCase()) ? ev.ctrlKey : false) {\n                    pattern_matching_result_1 = 0;\n                }\n                else {\n                    pattern_matching_result_1 = 1;\n                }\n            }\n            else {\n                pattern_matching_result_1 = 1;\n            }\n            switch (pattern_matching_result_1) {\n                case 0: {\n                    handler(ev);\n                    break;\n                }\n                case 1: {\n                    let pattern_matching_result_2;\n                    if (matchValue[0]) {\n                        pattern_matching_result_2 = 1;\n                    }\n                    else if (matchValue[1]) {\n                        if ((pressedKey.toLocaleLowerCase() === ev.key.toLocaleLowerCase()) ? ev.shiftKey : false) {\n                            pattern_matching_result_2 = 0;\n                        }\n                        else {\n                            pattern_matching_result_2 = 1;\n                        }\n                    }\n                    else {\n                        pattern_matching_result_2 = 1;\n                    }\n                    switch (pattern_matching_result_2) {\n                        case 0: {\n                            handler(ev);\n                            break;\n                        }\n                        case 1: {\n                            let pattern_matching_result_3;\n                            if (matchValue[0]) {\n                                pattern_matching_result_3 = 1;\n                            }\n                            else if (matchValue[1]) {\n                                pattern_matching_result_3 = 1;\n                            }\n                            else if (pressedKey.toLocaleLowerCase() === ev.key.toLocaleLowerCase()) {\n                                pattern_matching_result_3 = 0;\n                            }\n                            else {\n                                pattern_matching_result_3 = 1;\n                            }\n                            switch (pattern_matching_result_3) {\n                                case 0: {\n                                    handler(ev);\n                                    break;\n                                }\n                                case 1: {\n                                    break;\n                                }\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n            break;\n        }\n    }\n}\n\nexport function PropHelpers_createPointsFloat(coordinates) {\n    return join(\" \", map_1((tupledArg) => ((tupledArg[0] + \",\") + tupledArg[1]), coordinates));\n}\n\nexport function PropHelpers_createPointsInt(coordinates) {\n    return join(\" \", map_1((tupledArg) => ((tupledArg[0] + \",\") + tupledArg[1]), coordinates));\n}\n\nexport function PropHelpers_createSvgPathFloat(path) {\n    return join(\"\\n\", map_1((tupledArg) => {\n        const cmdType = tupledArg[0];\n        const cmds = tupledArg[1];\n        if (length(cmds) === 0) {\n            return cmdType;\n        }\n        else {\n            return (cmdType + \" \") + join(\" \", map_1((arg) => join(\",\", arg), cmds));\n        }\n    }, path));\n}\n\nexport function PropHelpers_createSvgPathInt(path) {\n    return join(\"\\n\", map_1((tupledArg) => {\n        const cmdType = tupledArg[0];\n        const cmds = tupledArg[1];\n        if (length(cmds) === 0) {\n            return cmdType;\n        }\n        else {\n            return (cmdType + \" \") + join(\" \", map_1((arg) => join(\",\", arg), cmds));\n        }\n    }, path));\n}\n\n","import * as global$ from \"./styles/global.scss\";\nimport { render } from \"react-dom\";\nimport { createElement } from \"react\";\nimport { App } from \"./Todo.fs.js\";\n\n\nrender(createElement(App, null), document.getElementById(\"feliz-app\"));\n\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n// It's empty as some runtime module handles the default behavior\n__webpack_require__.x = x => {}\n","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// Promise = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t143: 0\n};\n\nvar deferredModules = [\n\t[827,216]\n];\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\nvar checkDeferredModules = x => {};\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime, executeModules] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0, resolves = [];\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tresolves.push(installedChunks[chunkId][0]);\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\tfor(moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\twhile(resolves.length) {\n\t\tresolves.shift()();\n\t}\n\n\t// add entry modules from loaded chunk to deferred list\n\tif(executeModules) deferredModules.push.apply(deferredModules, executeModules);\n\n\t// run deferred modules when all chunks ready\n\treturn checkDeferredModules();\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunk\"] = self[\"webpackChunk\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));\n\nfunction checkDeferredModulesImpl() {\n\tvar result;\n\tfor(var i = 0; i < deferredModules.length; i++) {\n\t\tvar deferredModule = deferredModules[i];\n\t\tvar fulfilled = true;\n\t\tfor(var j = 1; j < deferredModule.length; j++) {\n\t\t\tvar depId = deferredModule[j];\n\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferredModules.splice(i--, 1);\n\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n\t\t}\n\t}\n\tif(deferredModules.length === 0) {\n\t\t__webpack_require__.x();\n\t\t__webpack_require__.x = x => {};\n\t}\n\treturn result;\n}\nvar startup = __webpack_require__.x;\n__webpack_require__.x = () => {\n\t// reset startup function so it can be called again when more startup code is added\n\t__webpack_require__.x = startup || (x => {});\n\treturn (checkDeferredModules = checkDeferredModulesImpl)();\n};","// run startup\nreturn __webpack_require__.x();\n"],"sourceRoot":""}